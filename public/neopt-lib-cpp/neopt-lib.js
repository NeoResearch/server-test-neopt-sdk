/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

"use strict";

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};


// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;


// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

  read_ = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';




/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready

/** @suppress{duplicate} */
var stackSave;
/** @suppress{duplicate} */
var stackRestore;
/** @suppress{duplicate} */
var stackAlloc;

stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  assert(end <= HEAP8.length, 'failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}





/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < table.length; i++) {
      var item = table.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.


  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunctionWasm(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */




function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;



/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.


// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{const} */
var
WebAssembly = {
  Memory: /** @constructor */ function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var oldBuffer = this.buffer;
        var ret = __growWasmMemory(amount);
        assert(this.buffer !== oldBuffer); // the call should have updated us
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 438 + 0) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    var exports = (
// EMSCRIPTEN_START_ASM
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var csbiginteger_init_s = env.csbiginteger_init_s;
 var external_sha256 = env.external_sha256;
 var mycrypto = env.mycrypto;
 var bignum_add = env.bignum_add;
 var _embind_register_function = env._embind_register_function;
 var __cxa_allocate_exception = env.__cxa_allocate_exception;
 var __cxa_throw = env.__cxa_throw;
 var csbiginteger_gt = env.csbiginteger_gt;
 var __assert_fail = env.__assert_fail;
 var csbiginteger_lt = env.csbiginteger_lt;
 var exit = env.exit;
 var csbiginteger_mod = env.csbiginteger_mod;
 var _embind_register_void = env._embind_register_void;
 var _embind_register_bool = env._embind_register_bool;
 var _embind_register_std_string = env._embind_register_std_string;
 var _embind_register_std_wstring = env._embind_register_std_wstring;
 var _embind_register_emval = env._embind_register_emval;
 var _embind_register_integer = env._embind_register_integer;
 var _embind_register_float = env._embind_register_float;
 var _embind_register_memory_view = env._embind_register_memory_view;
 var abort = env.abort;
 var __wasi_fd_close = env.fd_close;
 var __wasi_fd_read = env.fd_read;
 var __wasi_fd_write = env.fd_write;
 var __wasi_environ_sizes_get = env.environ_sizes_get;
 var __wasi_environ_get = env.environ_get;
 var __map_file = env.__map_file;
 var __syscall91 = env.__sys_munmap;
 var strftime_l = env.strftime_l;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var __handle_stack_overflow = env.__handle_stack_overflow;
 var setTempRet0 = env.setTempRet0;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var global$0 = 5270848;
 var global$1 = 27800;
 var global$2 = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
function __divtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 $18 = global$0 - 192 | 0;
 $9 = $18;
 if ($18 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 $12 = $7;
 $36 = $12;
 $13 = $8;
 $9 = $13 & 65535;
 $37 = $9;
 $13 = $3;
 $25 = $13;
 $9 = $4;
 $12 = $9 & 65535;
 $31 = $12;
 $12 = $9;
 $9 = $13;
 $13 = $8;
 $13 = $12 ^ $13;
 $10 = $7;
 $9 = $13 & -2147483648;
 $32 = $9;
 $9 = $8;
 $38 = $9 >>> 16 & 32767;
 label$2 : {
  $12 = $4;
  $15 = $12 >>> 16 & 32767;
  label$3 : {
   label$4 : {
    if ($38 + -1 >>> 0 < 32766 ? $15 + -1 >>> 0 <= 32765 : 0) {
     break label$4;
    }
    $13 = $2;
    $14 = !($13 | $1);
    $13 = $4;
    $9 = $13 & 2147483647;
    $17 = $9;
    $12 = $3;
    $19 = $12;
    $11 = ($9 | 0) == 2147418112 & $12 >>> 0 < 0 | $9 >>> 0 < 2147418112;
    $13 = $9;
    $10 = $12;
    if (!(!$10 & ($13 | 0) == 2147418112 ? $14 : $11)) {
     $12 = $3;
     $34 = $12;
     $10 = $4;
     $13 = $10 | 32768;
     $32 = $13;
     break label$3;
    }
    $13 = $6;
    $14 = !($13 | $5);
    $13 = $8;
    $12 = $13 & 2147483647;
    $4 = $12;
    $10 = $7;
    $3 = $10;
    $11 = ($12 | 0) == 2147418112 & $10 >>> 0 < 0 | $12 >>> 0 < 2147418112;
    $13 = $12;
    $9 = $10;
    if (!(!$9 & ($13 | 0) == 2147418112 ? $14 : $11)) {
     $10 = $7;
     $34 = $10;
     $9 = $8;
     $13 = $9 | 32768;
     $32 = $13;
     $1 = $5;
     $13 = $6;
     $2 = $13;
     break label$3;
    }
    $13 = $17;
    $10 = $13 ^ 2147418112;
    $13 = $1;
    $9 = $19;
    $12 = $9;
    $9 = $10;
    $10 = $2;
    $9 = $9 | $10;
    if (!($13 | $12 | $9)) {
     $9 = $4;
     $13 = $9 ^ 2147418112;
     $1 = $13;
     $9 = $5;
     $10 = $3;
     $12 = $10;
     $13 = $6;
     $10 = $1;
     $10 = $13 | $10;
     if (!($9 | $12 | $10)) {
      $1 = 0;
      $2 = 0;
      $32 = 2147450880;
      break label$3;
     }
     $13 = $34;
     $34 = $13;
     $10 = $32;
     $9 = $10 | 2147418112;
     $32 = $9;
     $1 = 0;
     $2 = 0;
     break label$3;
    }
    $9 = $4;
    $13 = $9 ^ 2147418112;
    $7 = $13;
    $9 = $5;
    $10 = $3;
    $12 = $10;
    $13 = $6;
    $10 = $7;
    $10 = $13 | $10;
    if (!($9 | $12 | $10)) {
     $1 = 0;
     $2 = 0;
     break label$3;
    }
    $9 = $17;
    $10 = $2;
    $9 = $9 | $10;
    $13 = $1;
    $12 = $19;
    if (!($9 | ($13 | $12))) {
     break label$2;
    }
    $13 = $6;
    $9 = $4;
    $13 = $13 | $9;
    $12 = $5;
    $10 = $3;
    if (!($13 | ($12 | $10))) {
     $9 = $34;
     $34 = $9;
     $13 = $32;
     $10 = $13 | 2147418112;
     $32 = $10;
     $1 = 0;
     $2 = 0;
     break label$3;
    }
    $10 = $17;
    $13 = $19;
    if (($10 | 0) == 65535 & $13 >>> 0 <= 4294967295 | $10 >>> 0 < 65535) {
     $21 = $18 + 176 | 0;
     $17 = $1;
     $13 = $2;
     $11 = $13;
     $8 = $25;
     $13 = $31;
     $7 = $13;
     $16 = !($13 | $25);
     $14 = $16;
     $9 = $14 ? $1 : $25;
     $13 = $2;
     $10 = $31;
     $12 = $14 ? $13 : $10;
     $13 = Math_clz32($12);
     $9 = ($13 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $13;
     $13 = $16 << 6;
     $10 = $13 + $9 | 0;
     $10 >>> 0 < $13 >>> 0;
     $9 = $7;
     __ashlti3($21, $17, $11, $8, $9, $10 + -15 | 0);
     $16 = 16 - $10 | 0;
     $14 = $18;
     $9 = HEAP32[$14 + 184 >> 2];
     $25 = $9;
     $11 = HEAP32[$14 + 188 >> 2];
     $31 = $11;
     $9 = HEAP32[$14 + 180 >> 2];
     $2 = $9;
     $11 = HEAP32[$14 + 176 >> 2];
     $1 = $11;
    }
    $9 = $4;
    $14 = $3;
    if (($9 | 0) == 65535 & $14 >>> 0 > 4294967295 | $9 >>> 0 > 65535) {
     break label$4;
    }
    $17 = $18 + 160 | 0;
    $8 = $5;
    $14 = $6;
    $10 = $14;
    $7 = $36;
    $14 = $37;
    $3 = $14;
    $4 = !($14 | $36);
    $12 = $4;
    $11 = $12 ? $5 : $36;
    $14 = $6;
    $9 = $37;
    $13 = $12 ? $14 : $9;
    $14 = Math_clz32($13);
    $11 = ($14 | 0) == 32 ? Math_clz32($11) + 32 | 0 : $14;
    $14 = $4 << 6;
    $9 = $14 + $11 | 0;
    $9 >>> 0 < $14 >>> 0;
    $11 = $3;
    __ashlti3($17, $8, $10, $7, $11, $9 + -15 | 0);
    $16 = ($16 + $9 | 0) + -16 | 0;
    $12 = $18;
    $11 = HEAP32[$12 + 168 >> 2];
    $36 = $11;
    $10 = HEAP32[$12 + 172 >> 2];
    $37 = $10;
    $10 = HEAP32[$12 + 160 >> 2];
    $5 = $10;
    $11 = HEAP32[$12 + 164 >> 2];
    $6 = $11;
   }
   $11 = $37;
   $10 = $11 | 65536;
   $40 = $10;
   $12 = $36;
   $41 = $12;
   $11 = $12;
   $12 = $10 << 15 | $11 >>> 17;
   $4 = $12;
   $12 = $6;
   $14 = $12 >>> 17 | 0;
   $12 = $11 << 15;
   $3 = $12 | $14;
   $14 = $3;
   $13 = -102865788 - $14 | 0;
   $7 = $13;
   $11 = 0;
   $10 = $11;
   $11 = $4;
   $10 = $10 | $11;
   $4 = $10;
   $9 = $10 + (4192101508 < $14 >>> 0) | 0;
   $9 = 1963258675 - $9 | 0;
   $8 = $9;
   $9 = $10;
   $10 = $8;
   __multi3($18 + 144 | 0, $3, $9, 0, 0, $13, $10, 0, 0);
   $11 = $18;
   $14 = HEAP32[$11 + 152 >> 2];
   $9 = $14;
   $12 = 0 - $9 | 0;
   $10 = HEAP32[$11 + 156 >> 2];
   $13 = $10 + (0 < $9 >>> 0) | 0;
   $13 = 0 - $13 | 0;
   $10 = $8;
   __multi3($18 + 128 | 0, $12, $13, 0, 0, $7, $10, 0, 0);
   $11 = $18;
   $9 = HEAP32[$11 + 136 >> 2];
   $10 = HEAP32[$11 + 140 >> 2];
   $7 = $9 << 1;
   $9 = $10 << 1 | $9 >>> 31;
   $8 = $9;
   $10 = $18;
   $9 = HEAP32[$10 + 128 >> 2];
   $11 = HEAP32[$10 + 132 >> 2];
   $9 = 0;
   $10 = $9;
   $13 = $11 >>> 31 | 0;
   $11 = $7;
   $7 = $13 | $11;
   $9 = $8;
   $10 = $9 | $10;
   $8 = $10;
   $9 = $4;
   __multi3($18 + 112 | 0, $7, $10, 0, 0, $3, $9, 0, 0);
   $11 = $18;
   $13 = HEAP32[$11 + 120 >> 2];
   $10 = $13;
   $14 = 0 - $10 | 0;
   $9 = HEAP32[$11 + 124 >> 2];
   $12 = $9 + (0 < $10 >>> 0) | 0;
   $12 = 0 - $12 | 0;
   $9 = $12;
   $10 = $11 + 96 | 0;
   $12 = $8;
   __multi3($10, $7, $12, 0, 0, $14, $9, 0, 0);
   $11 = $18;
   $10 = HEAP32[$11 + 104 >> 2];
   $9 = HEAP32[$11 + 108 >> 2];
   $7 = $10 << 1;
   $10 = $9 << 1 | $10 >>> 31;
   $8 = $10;
   $9 = $18;
   $10 = HEAP32[$9 + 96 >> 2];
   $11 = HEAP32[$9 + 100 >> 2];
   $12 = $11 >>> 31 | 0;
   $11 = $7;
   $7 = $12 | $11;
   $10 = 0;
   $9 = $10;
   $10 = $8;
   $9 = $9 | $10;
   $8 = $9;
   $10 = $4;
   __multi3($18 + 80 | 0, $7, $9, 0, 0, $3, $10, 0, 0);
   $11 = $18;
   $12 = HEAP32[$11 + 88 >> 2];
   $9 = $12;
   $13 = 0 - $9 | 0;
   $10 = HEAP32[$11 + 92 >> 2];
   $14 = $10 + (0 < $9 >>> 0) | 0;
   $14 = 0 - $14 | 0;
   $10 = $14;
   $9 = $11 - -64 | 0;
   $14 = $8;
   __multi3($9, $7, $14, 0, 0, $13, $10, 0, 0);
   $11 = $18;
   $9 = HEAP32[$11 + 72 >> 2];
   $10 = HEAP32[$11 + 76 >> 2];
   $7 = $9 << 1;
   $9 = $10 << 1 | $9 >>> 31;
   $8 = $9;
   $10 = $18;
   $9 = HEAP32[$10 + 64 >> 2];
   $11 = HEAP32[$10 + 68 >> 2];
   $9 = 0;
   $10 = $9;
   $14 = $11 >>> 31 | 0;
   $11 = $7;
   $7 = $14 | $11;
   $9 = $8;
   $10 = $9 | $10;
   $8 = $10;
   $9 = $4;
   __multi3($18 + 48 | 0, $7, $10, 0, 0, $3, $9, 0, 0);
   $11 = $18;
   $14 = HEAP32[$11 + 56 >> 2];
   $10 = $14;
   $12 = 0 - $10 | 0;
   $9 = HEAP32[$11 + 60 >> 2];
   $13 = $9 + (0 < $10 >>> 0) | 0;
   $13 = 0 - $13 | 0;
   $9 = $13;
   $10 = $11 + 32 | 0;
   $13 = $8;
   __multi3($10, $7, $13, 0, 0, $12, $9, 0, 0);
   $11 = $18;
   $10 = HEAP32[$11 + 40 >> 2];
   $9 = HEAP32[$11 + 44 >> 2];
   $7 = $10 << 1;
   $10 = $9 << 1 | $10 >>> 31;
   $8 = $10;
   $9 = $18;
   $10 = HEAP32[$9 + 32 >> 2];
   $11 = HEAP32[$9 + 36 >> 2];
   $13 = $11 >>> 31 | 0;
   $11 = $7;
   $7 = $13 | $11;
   $10 = 0;
   $9 = $10;
   $10 = $8;
   $9 = $9 | $10;
   $8 = $9;
   $10 = $4;
   __multi3($18 + 16 | 0, $7, $9, 0, 0, $3, $10, 0, 0);
   $11 = $18;
   $13 = HEAP32[$11 + 24 >> 2];
   $9 = $13;
   $14 = 0 - $9 | 0;
   $10 = HEAP32[$11 + 28 >> 2];
   $12 = $10 + (0 < $9 >>> 0) | 0;
   $12 = 0 - $12 | 0;
   $10 = $12;
   $12 = $8;
   __multi3($18, $7, $12, 0, 0, $14, $10, 0, 0);
   $38 = ($15 - $38 | 0) + $16 | 0;
   $11 = $18;
   $9 = HEAP32[$11 + 8 >> 2];
   $10 = HEAP32[$11 + 12 >> 2];
   $8 = $9 << 1;
   $9 = $10 << 1 | $9 >>> 31;
   $7 = $9;
   $10 = $18;
   $9 = HEAP32[$10 >> 2];
   $11 = HEAP32[$10 + 4 >> 2];
   $9 = 0;
   $10 = $9;
   $9 = $7;
   $10 = $9 | $10;
   $12 = $11 >>> 31 | 0;
   $11 = $8;
   $9 = $12 | $11;
   $14 = $10 + -1 | 0;
   $13 = $9 + -1 | 0;
   if ($13 >>> 0 < 4294967295) {
    $14 = $14 + 1 | 0;
   }
   $17 = $14;
   $9 = 0;
   $8 = $9;
   $10 = $13;
   $7 = $10;
   $10 = 0;
   $21 = $10;
   $9 = $4;
   $26 = $9;
   $14 = __wasm_i64_mul($13, $8, $9, $10);
   $28 = $14;
   $10 = i64toi32_i32$HIGH_BITS;
   $29 = $10;
   $9 = 0;
   $16 = $9;
   $10 = $17;
   $19 = $10;
   $14 = 0;
   $17 = $14;
   $9 = $14;
   $10 = $3;
   $20 = $10;
   $10 = $16;
   $10 = __wasm_i64_mul($19, $9, $3, $10);
   $12 = $10;
   $9 = i64toi32_i32$HIGH_BITS;
   $10 = $9;
   $9 = $29;
   $13 = $9 + $10 | 0;
   $14 = $28;
   $11 = $12 + $14 | 0;
   if ($11 >>> 0 < $12 >>> 0) {
    $13 = $13 + 1 | 0;
   }
   $3 = $11;
   $4 = $13;
   $9 = $11;
   $15 = $9;
   $14 = $8;
   $9 = $16;
   $9 = __wasm_i64_mul($7, $14, $20, $9);
   $12 = $9;
   $14 = i64toi32_i32$HIGH_BITS;
   $9 = $14;
   $11 = $9 + $11 | 0;
   $13 = $30;
   $10 = $13 + $12 | 0;
   if ($10 >>> 0 < $12 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $20 = $10;
   $13 = $15;
   $16 = $11;
   $12 = $22;
   $15 = ($13 | 0) == ($11 | 0) & $10 >>> 0 < $12 >>> 0 | $11 >>> 0 < $13 >>> 0;
   $14 = $17;
   $11 = $21;
   $11 = __wasm_i64_mul($19, $14, $26, $11);
   $9 = $11;
   $14 = i64toi32_i32$HIGH_BITS;
   $10 = $14;
   $14 = $4;
   $11 = $29;
   $12 = $3;
   $13 = $28;
   $13 = ($14 | 0) == ($11 | 0) & $12 >>> 0 < $13 >>> 0 | $14 >>> 0 < $11 >>> 0;
   $14 = $13;
   $13 = 0;
   $12 = $13;
   $13 = $14;
   $12 = $13 | $12;
   $3 = $12;
   $13 = $9;
   $14 = 0;
   $11 = $4;
   $11 = $14 | $11;
   $9 = $13 + $11 | 0;
   $12 = $10;
   $14 = $3;
   $10 = $12 + $14 | 0;
   $3 = $9;
   $10 = $9 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
   $9 = $10;
   $12 = $15;
   $11 = $3;
   $14 = $12 + $11 | 0;
   if ($14 >>> 0 < $11 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $35 = $14;
   $33 = $9;
   $27 = $20;
   $9 = $16;
   $23 = $9;
   $9 = $6;
   $10 = $5;
   $9 = ($9 & 131071) << 15 | $10 >>> 17;
   $26 = $9;
   $10 = 0;
   $21 = $10;
   $10 = $8;
   $9 = $21;
   $9 = __wasm_i64_mul($7, $10, $26, $9);
   $28 = $9;
   $10 = i64toi32_i32$HIGH_BITS;
   $29 = $10;
   $10 = $6;
   $12 = $5;
   $10 = $12 << 15;
   $22 = $10 & -32768;
   $12 = 0;
   $15 = $12;
   $12 = $17;
   $10 = $15;
   $10 = __wasm_i64_mul($19, $12, $22, $10);
   $11 = $10;
   $12 = i64toi32_i32$HIGH_BITS;
   $10 = $12;
   $12 = $29;
   $14 = $12 + $10 | 0;
   $9 = $28;
   $13 = $9 + $11 | 0;
   if ($13 >>> 0 < $11 >>> 0) {
    $14 = $14 + 1 | 0;
   }
   $3 = $13;
   $4 = $14;
   $12 = $13;
   $9 = $12;
   $30 = $9;
   $9 = $8;
   $12 = $15;
   $12 = __wasm_i64_mul($7, $9, $22, $12);
   $11 = $12;
   $9 = i64toi32_i32$HIGH_BITS;
   $12 = $9;
   $9 = $13;
   $13 = $9 + $12 | 0;
   $14 = $42;
   $10 = $14 + $11 | 0;
   if ($10 >>> 0 < $11 >>> 0) {
    $13 = $13 + 1 | 0;
   }
   $14 = $30;
   $9 = $10;
   $11 = $24;
   $15 = ($14 | 0) == ($13 | 0) & $9 >>> 0 < $11 >>> 0 | $13 >>> 0 < $14 >>> 0;
   $9 = $17;
   $13 = $21;
   $13 = __wasm_i64_mul($19, $9, $26, $13);
   $12 = $13;
   $9 = i64toi32_i32$HIGH_BITS;
   $10 = $9;
   $13 = $29;
   $9 = $4;
   $11 = $3;
   $14 = $28;
   $14 = ($13 | 0) == ($9 | 0) & $11 >>> 0 < $14 >>> 0 | $9 >>> 0 < $13 >>> 0;
   $9 = $14;
   $14 = 0;
   $11 = $14;
   $11 = $9 | $11;
   $9 = $4;
   $13 = $9;
   $9 = 0;
   $13 = $13 | $9;
   $14 = $12;
   $12 = $13 + $14 | 0;
   $9 = $11;
   $11 = $10;
   $10 = $9 + $11 | 0;
   $3 = $12;
   $10 = $12 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
   $12 = $10;
   $13 = $3;
   $11 = $15;
   $9 = $13 + $11 | 0;
   if ($9 >>> 0 < $13 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $13 = $9;
   $11 = $12;
   $12 = $23;
   $9 = $12 + $11 | 0;
   $10 = $27;
   $14 = $13 + $10 | 0;
   if ($14 >>> 0 < $13 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $3 = $14;
   $4 = $9;
   $10 = $16;
   $12 = $14;
   $13 = $20;
   $10 = ($9 | 0) == ($10 | 0) & $12 >>> 0 < $13 >>> 0 | $9 >>> 0 < $10 >>> 0;
   $12 = $33;
   $14 = $12;
   $13 = $35;
   $11 = $13 + $10 | 0;
   if ($11 >>> 0 < $10 >>> 0) {
    $14 = $14 + 1 | 0;
   }
   $10 = $11;
   $9 = $14;
   $12 = $3;
   $14 = $4;
   $13 = ($12 | 0) != 0 | ($14 | 0) != 0;
   $12 = $9;
   $11 = $12;
   $9 = $13 + $10 | 0;
   if ($9 >>> 0 < $13 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $14 = 0 - $9 | 0;
   $10 = $11;
   $9 = $10 + (0 < $9 >>> 0) | 0;
   $9 = 0 - $9 | 0;
   $11 = $14;
   $12 = 0;
   $21 = $12;
   $11 = $8;
   $11 = __wasm_i64_mul($14, $12, $7, $11);
   $28 = $11;
   $12 = i64toi32_i32$HIGH_BITS;
   $29 = $12;
   $23 = $11;
   $26 = $12;
   $12 = $17;
   $11 = $21;
   $11 = __wasm_i64_mul($19, $12, $14, $11);
   $22 = $11;
   $12 = i64toi32_i32$HIGH_BITS;
   $15 = $12;
   $11 = 0;
   $30 = $11;
   $12 = $8;
   $11 = $12;
   $12 = $9;
   $24 = $12;
   $9 = $30;
   $9 = __wasm_i64_mul($7, $11, $12, $9);
   $13 = $9;
   $11 = i64toi32_i32$HIGH_BITS;
   $9 = $11;
   $11 = $15;
   $14 = $9 + $11 | 0;
   $12 = $22;
   $10 = $13 + $12 | 0;
   if ($10 >>> 0 < $13 >>> 0) {
    $14 = $14 + 1 | 0;
   }
   $20 = $10;
   $16 = $14;
   $12 = $26;
   $10 = $12 + $10 | 0;
   $13 = 0;
   $14 = $23;
   $9 = $13 + $14 | 0;
   if ($9 >>> 0 < $13 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $26 = $9;
   $21 = $10;
   $14 = $29;
   $13 = $28;
   $28 = ($10 | 0) == ($14 | 0) & $9 >>> 0 < $13 >>> 0 | $10 >>> 0 < $14 >>> 0;
   $12 = $17;
   $10 = $30;
   $10 = __wasm_i64_mul($19, $12, $24, $10);
   $11 = $10;
   $12 = i64toi32_i32$HIGH_BITS;
   $29 = $12;
   $12 = $16;
   $10 = $15;
   $13 = $20;
   $14 = $22;
   $14 = ($12 | 0) == ($10 | 0) & $13 >>> 0 < $14 >>> 0 | $12 >>> 0 < $10 >>> 0;
   $12 = $14;
   $14 = 0;
   $13 = $14;
   $14 = $12;
   $13 = $13 | $14;
   $9 = $13;
   $12 = 0;
   $10 = $16;
   $10 = $12 | $10;
   $14 = $11;
   $11 = $10 + $14 | 0;
   $13 = $29;
   $12 = $9;
   $9 = $13 + $12 | 0;
   $12 = $11;
   $9 = $11 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $11 = $9;
   $13 = $28;
   $10 = $12;
   $12 = $13 + $10 | 0;
   if ($12 >>> 0 < $10 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $35 = $12;
   $33 = $11;
   $27 = $26;
   $11 = $21;
   $23 = $11;
   $10 = $3;
   $14 = 0 - $10 | 0;
   $13 = $4;
   $12 = $13 + (0 < $10 >>> 0) | 0;
   $12 = 0 - $12 | 0;
   $20 = $12;
   $16 = 0;
   $11 = $8;
   $11 = __wasm_i64_mul($12, $16, $7, $11);
   $28 = $11;
   $9 = i64toi32_i32$HIGH_BITS;
   $29 = $9;
   $12 = $14;
   $22 = $12;
   $11 = 0;
   $15 = $11;
   $12 = $17;
   $12 = __wasm_i64_mul($14, $11, $19, $12);
   $10 = $12;
   $11 = i64toi32_i32$HIGH_BITS;
   $12 = $11;
   $11 = $29;
   $14 = $12 + $11 | 0;
   $9 = $28;
   $13 = $9 + $10 | 0;
   if ($13 >>> 0 < $10 >>> 0) {
    $14 = $14 + 1 | 0;
   }
   $3 = $13;
   $4 = $14;
   $11 = $13;
   $9 = $11;
   $30 = $9;
   $24 = 0;
   $9 = $8;
   $11 = $15;
   $11 = __wasm_i64_mul($7, $9, $22, $11);
   $10 = $11;
   $9 = i64toi32_i32$HIGH_BITS;
   $11 = $9;
   $9 = $13;
   $13 = $9 + $11 | 0;
   $14 = $24;
   $12 = $10 + $14 | 0;
   if ($12 >>> 0 < $10 >>> 0) {
    $13 = $13 + 1 | 0;
   }
   $14 = $30;
   $9 = $12;
   $10 = $24;
   $15 = ($14 | 0) == ($13 | 0) & $9 >>> 0 < $10 >>> 0 | $13 >>> 0 < $14 >>> 0;
   $9 = $16;
   $13 = $17;
   $13 = __wasm_i64_mul($20, $9, $19, $13);
   $8 = $13;
   $9 = i64toi32_i32$HIGH_BITS;
   $7 = $9;
   $13 = $29;
   $9 = $4;
   $10 = $3;
   $14 = $28;
   $14 = ($13 | 0) == ($9 | 0) & $10 >>> 0 < $14 >>> 0 | $9 >>> 0 < $13 >>> 0;
   $9 = $14;
   $14 = 0;
   $10 = $14;
   $10 = $10 | $9;
   $9 = $4;
   $13 = $9;
   $9 = 0;
   $13 = $13 | $9;
   $14 = $8;
   $11 = $13 + $14 | 0;
   $9 = $10;
   $10 = $7;
   $12 = $9 + $10 | 0;
   $3 = $11;
   $12 = $11 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
   $11 = $12;
   $13 = $3;
   $10 = $15;
   $9 = $13 + $10 | 0;
   if ($9 >>> 0 < $13 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $13 = $9;
   $10 = $11;
   $11 = $23;
   $9 = $10 + $11 | 0;
   $12 = $27;
   $14 = $13 + $12 | 0;
   if ($14 >>> 0 < $13 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $3 = $14;
   $4 = $9;
   $12 = $21;
   $11 = $14;
   $13 = $26;
   $12 = ($9 | 0) == ($12 | 0) & $11 >>> 0 < $13 >>> 0 | $9 >>> 0 < $12 >>> 0;
   $11 = $33;
   $14 = $11;
   $13 = $35;
   $10 = $13 + $12 | 0;
   if ($10 >>> 0 < $12 >>> 0) {
    $14 = $14 + 1 | 0;
   }
   $8 = $10;
   $7 = $14;
   $14 = $4;
   $10 = $14 + -1 | 0;
   $11 = $3;
   $9 = $11 + -2 | 0;
   if ($9 >>> 0 < 4294967294) {
    $10 = $10 + 1 | 0;
   }
   $28 = $9;
   $29 = $10;
   $11 = $4;
   $12 = $3;
   $11 = ($10 | 0) == ($11 | 0) & $9 >>> 0 < $12 >>> 0 | $10 >>> 0 < $11 >>> 0;
   $14 = $7;
   $9 = $14;
   $12 = $8;
   $13 = $12 + $11 | 0;
   if ($13 >>> 0 < $11 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $14 = $13;
   $13 = $9 + -1 | 0;
   $10 = $14 + -1 | 0;
   if ($10 >>> 0 < 4294967295) {
    $13 = $13 + 1 | 0;
   }
   $16 = $13;
   $14 = 0;
   $4 = $14;
   $9 = $10;
   $3 = $9;
   $13 = $25;
   $8 = $13 << 2;
   $14 = $31;
   $9 = $14 << 2 | $13 >>> 30;
   $7 = $9;
   $9 = $2;
   $11 = $9 >>> 30 | 0;
   $13 = 0;
   $14 = $13;
   $13 = $7;
   $9 = $8;
   $13 = $9 | $11;
   $7 = $13;
   $9 = 0;
   $8 = $9;
   $13 = __wasm_i64_mul($10, $44, $7, $9);
   $26 = $13;
   $9 = i64toi32_i32$HIGH_BITS;
   $21 = $9;
   $9 = $2;
   $14 = $1;
   $9 = ($9 & 1073741823) << 2 | $14 >>> 30;
   $19 = $9;
   $14 = 0;
   $17 = $14;
   $14 = $16;
   $20 = $14;
   $9 = 0;
   $16 = $9;
   $13 = __wasm_i64_mul($19, $43, $14, $9);
   $11 = $13;
   $9 = i64toi32_i32$HIGH_BITS;
   $13 = $9;
   $9 = $21;
   $10 = $13 + $9 | 0;
   $14 = $26;
   $12 = $14 + $11 | 0;
   if ($12 >>> 0 < $11 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $22 = $12;
   $15 = $10;
   $14 = $21;
   $9 = $12;
   $11 = $26;
   $23 = ($10 | 0) == ($14 | 0) & $9 >>> 0 < $11 >>> 0 | $10 >>> 0 < $14 >>> 0;
   $9 = $29;
   $26 = $9;
   $10 = 0;
   $21 = $10;
   $10 = $31;
   $9 = $25;
   $10 = ($10 & 1073741823) << 2 | $9 >>> 30;
   $11 = $10 & -262145;
   $25 = $11 | 262144;
   $9 = 0;
   $31 = $9;
   $10 = $39;
   $11 = __wasm_i64_mul($26, $10, $25, $9);
   $14 = $11;
   $10 = i64toi32_i32$HIGH_BITS;
   $11 = $10;
   $10 = $15;
   $12 = $10 + $11 | 0;
   $9 = $22;
   $13 = $9 + $14 | 0;
   if ($13 >>> 0 < $14 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $24 = $13;
   $9 = $15;
   $30 = $12;
   $10 = $13;
   $14 = $22;
   $9 = ($9 | 0) == ($12 | 0) & $10 >>> 0 < $14 >>> 0 | $12 >>> 0 < $9 >>> 0;
   $13 = 0;
   $14 = $23;
   $11 = $9 + $14 | 0;
   if ($11 >>> 0 < $9 >>> 0) {
    $13 = 1;
   }
   $12 = $11;
   $10 = $13;
   $13 = $16;
   $14 = $31;
   $14 = __wasm_i64_mul($20, $13, $25, $14);
   $9 = $14;
   $13 = i64toi32_i32$HIGH_BITS;
   $14 = $13;
   $13 = $10;
   $11 = $13 + $14 | 0;
   $10 = $12;
   $12 = $9 + $10 | 0;
   if ($12 >>> 0 < $9 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $35 = $12;
   $33 = $11;
   $11 = $4;
   $10 = $31;
   $10 = __wasm_i64_mul($3, $11, $25, $10);
   $27 = $10;
   $11 = i64toi32_i32$HIGH_BITS;
   $23 = $11;
   $11 = $8;
   $10 = $16;
   $10 = __wasm_i64_mul($7, $11, $20, $10);
   $9 = $10;
   $11 = i64toi32_i32$HIGH_BITS;
   $10 = $11;
   $11 = $23;
   $12 = $10 + $11 | 0;
   $13 = $27;
   $14 = $13 + $9 | 0;
   if ($14 >>> 0 < $9 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $22 = $14;
   $13 = $23;
   $15 = $12;
   $11 = $14;
   $9 = $27;
   $9 = ($13 | 0) == ($12 | 0) & $11 >>> 0 < $9 >>> 0 | $12 >>> 0 < $13 >>> 0;
   $12 = $9;
   $9 = 0;
   $11 = $9;
   $9 = $12;
   $11 = $9 | $11;
   $12 = $15;
   $13 = $12;
   $12 = 0;
   $13 = $13 | $12;
   $9 = $35;
   $10 = $13 + $9 | 0;
   $12 = $11;
   $11 = $33;
   $14 = $12 + $11 | 0;
   $27 = $10;
   $14 = $10 >>> 0 < $13 >>> 0 ? $14 + 1 | 0 : $14;
   $23 = $14;
   $11 = $22;
   $14 = $30;
   $9 = $14;
   $10 = $9 + $11 | 0;
   $13 = 0;
   $14 = $24;
   $12 = $13 + $14 | 0;
   if ($12 >>> 0 < $13 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $22 = $12;
   $15 = $10;
   $14 = $30;
   $9 = $12;
   $13 = $24;
   $14 = ($10 | 0) == ($14 | 0) & $9 >>> 0 < $13 >>> 0 | $10 >>> 0 < $14 >>> 0;
   $9 = $23;
   $12 = $9;
   $13 = $27;
   $11 = $13 + $14 | 0;
   if ($11 >>> 0 < $14 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $43 = $11;
   $42 = $12;
   $39 = $22;
   $12 = $15;
   $35 = $12;
   $12 = $17;
   $13 = $21;
   $13 = __wasm_i64_mul($19, $12, $26, $13);
   $27 = $13;
   $12 = i64toi32_i32$HIGH_BITS;
   $23 = $12;
   $9 = $28;
   $28 = $9;
   $13 = 0;
   $29 = $13;
   $9 = $8;
   $9 = __wasm_i64_mul($28, $13, $7, $9);
   $14 = $9;
   $13 = i64toi32_i32$HIGH_BITS;
   $9 = $13;
   $13 = $23;
   $11 = $13 + $9 | 0;
   $12 = $27;
   $10 = $12 + $14 | 0;
   if ($10 >>> 0 < $14 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $24 = $10;
   $12 = $23;
   $30 = $11;
   $14 = $27;
   $44 = ($12 | 0) == ($11 | 0) & $10 >>> 0 < $14 >>> 0 | $11 >>> 0 < $12 >>> 0;
   $13 = $2;
   $14 = $1;
   $13 = $14 << 2;
   $27 = $13 & -4;
   $14 = 0;
   $23 = $14;
   $14 = $4;
   $13 = $23;
   $13 = __wasm_i64_mul($3, $14, $27, $13);
   $12 = $13;
   $14 = i64toi32_i32$HIGH_BITS;
   $13 = $14;
   $14 = $30;
   $10 = $13 + $14 | 0;
   $11 = $24;
   $9 = $12 + $11 | 0;
   if ($9 >>> 0 < $12 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $33 = $9;
   $2 = $10;
   $11 = $30;
   $12 = $24;
   $11 = ($10 | 0) == ($11 | 0) & $9 >>> 0 < $12 >>> 0 | $10 >>> 0 < $11 >>> 0;
   $9 = 0;
   $12 = $44;
   $13 = $12 + $11 | 0;
   if ($13 >>> 0 < $11 >>> 0) {
    $9 = 1;
   }
   $11 = $13;
   $12 = $9;
   $9 = $35;
   $13 = $9 + $12 | 0;
   $14 = $39;
   $10 = $14 + $11 | 0;
   if ($10 >>> 0 < $11 >>> 0) {
    $13 = $13 + 1 | 0;
   }
   $24 = $10;
   $30 = $13;
   $14 = $15;
   $9 = $10;
   $11 = $22;
   $14 = ($13 | 0) == ($14 | 0) & $9 >>> 0 < $11 >>> 0 | $13 >>> 0 < $14 >>> 0;
   $9 = $42;
   $10 = $9;
   $11 = $43;
   $12 = $14 + $11 | 0;
   if ($12 >>> 0 < $14 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $43 = $12;
   $42 = $10;
   $39 = $24;
   $10 = $30;
   $35 = $10;
   $10 = $16;
   $11 = $23;
   $11 = __wasm_i64_mul($20, $10, $27, $11);
   $22 = $11;
   $10 = i64toi32_i32$HIGH_BITS;
   $15 = $10;
   $10 = $31;
   $11 = $29;
   $11 = __wasm_i64_mul($25, $10, $28, $11);
   $14 = $11;
   $10 = i64toi32_i32$HIGH_BITS;
   $11 = $10;
   $10 = $15;
   $12 = $10 + $11 | 0;
   $9 = $22;
   $13 = $9 + $14 | 0;
   if ($13 >>> 0 < $14 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $20 = $13;
   $16 = $12;
   $12 = $8;
   $9 = $21;
   $9 = __wasm_i64_mul($7, $12, $26, $9);
   $14 = $9;
   $12 = i64toi32_i32$HIGH_BITS;
   $9 = $12;
   $12 = $16;
   $13 = $9 + $12 | 0;
   $10 = $20;
   $11 = $10 + $14 | 0;
   if ($11 >>> 0 < $14 >>> 0) {
    $13 = $13 + 1 | 0;
   }
   $7 = $11;
   $8 = $13;
   $13 = $4;
   $10 = $17;
   $10 = __wasm_i64_mul($3, $13, $19, $10);
   $14 = $10;
   $13 = i64toi32_i32$HIGH_BITS;
   $10 = $13;
   $13 = $8;
   $11 = $13 + $10 | 0;
   $12 = $7;
   $9 = $12 + $14 | 0;
   if ($9 >>> 0 < $14 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $3 = $9;
   $31 = $11;
   $12 = 0;
   $4 = $12;
   $12 = $11;
   $14 = $7;
   $25 = ($8 | 0) == ($12 | 0) & $9 >>> 0 < $14 >>> 0 | $12 >>> 0 < $13 >>> 0;
   $12 = $15;
   $11 = $16;
   $14 = $20;
   $13 = $22;
   $10 = ($12 | 0) == ($11 | 0) & $14 >>> 0 < $13 >>> 0 | $11 >>> 0 < $12 >>> 0;
   $14 = $8;
   $13 = $7;
   $12 = $20;
   $11 = ($11 | 0) == ($14 | 0) & $13 >>> 0 < $12 >>> 0 | $14 >>> 0 < $11 >>> 0;
   $9 = 0;
   $12 = $10;
   $10 = $12 + $11 | 0;
   if ($10 >>> 0 < $11 >>> 0) {
    $9 = 1;
   }
   $11 = $10;
   $10 = $9;
   $13 = $25;
   $14 = $13 + $11 | 0;
   $14 >>> 0 < $11 >>> 0;
   $9 = $14;
   $13 = $4;
   $9 = $13 | $9;
   $4 = $9;
   $13 = $39;
   $10 = $31;
   $11 = $45;
   $11 = $10 | $11;
   $12 = $13 + $11 | 0;
   $9 = $35;
   $10 = $4;
   $14 = $9 + $10 | 0;
   $20 = $12;
   $13 = $30;
   $14 = $12 >>> 0 < $11 >>> 0 ? $14 + 1 | 0 : $14;
   $16 = $14;
   $9 = $12;
   $11 = $24;
   $13 = ($13 | 0) == ($14 | 0) & $9 >>> 0 < $11 >>> 0 | $14 >>> 0 < $13 >>> 0;
   $9 = $42;
   $12 = $9;
   $11 = $43;
   $10 = $13 + $11 | 0;
   if ($10 >>> 0 < $13 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $25 = $10;
   $24 = $12;
   $31 = $20;
   $12 = $16;
   $30 = $12;
   $22 = $33;
   $12 = $2;
   $15 = $12;
   $12 = $21;
   $11 = $23;
   $11 = __wasm_i64_mul($26, $12, $27, $11);
   $7 = $11;
   $12 = i64toi32_i32$HIGH_BITS;
   $8 = $12;
   $12 = $17;
   $11 = $29;
   $11 = __wasm_i64_mul($19, $12, $28, $11);
   $13 = $11;
   $12 = i64toi32_i32$HIGH_BITS;
   $11 = $12;
   $12 = $8;
   $10 = $12 + $11 | 0;
   $9 = $7;
   $14 = $13 + $9 | 0;
   if ($14 >>> 0 < $13 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $9 = 0;
   $4 = $9;
   $17 = $10;
   $9 = $10;
   $10 = $14;
   $13 = $7;
   $13 = ($9 | 0) == ($8 | 0) & $10 >>> 0 < $13 >>> 0 | $9 >>> 0 < $12 >>> 0;
   $9 = $4;
   $13 = $13 | $9;
   $4 = $13;
   $9 = $22;
   $12 = 0;
   $10 = $17;
   $12 = $12 | $10;
   $11 = $9 + $12 | 0;
   $13 = $15;
   $10 = $4;
   $14 = $13 + $10 | 0;
   $7 = $11;
   $9 = $2;
   $14 = $11 >>> 0 < $12 >>> 0 ? $14 + 1 | 0 : $14;
   $8 = $14;
   $13 = $11;
   $12 = $33;
   $2 = ($9 | 0) == ($14 | 0) & $11 >>> 0 < $12 >>> 0 | $14 >>> 0 < $9 >>> 0;
   $12 = $3;
   $14 = $8;
   $11 = $12 + $14 | 0;
   $9 = 0;
   $10 = $9 + $13 | 0;
   if ($10 >>> 0 < $9 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $13 = $8;
   $9 = $7;
   $13 = ($11 | 0) == ($13 | 0) & $10 >>> 0 < $9 >>> 0 | $11 >>> 0 < $13 >>> 0;
   $10 = 0;
   $9 = $2;
   $12 = $13 + $9 | 0;
   if ($12 >>> 0 < $13 >>> 0) {
    $10 = 1;
   }
   $13 = $12;
   $9 = $10;
   $10 = $30;
   $12 = $9 + $10 | 0;
   $14 = $31;
   $11 = $13 + $14 | 0;
   if ($11 >>> 0 < $13 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $7 = $11;
   $8 = $12;
   $14 = $16;
   $10 = $11;
   $13 = $20;
   $14 = ($12 | 0) == ($14 | 0) & $10 >>> 0 < $13 >>> 0 | $12 >>> 0 < $14 >>> 0;
   $10 = $24;
   $11 = $10;
   $13 = $25;
   $9 = $13 + $14 | 0;
   if ($9 >>> 0 < $14 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $3 = $9;
   $4 = $11;
   label$13 : {
    if (($11 | 0) == 131071 & $9 >>> 0 <= 4294967295 | $11 >>> 0 < 131071) {
     $14 = $1;
     $11 = $14 << 17;
     $9 = $11;
     $10 = $7;
     $1 = $10;
     $10 = 0;
     $17 = $10;
     $14 = 0;
     $2 = $14;
     $10 = $14;
     $11 = $5;
     $19 = $11;
     $11 = $17;
     $11 = __wasm_i64_mul($7, $10, $19, $11);
     $20 = $11;
     $10 = i64toi32_i32$HIGH_BITS;
     $16 = $10;
     $13 = $46;
     $11 = ($11 | 0) != 0 | ($10 | 0) != 0;
     $12 = $13 - $11 | 0;
     $27 = $12;
     $14 = $9;
     $9 = $13 >>> 0 < $11 >>> 0;
     $9 = $14 - $9 | 0;
     $33 = $9;
     $11 = $20;
     $10 = 0 - $11 | 0;
     $28 = $10;
     $13 = $16;
     $12 = $13 + (0 < $11 >>> 0) | 0;
     $12 = 0 - $12 | 0;
     $29 = $12;
     $23 = $10;
     $24 = $12;
     $12 = $8;
     $20 = $12;
     $14 = 0;
     $16 = $14;
     $9 = $17;
     $9 = __wasm_i64_mul($12, $14, $19, $9);
     $22 = $9;
     $14 = i64toi32_i32$HIGH_BITS;
     $15 = $14;
     $9 = 0;
     $21 = $9;
     $14 = $2;
     $9 = $14;
     $14 = $6;
     $26 = $14;
     $12 = $21;
     $12 = __wasm_i64_mul($7, $9, $14, $12);
     $11 = $12;
     $9 = i64toi32_i32$HIGH_BITS;
     $12 = $9;
     $9 = $15;
     $10 = $9 + $12 | 0;
     $14 = $22;
     $13 = $14 + $11 | 0;
     if ($13 >>> 0 < $11 >>> 0) {
      $10 = $10 + 1 | 0;
     }
     $25 = $13;
     $31 = $10;
     $9 = $13;
     $30 = $9;
     $14 = $24;
     $10 = $23;
     $24 = 0;
     $11 = $24;
     $9 = ($9 | 0) == ($14 | 0) & $10 >>> 0 < $11 >>> 0 | $14 >>> 0 < $9 >>> 0;
     $11 = $27;
     $12 = $11 - $9 | 0;
     $27 = $12;
     $10 = $33;
     $13 = $11 >>> 0 < $9 >>> 0;
     $13 = $10 - $13 | 0;
     $23 = $13;
     $11 = 0;
     $10 = $17;
     $10 = __wasm_i64_mul($3, $11, $19, $10);
     $14 = $10;
     $11 = i64toi32_i32$HIGH_BITS;
     $10 = 0;
     $13 = $10;
     $10 = $2;
     $13 = __wasm_i64_mul($1, $10, $36, $13);
     $9 = $13;
     $10 = i64toi32_i32$HIGH_BITS;
     $13 = $10;
     $10 = $11;
     $12 = $13 + $10 | 0;
     $11 = $14;
     $14 = $9 + $11 | 0;
     if ($14 >>> 0 < $9 >>> 0) {
      $12 = $12 + 1 | 0;
     }
     $10 = $14;
     $1 = $12;
     $12 = $16;
     $11 = $21;
     $11 = __wasm_i64_mul($20, $12, $26, $11);
     $9 = $11;
     $12 = i64toi32_i32$HIGH_BITS;
     $11 = $12;
     $12 = $1;
     $14 = $12 + $11 | 0;
     $13 = $9 + $10 | 0;
     if ($13 >>> 0 < $9 >>> 0) {
      $14 = $14 + 1 | 0;
     }
     $2 = $14;
     $10 = $15;
     $14 = $31;
     $12 = $25;
     $9 = $22;
     $9 = ($10 | 0) == ($14 | 0) & $12 >>> 0 < $9 >>> 0 | $14 >>> 0 < $10 >>> 0;
     $14 = $9;
     $9 = 0;
     $12 = $9;
     $9 = $14;
     $12 = $9 | $12;
     $1 = $12;
     $9 = $13;
     $14 = $31;
     $10 = $14;
     $14 = 0;
     $10 = $10 | $14;
     $11 = $9 + $10 | 0;
     $12 = $2;
     $14 = $1;
     $13 = $12 + $14 | 0;
     $15 = $11;
     $13 = $11 >>> 0 < $10 >>> 0 ? $13 + 1 | 0 : $13;
     $17 = $13;
     $9 = 0;
     $12 = $9;
     $13 = $8;
     $9 = $13;
     $13 = $40;
     $12 = __wasm_i64_mul($7, $9, $13, $12);
     $2 = $12;
     $9 = i64toi32_i32$HIGH_BITS;
     $1 = $9;
     $12 = 0;
     $13 = $12;
     $9 = $6;
     $12 = $9;
     $9 = $4;
     $13 = __wasm_i64_mul($5, $12, $9, $13);
     $10 = $13;
     $12 = i64toi32_i32$HIGH_BITS;
     $13 = $12;
     $12 = $1;
     $11 = $13 + $12 | 0;
     $9 = $2;
     $14 = $9 + $10 | 0;
     if ($14 >>> 0 < $10 >>> 0) {
      $11 = $11 + 1 | 0;
     }
     $12 = $14;
     $1 = $11;
     $11 = $4;
     $9 = $21;
     $9 = __wasm_i64_mul($3, $11, $26, $9);
     $10 = $9;
     $11 = i64toi32_i32$HIGH_BITS;
     $9 = $11;
     $11 = $1;
     $14 = $9 + $11 | 0;
     $13 = $12 + $10 | 0;
     if ($13 >>> 0 < $10 >>> 0) {
      $14 = $14 + 1 | 0;
     }
     $11 = $13;
     $1 = $14;
     $14 = $16;
     $12 = $37;
     $12 = __wasm_i64_mul($20, $14, $36, $12);
     $10 = $12;
     $14 = i64toi32_i32$HIGH_BITS;
     $12 = $14;
     $14 = $1;
     $13 = $12 + $14 | 0;
     $9 = $10 + $11 | 0;
     $9 >>> 0 < $10 >>> 0;
     $11 = $17;
     $9 = $9 + $11 | 0;
     $13 = $15;
     $10 = $47;
     $12 = $13 + $10 | 0;
     if ($12 >>> 0 < $10 >>> 0) {
      $9 = $9 + 1 | 0;
     }
     $13 = $9;
     $11 = $27;
     $10 = $12;
     $14 = $11 - $10 | 0;
     $19 = $14;
     $9 = $23;
     $12 = $13 + ($11 >>> 0 < $10 >>> 0) | 0;
     $12 = $9 - $12 | 0;
     $17 = $12;
     $38 = $38 + -1 | 0;
     $9 = $28;
     $10 = $24;
     $13 = $9 - $10 | 0;
     $1 = $13;
     $12 = $29;
     $11 = $30;
     $14 = $11 + ($9 >>> 0 < $10 >>> 0) | 0;
     $14 = $12 - $14 | 0;
     $11 = $14;
     break label$13;
    }
    $14 = $8;
    $26 = $14 >>> 1 | 0;
    $9 = 0;
    $21 = $9;
    $14 = $1;
    $12 = $14 << 16;
    $13 = $12;
    $9 = $3;
    $14 = $9 << 31;
    $1 = $14;
    $14 = $8;
    $9 = $14 >>> 1 | 0;
    $12 = $7;
    $10 = ($14 & 1) << 31 | $12 >>> 1;
    $12 = $9;
    $9 = $1;
    $12 = $9 | $12;
    $8 = $12;
    $14 = 0;
    $7 = $10 | $14;
    $9 = $7;
    $1 = $9;
    $9 = 0;
    $17 = $9;
    $2 = 0;
    $9 = $2;
    $12 = $5;
    $19 = $12;
    $12 = $17;
    $12 = __wasm_i64_mul($7, $9, $19, $12);
    $20 = $12;
    $9 = i64toi32_i32$HIGH_BITS;
    $16 = $9;
    $10 = $48;
    $12 = ($12 | 0) != 0 | ($9 | 0) != 0;
    $11 = $10 - $12 | 0;
    $39 = $11;
    $14 = $13;
    $13 = $10 >>> 0 < $12 >>> 0;
    $13 = $14 - $13 | 0;
    $35 = $13;
    $12 = $20;
    $9 = 0 - $12 | 0;
    $28 = $9;
    $10 = $16;
    $11 = $10 + (0 < $12 >>> 0) | 0;
    $11 = 0 - $11 | 0;
    $29 = $11;
    $33 = $9;
    $27 = $11;
    $14 = 0;
    $16 = $14;
    $11 = $2;
    $14 = $11;
    $11 = $6;
    $20 = $11;
    $13 = $16;
    $13 = __wasm_i64_mul($7, $14, $11, $13);
    $22 = $13;
    $14 = i64toi32_i32$HIGH_BITS;
    $15 = $14;
    $11 = $3;
    $14 = $4;
    $13 = $14 << 31 | $11 >>> 1;
    $9 = $13;
    $12 = $11 << 31;
    $14 = $26;
    $24 = $12 | $14;
    $13 = $21;
    $11 = $9;
    $11 = $13 | $11;
    $30 = $11;
    $13 = $24;
    $25 = $13;
    $14 = 0;
    $31 = $14;
    $13 = $17;
    $13 = __wasm_i64_mul($24, $14, $19, $13);
    $12 = $13;
    $14 = i64toi32_i32$HIGH_BITS;
    $13 = $14;
    $14 = $15;
    $9 = $13 + $14 | 0;
    $11 = $22;
    $10 = $12 + $11 | 0;
    if ($10 >>> 0 < $12 >>> 0) {
     $9 = $9 + 1 | 0;
    }
    $26 = $10;
    $21 = $9;
    $23 = $10;
    $11 = $27;
    $9 = $33;
    $27 = 0;
    $12 = $27;
    $14 = ($10 | 0) == ($11 | 0) & $9 >>> 0 < $12 >>> 0 | $11 >>> 0 < $10 >>> 0;
    $12 = $39;
    $13 = $12 - $14 | 0;
    $39 = $13;
    $9 = $35;
    $10 = $12 >>> 0 < $14 >>> 0;
    $10 = $9 - $10 | 0;
    $35 = $10;
    $10 = $16;
    $12 = $31;
    $12 = __wasm_i64_mul($20, $10, $25, $12);
    $33 = $12;
    $10 = i64toi32_i32$HIGH_BITS;
    $11 = $10;
    $10 = $4;
    $12 = $10 >>> 1 | 0;
    $9 = $3;
    $25 = ($10 & 1) << 31 | $9 >>> 1;
    $31 = $12;
    $9 = 0;
    $10 = $17;
    $10 = __wasm_i64_mul($25, $9, $19, $10);
    $14 = $10;
    $9 = i64toi32_i32$HIGH_BITS;
    $10 = $9;
    $9 = $11;
    $13 = $9 + $10 | 0;
    $12 = $33;
    $11 = $12 + $14 | 0;
    if ($11 >>> 0 < $14 >>> 0) {
     $13 = $13 + 1 | 0;
    }
    $3 = $11;
    $12 = 0;
    $9 = $12;
    $12 = $2;
    $9 = __wasm_i64_mul($1, $12, $36, $9);
    $14 = $9;
    $12 = i64toi32_i32$HIGH_BITS;
    $9 = $12;
    $12 = $13;
    $11 = $9 + $12 | 0;
    $13 = $3;
    $10 = $13 + $14 | 0;
    if ($10 >>> 0 < $14 >>> 0) {
     $11 = $11 + 1 | 0;
    }
    $2 = $11;
    $13 = $15;
    $11 = $21;
    $12 = $26;
    $14 = $22;
    $14 = ($13 | 0) == ($11 | 0) & $12 >>> 0 < $14 >>> 0 | $11 >>> 0 < $13 >>> 0;
    $11 = $14;
    $14 = 0;
    $12 = $14;
    $12 = $12 | $11;
    $1 = $12;
    $11 = $21;
    $13 = $11;
    $11 = 0;
    $13 = $13 | $11;
    $9 = $13 + $10 | 0;
    $12 = $2;
    $11 = $1;
    $10 = $12 + $11 | 0;
    $17 = $9;
    $10 = $9 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
    $3 = $10;
    $14 = 0;
    $12 = $14;
    $10 = $8;
    $14 = $10;
    $10 = $40;
    $12 = __wasm_i64_mul($7, $14, $10, $12);
    $2 = $12;
    $14 = i64toi32_i32$HIGH_BITS;
    $1 = $14;
    $12 = 0;
    $10 = $12;
    $14 = $6;
    $12 = $14;
    $14 = $4;
    $10 = __wasm_i64_mul($5, $12, $14 >>> 1 | 0, $10);
    $13 = $10;
    $12 = i64toi32_i32$HIGH_BITS;
    $10 = $12;
    $12 = $1;
    $9 = $12 + $10 | 0;
    $14 = $2;
    $11 = $13 + $14 | 0;
    if ($11 >>> 0 < $13 >>> 0) {
     $9 = $9 + 1 | 0;
    }
    $12 = $11;
    $1 = $9;
    $9 = $16;
    $14 = $31;
    $14 = __wasm_i64_mul($20, $9, $25, $14);
    $13 = $14;
    $9 = i64toi32_i32$HIGH_BITS;
    $14 = $9;
    $9 = $1;
    $11 = $9 + $14 | 0;
    $10 = $13 + $12 | 0;
    if ($10 >>> 0 < $13 >>> 0) {
     $11 = $11 + 1 | 0;
    }
    $9 = $10;
    $1 = $11;
    $11 = $30;
    $12 = $37;
    $12 = __wasm_i64_mul($24, $11, $36, $12);
    $13 = $12;
    $11 = i64toi32_i32$HIGH_BITS;
    $12 = $11;
    $11 = $1;
    $10 = $12 + $11 | 0;
    $14 = $13 + $9 | 0;
    $14 >>> 0 < $13 >>> 0;
    $11 = $14;
    $9 = $3;
    $14 = $9 + $11 | 0;
    $13 = $49;
    $10 = $17;
    $12 = $13 + $10 | 0;
    if ($12 >>> 0 < $13 >>> 0) {
     $14 = $14 + 1 | 0;
    }
    $10 = $14;
    $9 = $39;
    $11 = $9 - $12 | 0;
    $19 = $11;
    $14 = $35;
    $12 = $10 + ($9 >>> 0 < $12 >>> 0) | 0;
    $12 = $14 - $12 | 0;
    $17 = $12;
    $3 = $25;
    $12 = $31;
    $4 = $12;
    $14 = $28;
    $13 = $27;
    $10 = $14 - $13 | 0;
    $1 = $10;
    $12 = $29;
    $9 = $23;
    $11 = $9 + ($14 >>> 0 < $13 >>> 0) | 0;
    $11 = $12 - $11 | 0;
   }
   $2 = $11;
   if (($38 | 0) >= 16384) {
    $12 = $34;
    $34 = $12;
    $11 = $32;
    $14 = $11 | 2147418112;
    $32 = $14;
    $1 = 0;
    $2 = 0;
    break label$3;
   }
   $15 = $38 + 16383 | 0;
   if (($38 | 0) <= -16383) {
    label$17 : {
     if ($15) {
      break label$17;
     }
     $11 = $1;
     $1 = $11 << 1;
     $14 = $2;
     $12 = $14 << 1 | $11 >>> 31;
     $11 = $6;
     $14 = $1;
     $13 = $5;
     $6 = ($12 | 0) == ($11 | 0) & $14 >>> 0 > $13 >>> 0 | $12 >>> 0 > $11 >>> 0;
     $13 = $19;
     $5 = $13 << 1;
     $14 = $17;
     $12 = $14 << 1 | $13 >>> 31;
     $1 = $12;
     $12 = $2;
     $11 = $12 >>> 31 | 0;
     $13 = 0;
     $14 = $13;
     $13 = $1;
     $14 = $13 | $14;
     $12 = $5;
     $1 = $12 | $11;
     $13 = $1;
     $12 = $40;
     $11 = $41;
     $2 = ($12 | 0) == ($14 | 0) & $13 >>> 0 > $11 >>> 0 | $14 >>> 0 > $12 >>> 0;
     $13 = $14;
     $11 = $1;
     $14 = $12;
     $12 = $41;
     $14 = ($11 | 0) == ($12 | 0) & ($13 | 0) == ($14 | 0) ? $6 : $2;
     $11 = $8;
     $10 = $11;
     $12 = $7;
     $9 = $12 + $14 | 0;
     if ($9 >>> 0 < $14 >>> 0) {
      $10 = $10 + 1 | 0;
     }
     $1 = $9;
     $12 = $8;
     $2 = $10;
     $14 = $7;
     $5 = ($12 | 0) == ($10 | 0) & $9 >>> 0 < $14 >>> 0 | $10 >>> 0 < $12 >>> 0;
     $11 = $4;
     $10 = $11 & 65535;
     $14 = $3;
     $12 = $14;
     $11 = $5;
     $13 = $12 + $11 | 0;
     $14 = $10;
     $9 = $14;
     $5 = $13;
     $9 = $13 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
     $6 = $9;
     $11 = $9 & 65536;
     if (!$11) {
      break label$17;
     }
     $9 = $5;
     $34 = $9 | $34;
     $10 = $32;
     $11 = $6;
     $10 = $10 | $11;
     $32 = $10;
     break label$3;
    }
    $1 = 0;
    $2 = 0;
    break label$3;
   }
   $11 = $1;
   $1 = $11 << 1;
   $10 = $2;
   $9 = $10 << 1 | $11 >>> 31;
   $11 = $6;
   $10 = $1;
   $12 = $5;
   $6 = ($9 | 0) == ($11 | 0) & $10 >>> 0 >= $12 >>> 0 | $9 >>> 0 > $11 >>> 0;
   $12 = $19;
   $5 = $12 << 1;
   $10 = $17;
   $9 = $10 << 1 | $12 >>> 31;
   $1 = $9;
   $9 = $2;
   $11 = $9 >>> 31 | 0;
   $12 = 0;
   $10 = $12;
   $12 = $1;
   $10 = $12 | $10;
   $9 = $5;
   $1 = $9 | $11;
   $12 = $1;
   $9 = $40;
   $11 = $41;
   $2 = ($9 | 0) == ($10 | 0) & $12 >>> 0 >= $11 >>> 0 | $10 >>> 0 > $9 >>> 0;
   $12 = $10;
   $11 = $1;
   $10 = $9;
   $9 = $41;
   $10 = ($11 | 0) == ($9 | 0) & ($10 | 0) == ($12 | 0) ? $6 : $2;
   $11 = $8;
   $13 = $11;
   $9 = $7;
   $14 = $9 + $10 | 0;
   if ($14 >>> 0 < $10 >>> 0) {
    $13 = $13 + 1 | 0;
   }
   $1 = $14;
   $2 = $13;
   $9 = $8;
   $11 = $14;
   $10 = $7;
   $5 = ($13 | 0) == ($9 | 0) & $11 >>> 0 < $10 >>> 0 | $13 >>> 0 < $9 >>> 0;
   $11 = $4;
   $13 = $11 & 65535;
   $11 = $15;
   $10 = $11 << 16;
   $11 = $10;
   $10 = $13;
   $11 = $10 | $11;
   $13 = $3;
   $9 = 0;
   $9 = $13 | $9;
   $10 = $5;
   $12 = $9 + $10 | 0;
   $13 = $11;
   $14 = $13;
   $14 = $12 >>> 0 < $9 >>> 0 ? $14 + 1 | 0 : $14;
   $9 = $34;
   $11 = $12;
   $34 = $9 | $11;
   $10 = $32;
   $10 = $14 | $10;
   $32 = $10;
  }
  $11 = $0;
  HEAP32[$11 >> 2] = $1;
  $10 = $2;
  HEAP32[$11 + 4 >> 2] = $10;
  HEAP32[$11 + 8 >> 2] = $34;
  $10 = $32;
  HEAP32[$11 + 12 >> 2] = $10;
  $0 = $18 + 192 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 $11 = $0;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$11 + 4 >> 2] = 0;
 $10 = $4;
 $11 = $6;
 $11 = $10 | $11;
 $9 = $5;
 $14 = $3;
 $10 = $9 | $14;
 $13 = ($10 | 0) != 0 | ($11 | 0) != 0;
 $14 = $13 ? $34 : 0;
 $1 = $14;
 $14 = $0;
 HEAP32[$14 + 8 >> 2] = $1;
 $10 = $32;
 $9 = $13 ? $10 : 2147450880;
 HEAP32[$14 + 12 >> 2] = $9;
 $0 = $18 + 192 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function dlmalloc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $10 = global$0 - 16 | 0;
 $1 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            if ($0 >>> 0 <= 244) {
             $6 = HEAP32[6824];
             $4 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
             $1 = $4 >>> 3 | 0;
             $0 = $6 >>> $1 | 0;
             if ($0 & 3) {
              $4 = (($0 ^ -1) & 1) + $1 | 0;
              $2 = $4 << 3;
              $1 = HEAP32[$2 + 27344 >> 2];
              $0 = $1 + 8 | 0;
              $2 = $2 + 27336 | 0;
              $3 = HEAP32[$1 + 8 >> 2];
              label$15 : {
               if (($2 | 0) == ($3 | 0)) {
                wasm2js_i32$0 = 27296, wasm2js_i32$1 = __wasm_rotl_i32(-2, $4) & $6, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                break label$15;
               }
               HEAP32[$3 + 12 >> 2] = $2;
               HEAP32[$2 + 8 >> 2] = $3;
              }
              $3 = $4 << 3;
              HEAP32[$1 + 4 >> 2] = $3 | 3;
              $1 = $1 + $3 | 0;
              HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
              break label$2;
             }
             $8 = HEAP32[6826];
             if ($4 >>> 0 <= $8 >>> 0) {
              break label$12;
             }
             if ($0) {
              $2 = $0 << $1;
              $0 = 2 << $1;
              $0 = $2 & ($0 | 0 - $0);
              $0 = ($0 & 0 - $0) + -1 | 0;
              $1 = $0;
              $0 = $0 >>> 12 & 16;
              $1 = $1 >>> $0 | 0;
              $3 = $1 >>> 5 & 8;
              $2 = $0 | $3;
              $0 = $1 >>> $3 | 0;
              $1 = $0 >>> 2 & 4;
              $2 = $2 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 1 & 2;
              $2 = $2 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 1 & 1;
              $3 = ($2 | $1) + ($0 >>> $1 | 0) | 0;
              $2 = $3 << 3;
              $1 = HEAP32[$2 + 27344 >> 2];
              $0 = HEAP32[$1 + 8 >> 2];
              $2 = $2 + 27336 | 0;
              label$18 : {
               if (($0 | 0) == ($2 | 0)) {
                $6 = __wasm_rotl_i32(-2, $3) & $6;
                HEAP32[6824] = $6;
                break label$18;
               }
               HEAP32[$0 + 12 >> 2] = $2;
               HEAP32[$2 + 8 >> 2] = $0;
              }
              $0 = $1 + 8 | 0;
              HEAP32[$1 + 4 >> 2] = $4 | 3;
              $2 = $1 + $4 | 0;
              $5 = $3 << 3;
              $3 = $5 - $4 | 0;
              HEAP32[$2 + 4 >> 2] = $3 | 1;
              HEAP32[$1 + $5 >> 2] = $3;
              if ($8) {
               $5 = $8 >>> 3 | 0;
               $4 = ($5 << 3) + 27336 | 0;
               $1 = HEAP32[6829];
               $5 = 1 << $5;
               label$21 : {
                if (!($6 & $5)) {
                 HEAP32[6824] = $5 | $6;
                 $5 = $4;
                 break label$21;
                }
                $5 = HEAP32[$4 + 8 >> 2];
               }
               HEAP32[$4 + 8 >> 2] = $1;
               HEAP32[$5 + 12 >> 2] = $1;
               HEAP32[$1 + 12 >> 2] = $4;
               HEAP32[$1 + 8 >> 2] = $5;
              }
              HEAP32[6829] = $2;
              HEAP32[6826] = $3;
              break label$2;
             }
             $9 = HEAP32[6825];
             if (!$9) {
              break label$12;
             }
             $0 = (0 - $9 & $9) + -1 | 0;
             $1 = $0;
             $0 = $0 >>> 12 & 16;
             $1 = $1 >>> $0 | 0;
             $3 = $1 >>> 5 & 8;
             $2 = $0 | $3;
             $0 = $1 >>> $3 | 0;
             $1 = $0 >>> 2 & 4;
             $2 = $2 | $1;
             $0 = $0 >>> $1 | 0;
             $1 = $0 >>> 1 & 2;
             $2 = $2 | $1;
             $0 = $0 >>> $1 | 0;
             $1 = $0 >>> 1 & 1;
             $2 = HEAP32[(($2 | $1) + ($0 >>> $1 | 0) << 2) + 27600 >> 2];
             $1 = (HEAP32[$2 + 4 >> 2] & -8) - $4 | 0;
             $3 = $2;
             while (1) {
              label$24 : {
               $0 = HEAP32[$3 + 16 >> 2];
               if (!$0) {
                $0 = HEAP32[$3 + 20 >> 2];
                if (!$0) {
                 break label$24;
                }
               }
               $3 = (HEAP32[$0 + 4 >> 2] & -8) - $4 | 0;
               $5 = $3;
               $3 = $3 >>> 0 < $1 >>> 0;
               $1 = $3 ? $5 : $1;
               $2 = $3 ? $0 : $2;
               $3 = $0;
               continue;
              }
              break;
             }
             $11 = HEAP32[$2 + 24 >> 2];
             $5 = HEAP32[$2 + 12 >> 2];
             if (($5 | 0) != ($2 | 0)) {
              $0 = HEAP32[$2 + 8 >> 2];
              HEAP32[$0 + 12 >> 2] = $5;
              HEAP32[$5 + 8 >> 2] = $0;
              break label$3;
             }
             $3 = $2 + 20 | 0;
             $0 = HEAP32[$3 >> 2];
             if (!$0) {
              $0 = HEAP32[$2 + 16 >> 2];
              if (!$0) {
               break label$11;
              }
              $3 = $2 + 16 | 0;
             }
             while (1) {
              $7 = $3;
              $5 = $0;
              $3 = $0 + 20 | 0;
              $0 = HEAP32[$3 >> 2];
              if ($0) {
               continue;
              }
              $3 = $5 + 16 | 0;
              $0 = HEAP32[$5 + 16 >> 2];
              if ($0) {
               continue;
              }
              break;
             }
             HEAP32[$7 >> 2] = 0;
             break label$3;
            }
            $4 = -1;
            if ($0 >>> 0 > 4294967231) {
             break label$12;
            }
            $0 = $0 + 11 | 0;
            $4 = $0 & -8;
            $8 = HEAP32[6825];
            if (!$8) {
             break label$12;
            }
            $0 = $0 >>> 8 | 0;
            $7 = 0;
            label$30 : {
             if (!$0) {
              break label$30;
             }
             $7 = 31;
             if ($4 >>> 0 > 16777215) {
              break label$30;
             }
             $1 = $0 + 1048320 >>> 16 & 8;
             $0 = $0 << $1;
             $2 = $0;
             $0 = $0 + 520192 >>> 16 & 4;
             $3 = $2 << $0;
             $2 = $3;
             $3 = $3 + 245760 >>> 16 & 2;
             $0 = ($2 << $3 >>> 15 | 0) - ($0 | $1 | $3) | 0;
             $7 = ($0 << 1 | $4 >>> $0 + 21 & 1) + 28 | 0;
            }
            $3 = 0 - $4 | 0;
            $1 = HEAP32[($7 << 2) + 27600 >> 2];
            label$31 : {
             label$32 : {
              label$33 : {
               if (!$1) {
                $0 = 0;
                break label$33;
               }
               $2 = $4 << (($7 | 0) == 31 ? 0 : 25 - ($7 >>> 1 | 0) | 0);
               $0 = 0;
               while (1) {
                label$36 : {
                 $6 = (HEAP32[$1 + 4 >> 2] & -8) - $4 | 0;
                 if ($6 >>> 0 >= $3 >>> 0) {
                  break label$36;
                 }
                 $5 = $1;
                 $3 = $6;
                 if ($3) {
                  break label$36;
                 }
                 $3 = 0;
                 $0 = $1;
                 break label$32;
                }
                $6 = HEAP32[$1 + 20 >> 2];
                $1 = HEAP32[(($2 >>> 29 & 4) + $1 | 0) + 16 >> 2];
                $0 = $6 ? ($6 | 0) == ($1 | 0) ? $0 : $6 : $0;
                $2 = $2 << (($1 | 0) != 0);
                if ($1) {
                 continue;
                }
                break;
               }
              }
              if (!($0 | $5)) {
               $0 = 2 << $7;
               $0 = ($0 | 0 - $0) & $8;
               if (!$0) {
                break label$12;
               }
               $0 = (0 - $0 & $0) + -1 | 0;
               $1 = $0;
               $0 = $0 >>> 12 & 16;
               $1 = $1 >>> $0 | 0;
               $2 = $1 >>> 5 & 8;
               $6 = $0 | $2;
               $0 = $1 >>> $2 | 0;
               $1 = $0 >>> 2 & 4;
               $2 = $6 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 1 & 2;
               $2 = $2 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 1 & 1;
               $0 = HEAP32[(($2 | $1) + ($0 >>> $1 | 0) << 2) + 27600 >> 2];
              }
              if (!$0) {
               break label$31;
              }
             }
             while (1) {
              $6 = (HEAP32[$0 + 4 >> 2] & -8) - $4 | 0;
              $2 = $6 >>> 0 < $3 >>> 0;
              $3 = $2 ? $6 : $3;
              $5 = $2 ? $0 : $5;
              $1 = HEAP32[$0 + 16 >> 2];
              if (!$1) {
               $1 = HEAP32[$0 + 20 >> 2];
              }
              $0 = $1;
              if ($0) {
               continue;
              }
              break;
             }
            }
            if (!$5 | $3 >>> 0 >= HEAP32[6826] - $4 >>> 0) {
             break label$12;
            }
            $7 = HEAP32[$5 + 24 >> 2];
            $2 = HEAP32[$5 + 12 >> 2];
            if (($5 | 0) != ($2 | 0)) {
             $0 = HEAP32[$5 + 8 >> 2];
             HEAP32[$0 + 12 >> 2] = $2;
             HEAP32[$2 + 8 >> 2] = $0;
             break label$4;
            }
            $1 = $5 + 20 | 0;
            $0 = HEAP32[$1 >> 2];
            if (!$0) {
             $0 = HEAP32[$5 + 16 >> 2];
             if (!$0) {
              break label$10;
             }
             $1 = $5 + 16 | 0;
            }
            while (1) {
             $6 = $1;
             $2 = $0;
             $1 = $0 + 20 | 0;
             $0 = HEAP32[$1 >> 2];
             if ($0) {
              continue;
             }
             $1 = $2 + 16 | 0;
             $0 = HEAP32[$2 + 16 >> 2];
             if ($0) {
              continue;
             }
             break;
            }
            HEAP32[$6 >> 2] = 0;
            break label$4;
           }
           $0 = HEAP32[6826];
           if ($0 >>> 0 >= $4 >>> 0) {
            $1 = HEAP32[6829];
            $3 = $0 - $4 | 0;
            label$45 : {
             if ($3 >>> 0 >= 16) {
              HEAP32[6826] = $3;
              $2 = $1 + $4 | 0;
              HEAP32[6829] = $2;
              HEAP32[$2 + 4 >> 2] = $3 | 1;
              HEAP32[$0 + $1 >> 2] = $3;
              HEAP32[$1 + 4 >> 2] = $4 | 3;
              break label$45;
             }
             HEAP32[6829] = 0;
             HEAP32[6826] = 0;
             HEAP32[$1 + 4 >> 2] = $0 | 3;
             $0 = $0 + $1 | 0;
             HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
            }
            $0 = $1 + 8 | 0;
            break label$2;
           }
           $2 = HEAP32[6827];
           if ($2 >>> 0 > $4 >>> 0) {
            $1 = $2 - $4 | 0;
            HEAP32[6827] = $1;
            $0 = HEAP32[6830];
            $3 = $4 + $0 | 0;
            HEAP32[6830] = $3;
            HEAP32[$3 + 4 >> 2] = $1 | 1;
            HEAP32[$0 + 4 >> 2] = $4 | 3;
            $0 = $0 + 8 | 0;
            break label$2;
           }
           $0 = 0;
           $8 = $4 + 47 | 0;
           $3 = $8;
           if (HEAP32[6942]) {
            $1 = HEAP32[6944];
           } else {
            HEAP32[6945] = -1;
            HEAP32[6946] = -1;
            HEAP32[6943] = 4096;
            HEAP32[6944] = 4096;
            HEAP32[6942] = $10 + 12 & -16 ^ 1431655768;
            HEAP32[6947] = 0;
            HEAP32[6935] = 0;
            $1 = 4096;
           }
           $6 = $3 + $1 | 0;
           $7 = 0 - $1 | 0;
           $5 = $6 & $7;
           if ($5 >>> 0 <= $4 >>> 0) {
            break label$2;
           }
           $1 = HEAP32[6934];
           if ($1) {
            $3 = HEAP32[6932];
            $9 = $5 + $3 | 0;
            if ($9 >>> 0 <= $3 >>> 0 | $9 >>> 0 > $1 >>> 0) {
             break label$2;
            }
           }
           if (HEAPU8[27740] & 4) {
            break label$7;
           }
           label$51 : {
            label$52 : {
             $1 = HEAP32[6830];
             if ($1) {
              $0 = 27744;
              while (1) {
               $3 = HEAP32[$0 >> 2];
               if (HEAP32[$0 + 4 >> 2] + $3 >>> 0 > $1 >>> 0 ? $3 >>> 0 <= $1 >>> 0 : 0) {
                break label$52;
               }
               $0 = HEAP32[$0 + 8 >> 2];
               if ($0) {
                continue;
               }
               break;
              }
             }
             $2 = sbrk(0);
             if (($2 | 0) == -1) {
              break label$8;
             }
             $6 = $5;
             $0 = HEAP32[6943];
             $1 = $0 + -1 | 0;
             if ($2 & $1) {
              $6 = ($5 - $2 | 0) + ($1 + $2 & 0 - $0) | 0;
             }
             if ($6 >>> 0 <= $4 >>> 0 | $6 >>> 0 > 2147483646) {
              break label$8;
             }
             $0 = HEAP32[6934];
             if ($0) {
              $1 = HEAP32[6932];
              $3 = $6 + $1 | 0;
              if ($3 >>> 0 <= $1 >>> 0 | $3 >>> 0 > $0 >>> 0) {
               break label$8;
              }
             }
             $0 = sbrk($6);
             if (($2 | 0) != ($0 | 0)) {
              break label$51;
             }
             break label$6;
            }
            $6 = $6 - $2 & $7;
            if ($6 >>> 0 > 2147483646) {
             break label$8;
            }
            $2 = sbrk($6);
            if (($2 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
             break label$9;
            }
            $0 = $2;
           }
           if (!(($0 | 0) == -1 | $4 + 48 >>> 0 <= $6 >>> 0)) {
            $1 = HEAP32[6944];
            $1 = $1 + ($8 - $6 | 0) & 0 - $1;
            if ($1 >>> 0 > 2147483646) {
             $2 = $0;
             break label$6;
            }
            if ((sbrk($1) | 0) != -1) {
             $6 = $1 + $6 | 0;
             $2 = $0;
             break label$6;
            }
            sbrk(0 - $6 | 0);
            break label$8;
           }
           $2 = $0;
           if (($0 | 0) != -1) {
            break label$6;
           }
           break label$8;
          }
          $5 = 0;
          break label$3;
         }
         $2 = 0;
         break label$4;
        }
        if (($2 | 0) != -1) {
         break label$6;
        }
       }
       HEAP32[6935] = HEAP32[6935] | 4;
      }
      if ($5 >>> 0 > 2147483646) {
       break label$5;
      }
      $2 = sbrk($5);
      $0 = sbrk(0);
      if ($2 >>> 0 >= $0 >>> 0 | ($2 | 0) == -1 | ($0 | 0) == -1) {
       break label$5;
      }
      $6 = $0 - $2 | 0;
      if ($6 >>> 0 <= $4 + 40 >>> 0) {
       break label$5;
      }
     }
     $0 = HEAP32[6932] + $6 | 0;
     HEAP32[6932] = $0;
     if ($0 >>> 0 > HEAPU32[6933]) {
      HEAP32[6933] = $0;
     }
     label$62 : {
      label$63 : {
       label$64 : {
        $1 = HEAP32[6830];
        if ($1) {
         $0 = 27744;
         while (1) {
          $3 = HEAP32[$0 >> 2];
          $5 = HEAP32[$0 + 4 >> 2];
          if (($3 + $5 | 0) == ($2 | 0)) {
           break label$64;
          }
          $0 = HEAP32[$0 + 8 >> 2];
          if ($0) {
           continue;
          }
          break;
         }
         break label$63;
        }
        $0 = HEAP32[6828];
        if (!($2 >>> 0 >= $0 >>> 0 ? $0 : 0)) {
         HEAP32[6828] = $2;
        }
        $0 = 0;
        HEAP32[6937] = $6;
        HEAP32[6936] = $2;
        HEAP32[6832] = -1;
        HEAP32[6833] = HEAP32[6942];
        HEAP32[6939] = 0;
        while (1) {
         $1 = $0 << 3;
         $3 = $1 + 27336 | 0;
         HEAP32[$1 + 27344 >> 2] = $3;
         HEAP32[$1 + 27348 >> 2] = $3;
         $0 = $0 + 1 | 0;
         if (($0 | 0) != 32) {
          continue;
         }
         break;
        }
        $0 = $6 + -40 | 0;
        $1 = $2 + 8 & 7 ? -8 - $2 & 7 : 0;
        $3 = $0 - $1 | 0;
        HEAP32[6827] = $3;
        $1 = $1 + $2 | 0;
        HEAP32[6830] = $1;
        HEAP32[$1 + 4 >> 2] = $3 | 1;
        HEAP32[($0 + $2 | 0) + 4 >> 2] = 40;
        HEAP32[6831] = HEAP32[6946];
        break label$62;
       }
       if (HEAPU8[$0 + 12 | 0] & 8 | $2 >>> 0 <= $1 >>> 0 | $3 >>> 0 > $1 >>> 0) {
        break label$63;
       }
       HEAP32[$0 + 4 >> 2] = $5 + $6;
       $0 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
       $3 = $1 + $0 | 0;
       HEAP32[6830] = $3;
       $2 = HEAP32[6827] + $6 | 0;
       $0 = $2 - $0 | 0;
       HEAP32[6827] = $0;
       HEAP32[$3 + 4 >> 2] = $0 | 1;
       HEAP32[($1 + $2 | 0) + 4 >> 2] = 40;
       HEAP32[6831] = HEAP32[6946];
       break label$62;
      }
      $5 = HEAP32[6828];
      if ($2 >>> 0 < $5 >>> 0) {
       HEAP32[6828] = $2;
      }
      $3 = $2 + $6 | 0;
      $0 = 27744;
      label$70 : {
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            while (1) {
             if (HEAP32[$0 >> 2] != ($3 | 0)) {
              $0 = HEAP32[$0 + 8 >> 2];
              if ($0) {
               continue;
              }
              break label$75;
             }
             break;
            }
            if (!(HEAPU8[$0 + 12 | 0] & 8)) {
             break label$74;
            }
           }
           $0 = 27744;
           while (1) {
            $3 = HEAP32[$0 >> 2];
            if ($3 >>> 0 <= $1 >>> 0) {
             $3 = HEAP32[$0 + 4 >> 2] + $3 | 0;
             if ($3 >>> 0 > $1 >>> 0) {
              break label$73;
             }
            }
            $0 = HEAP32[$0 + 8 >> 2];
            continue;
           }
          }
          HEAP32[$0 >> 2] = $2;
          HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $6;
          $7 = ($2 + 8 & 7 ? -8 - $2 & 7 : 0) + $2 | 0;
          HEAP32[$7 + 4 >> 2] = $4 | 3;
          $2 = ($3 + 8 & 7 ? -8 - $3 & 7 : 0) + $3 | 0;
          $0 = ($2 - $7 | 0) - $4 | 0;
          $3 = $4 + $7 | 0;
          if (($1 | 0) == ($2 | 0)) {
           HEAP32[6830] = $3;
           $0 = HEAP32[6827] + $0 | 0;
           HEAP32[6827] = $0;
           HEAP32[$3 + 4 >> 2] = $0 | 1;
           break label$71;
          }
          if (HEAP32[6829] == ($2 | 0)) {
           HEAP32[6829] = $3;
           $0 = HEAP32[6826] + $0 | 0;
           HEAP32[6826] = $0;
           HEAP32[$3 + 4 >> 2] = $0 | 1;
           HEAP32[$0 + $3 >> 2] = $0;
           break label$71;
          }
          $1 = HEAP32[$2 + 4 >> 2];
          if (($1 & 3) == 1) {
           $8 = $1 & -8;
           label$83 : {
            if ($1 >>> 0 <= 255) {
             $9 = $1 >>> 3 | 0;
             $1 = ($9 << 3) + 27336 | 0;
             $6 = HEAP32[$2 + 8 >> 2];
             $4 = HEAP32[$2 + 12 >> 2];
             if (($6 | 0) == ($4 | 0)) {
              wasm2js_i32$0 = 27296, wasm2js_i32$1 = HEAP32[6824] & __wasm_rotl_i32(-2, $9), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              break label$83;
             }
             HEAP32[$6 + 12 >> 2] = $4;
             HEAP32[$4 + 8 >> 2] = $6;
             break label$83;
            }
            $9 = HEAP32[$2 + 24 >> 2];
            $6 = HEAP32[$2 + 12 >> 2];
            label$86 : {
             if (($6 | 0) != ($2 | 0)) {
              $1 = HEAP32[$2 + 8 >> 2];
              HEAP32[$1 + 12 >> 2] = $6;
              HEAP32[$6 + 8 >> 2] = $1;
              break label$86;
             }
             label$89 : {
              $1 = $2 + 20 | 0;
              $4 = HEAP32[$1 >> 2];
              if ($4) {
               break label$89;
              }
              $1 = $2 + 16 | 0;
              $4 = HEAP32[$1 >> 2];
              if ($4) {
               break label$89;
              }
              $6 = 0;
              break label$86;
             }
             while (1) {
              $5 = $1;
              $6 = $4;
              $1 = $4 + 20 | 0;
              $4 = HEAP32[$1 >> 2];
              if ($4) {
               continue;
              }
              $1 = $6 + 16 | 0;
              $4 = HEAP32[$6 + 16 >> 2];
              if ($4) {
               continue;
              }
              break;
             }
             HEAP32[$5 >> 2] = 0;
            }
            if (!$9) {
             break label$83;
            }
            $4 = HEAP32[$2 + 28 >> 2];
            $1 = ($4 << 2) + 27600 | 0;
            label$91 : {
             if (HEAP32[$1 >> 2] == ($2 | 0)) {
              HEAP32[$1 >> 2] = $6;
              if ($6) {
               break label$91;
              }
              wasm2js_i32$0 = 27300, wasm2js_i32$1 = HEAP32[6825] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              break label$83;
             }
             HEAP32[(HEAP32[$9 + 16 >> 2] == ($2 | 0) ? 16 : 20) + $9 >> 2] = $6;
             if (!$6) {
              break label$83;
             }
            }
            HEAP32[$6 + 24 >> 2] = $9;
            $1 = HEAP32[$2 + 16 >> 2];
            if ($1) {
             HEAP32[$6 + 16 >> 2] = $1;
             HEAP32[$1 + 24 >> 2] = $6;
            }
            $1 = HEAP32[$2 + 20 >> 2];
            if (!$1) {
             break label$83;
            }
            HEAP32[$6 + 20 >> 2] = $1;
            HEAP32[$1 + 24 >> 2] = $6;
           }
           $2 = $2 + $8 | 0;
           $0 = $0 + $8 | 0;
          }
          HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
          HEAP32[$3 + 4 >> 2] = $0 | 1;
          HEAP32[$0 + $3 >> 2] = $0;
          if ($0 >>> 0 <= 255) {
           $1 = $0 >>> 3 | 0;
           $0 = ($1 << 3) + 27336 | 0;
           $1 = 1 << $1;
           $4 = HEAP32[6824];
           label$95 : {
            if (!($1 & $4)) {
             HEAP32[6824] = $1 | $4;
             $1 = $0;
             break label$95;
            }
            $1 = HEAP32[$0 + 8 >> 2];
           }
           HEAP32[$0 + 8 >> 2] = $3;
           HEAP32[$1 + 12 >> 2] = $3;
           HEAP32[$3 + 12 >> 2] = $0;
           HEAP32[$3 + 8 >> 2] = $1;
           break label$71;
          }
          $5 = $3;
          $4 = $0 >>> 8 | 0;
          $1 = 0;
          label$97 : {
           if (!$4) {
            break label$97;
           }
           $1 = 31;
           if ($0 >>> 0 > 16777215) {
            break label$97;
           }
           $1 = $4 + 1048320 >>> 16 & 8;
           $4 = $4 << $1;
           $2 = $4;
           $4 = $4 + 520192 >>> 16 & 4;
           $2 = $2 << $4;
           $6 = $2;
           $2 = $2 + 245760 >>> 16 & 2;
           $1 = ($6 << $2 >>> 15 | 0) - ($1 | $4 | $2) | 0;
           $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
          }
          HEAP32[$5 + 28 >> 2] = $1;
          HEAP32[$3 + 16 >> 2] = 0;
          HEAP32[$3 + 20 >> 2] = 0;
          $4 = ($1 << 2) + 27600 | 0;
          $2 = HEAP32[6825];
          $5 = 1 << $1;
          label$98 : {
           if (!($2 & $5)) {
            HEAP32[6825] = $2 | $5;
            HEAP32[$4 >> 2] = $3;
            break label$98;
           }
           $1 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
           $2 = HEAP32[$4 >> 2];
           while (1) {
            $4 = $2;
            if ((HEAP32[$2 + 4 >> 2] & -8) == ($0 | 0)) {
             break label$72;
            }
            $2 = $1 >>> 29 | 0;
            $1 = $1 << 1;
            $6 = ($2 & 4) + $4 | 0;
            $5 = $6 + 16 | 0;
            $2 = HEAP32[$5 >> 2];
            if ($2) {
             continue;
            }
            break;
           }
           HEAP32[$6 + 16 >> 2] = $3;
          }
          HEAP32[$3 + 24 >> 2] = $4;
          HEAP32[$3 + 12 >> 2] = $3;
          HEAP32[$3 + 8 >> 2] = $3;
          break label$71;
         }
         $0 = $6 + -40 | 0;
         $5 = $2 + 8 & 7 ? -8 - $2 & 7 : 0;
         $7 = $0 - $5 | 0;
         HEAP32[6827] = $7;
         $5 = $2 + $5 | 0;
         HEAP32[6830] = $5;
         HEAP32[$5 + 4 >> 2] = $7 | 1;
         HEAP32[($0 + $2 | 0) + 4 >> 2] = 40;
         HEAP32[6831] = HEAP32[6946];
         $0 = (($3 + -39 & 7 ? 39 - $3 & 7 : 0) + $3 | 0) + -47 | 0;
         $5 = $0 >>> 0 < $1 + 16 >>> 0 ? $1 : $0;
         HEAP32[$5 + 4 >> 2] = 27;
         $0 = HEAP32[6939];
         $7 = HEAP32[6938];
         HEAP32[$5 + 16 >> 2] = $7;
         HEAP32[$5 + 20 >> 2] = $0;
         $7 = HEAP32[6937];
         $0 = HEAP32[6936];
         HEAP32[$5 + 8 >> 2] = $0;
         HEAP32[$5 + 12 >> 2] = $7;
         HEAP32[6938] = $5 + 8;
         HEAP32[6937] = $6;
         HEAP32[6936] = $2;
         HEAP32[6939] = 0;
         $0 = $5 + 24 | 0;
         while (1) {
          HEAP32[$0 + 4 >> 2] = 7;
          $2 = $0 + 8 | 0;
          $0 = $0 + 4 | 0;
          if ($3 >>> 0 > $2 >>> 0) {
           continue;
          }
          break;
         }
         if (($1 | 0) == ($5 | 0)) {
          break label$62;
         }
         HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] & -2;
         $6 = $5 - $1 | 0;
         HEAP32[$1 + 4 >> 2] = $6 | 1;
         HEAP32[$5 >> 2] = $6;
         if ($6 >>> 0 <= 255) {
          $3 = $6 >>> 3 | 0;
          $0 = ($3 << 3) + 27336 | 0;
          $2 = HEAP32[6824];
          $3 = 1 << $3;
          label$103 : {
           if (!($2 & $3)) {
            HEAP32[6824] = $2 | $3;
            $3 = $0;
            break label$103;
           }
           $3 = HEAP32[$0 + 8 >> 2];
          }
          HEAP32[$0 + 8 >> 2] = $1;
          HEAP32[$3 + 12 >> 2] = $1;
          HEAP32[$1 + 12 >> 2] = $0;
          HEAP32[$1 + 8 >> 2] = $3;
          break label$62;
         }
         HEAP32[$1 + 16 >> 2] = 0;
         HEAP32[$1 + 20 >> 2] = 0;
         $5 = $1;
         $3 = $6 >>> 8 | 0;
         $0 = 0;
         label$105 : {
          if (!$3) {
           break label$105;
          }
          $0 = 31;
          if ($6 >>> 0 > 16777215) {
           break label$105;
          }
          $0 = $3 + 1048320 >>> 16 & 8;
          $3 = $3 << $0;
          $2 = $3;
          $3 = $3 + 520192 >>> 16 & 4;
          $2 = $2 << $3;
          $7 = $2;
          $2 = $2 + 245760 >>> 16 & 2;
          $0 = ($7 << $2 >>> 15 | 0) - ($0 | $3 | $2) | 0;
          $0 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
         }
         HEAP32[$5 + 28 >> 2] = $0;
         $3 = ($0 << 2) + 27600 | 0;
         $2 = HEAP32[6825];
         $5 = 1 << $0;
         label$106 : {
          if (!($2 & $5)) {
           HEAP32[6825] = $2 | $5;
           HEAP32[$3 >> 2] = $1;
           break label$106;
          }
          $0 = $6 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
          $2 = HEAP32[$3 >> 2];
          while (1) {
           $3 = $2;
           if ((HEAP32[$2 + 4 >> 2] & -8) == ($6 | 0)) {
            break label$70;
           }
           $2 = $0 >>> 29 | 0;
           $0 = $0 << 1;
           $7 = ($2 & 4) + $3 | 0;
           $5 = $7 + 16 | 0;
           $2 = HEAP32[$5 >> 2];
           if ($2) {
            continue;
           }
           break;
          }
          HEAP32[$7 + 16 >> 2] = $1;
         }
         HEAP32[$1 + 24 >> 2] = $3;
         HEAP32[$1 + 12 >> 2] = $1;
         HEAP32[$1 + 8 >> 2] = $1;
         break label$62;
        }
        $0 = HEAP32[$4 + 8 >> 2];
        HEAP32[$0 + 12 >> 2] = $3;
        HEAP32[$4 + 8 >> 2] = $3;
        HEAP32[$3 + 24 >> 2] = 0;
        HEAP32[$3 + 12 >> 2] = $4;
        HEAP32[$3 + 8 >> 2] = $0;
       }
       $0 = $7 + 8 | 0;
       break label$2;
      }
      $0 = HEAP32[$3 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = $1;
      HEAP32[$3 + 8 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = 0;
      HEAP32[$1 + 12 >> 2] = $3;
      HEAP32[$1 + 8 >> 2] = $0;
     }
     $0 = HEAP32[6827];
     if ($0 >>> 0 <= $4 >>> 0) {
      break label$5;
     }
     $1 = $0 - $4 | 0;
     HEAP32[6827] = $1;
     $0 = HEAP32[6830];
     $3 = $4 + $0 | 0;
     HEAP32[6830] = $3;
     HEAP32[$3 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + 4 >> 2] = $4 | 3;
     $0 = $0 + 8 | 0;
     break label$2;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $0 = 0;
    break label$2;
   }
   label$109 : {
    if (!$7) {
     break label$109;
    }
    $1 = HEAP32[$5 + 28 >> 2];
    $0 = ($1 << 2) + 27600 | 0;
    label$110 : {
     if (HEAP32[$0 >> 2] == ($5 | 0)) {
      HEAP32[$0 >> 2] = $2;
      if ($2) {
       break label$110;
      }
      $8 = __wasm_rotl_i32(-2, $1) & $8;
      HEAP32[6825] = $8;
      break label$109;
     }
     HEAP32[(HEAP32[$7 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $7 >> 2] = $2;
     if (!$2) {
      break label$109;
     }
    }
    HEAP32[$2 + 24 >> 2] = $7;
    $0 = HEAP32[$5 + 16 >> 2];
    if ($0) {
     HEAP32[$2 + 16 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $2;
    }
    $0 = HEAP32[$5 + 20 >> 2];
    if (!$0) {
     break label$109;
    }
    HEAP32[$2 + 20 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $2;
   }
   label$113 : {
    if ($3 >>> 0 <= 15) {
     $0 = $3 + $4 | 0;
     HEAP32[$5 + 4 >> 2] = $0 | 3;
     $0 = $0 + $5 | 0;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
     break label$113;
    }
    HEAP32[$5 + 4 >> 2] = $4 | 3;
    $2 = $4 + $5 | 0;
    HEAP32[$2 + 4 >> 2] = $3 | 1;
    HEAP32[$2 + $3 >> 2] = $3;
    if ($3 >>> 0 <= 255) {
     $1 = $3 >>> 3 | 0;
     $0 = ($1 << 3) + 27336 | 0;
     $1 = 1 << $1;
     $3 = HEAP32[6824];
     label$116 : {
      if (!($1 & $3)) {
       HEAP32[6824] = $1 | $3;
       $1 = $0;
       break label$116;
      }
      $1 = HEAP32[$0 + 8 >> 2];
     }
     HEAP32[$0 + 8 >> 2] = $2;
     HEAP32[$1 + 12 >> 2] = $2;
     HEAP32[$2 + 12 >> 2] = $0;
     HEAP32[$2 + 8 >> 2] = $1;
     break label$113;
    }
    $6 = $2;
    $1 = $3 >>> 8 | 0;
    $0 = 0;
    label$118 : {
     if (!$1) {
      break label$118;
     }
     $0 = 31;
     if ($3 >>> 0 > 16777215) {
      break label$118;
     }
     $0 = $1 + 1048320 >>> 16 & 8;
     $1 = $1 << $0;
     $4 = $1;
     $1 = $1 + 520192 >>> 16 & 4;
     $4 = $4 << $1;
     $7 = $4;
     $4 = $4 + 245760 >>> 16 & 2;
     $0 = ($7 << $4 >>> 15 | 0) - ($0 | $1 | $4) | 0;
     $0 = ($0 << 1 | $3 >>> $0 + 21 & 1) + 28 | 0;
    }
    HEAP32[$6 + 28 >> 2] = $0;
    HEAP32[$2 + 16 >> 2] = 0;
    HEAP32[$2 + 20 >> 2] = 0;
    $1 = ($0 << 2) + 27600 | 0;
    label$119 : {
     $4 = 1 << $0;
     label$120 : {
      if (!($8 & $4)) {
       HEAP32[6825] = $4 | $8;
       HEAP32[$1 >> 2] = $2;
       break label$120;
      }
      $0 = $3 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
      $4 = HEAP32[$1 >> 2];
      while (1) {
       $1 = $4;
       if ((HEAP32[$1 + 4 >> 2] & -8) == ($3 | 0)) {
        break label$119;
       }
       $4 = $0 >>> 29 | 0;
       $0 = $0 << 1;
       $7 = ($4 & 4) + $1 | 0;
       $6 = $7 + 16 | 0;
       $4 = HEAP32[$6 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      HEAP32[$7 + 16 >> 2] = $2;
     }
     HEAP32[$2 + 24 >> 2] = $1;
     HEAP32[$2 + 12 >> 2] = $2;
     HEAP32[$2 + 8 >> 2] = $2;
     break label$113;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $2;
    HEAP32[$1 + 8 >> 2] = $2;
    HEAP32[$2 + 24 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = $1;
    HEAP32[$2 + 8 >> 2] = $0;
   }
   $0 = $5 + 8 | 0;
   break label$2;
  }
  label$123 : {
   if (!$11) {
    break label$123;
   }
   $3 = HEAP32[$2 + 28 >> 2];
   $0 = ($3 << 2) + 27600 | 0;
   label$124 : {
    if (HEAP32[$0 >> 2] == ($2 | 0)) {
     HEAP32[$0 >> 2] = $5;
     if ($5) {
      break label$124;
     }
     wasm2js_i32$0 = 27300, wasm2js_i32$1 = __wasm_rotl_i32(-2, $3) & $9, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$123;
    }
    HEAP32[(HEAP32[$11 + 16 >> 2] == ($2 | 0) ? 16 : 20) + $11 >> 2] = $5;
    if (!$5) {
     break label$123;
    }
   }
   HEAP32[$5 + 24 >> 2] = $11;
   $0 = HEAP32[$2 + 16 >> 2];
   if ($0) {
    HEAP32[$5 + 16 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $5;
   }
   $0 = HEAP32[$2 + 20 >> 2];
   if (!$0) {
    break label$123;
   }
   HEAP32[$5 + 20 >> 2] = $0;
   HEAP32[$0 + 24 >> 2] = $5;
  }
  label$127 : {
   if ($1 >>> 0 <= 15) {
    $0 = $1 + $4 | 0;
    HEAP32[$2 + 4 >> 2] = $0 | 3;
    $0 = $0 + $2 | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
    break label$127;
   }
   HEAP32[$2 + 4 >> 2] = $4 | 3;
   $3 = $2 + $4 | 0;
   HEAP32[$3 + 4 >> 2] = $1 | 1;
   HEAP32[$1 + $3 >> 2] = $1;
   if ($8) {
    $5 = $8 >>> 3 | 0;
    $4 = ($5 << 3) + 27336 | 0;
    $0 = HEAP32[6829];
    $5 = 1 << $5;
    label$130 : {
     if (!($6 & $5)) {
      HEAP32[6824] = $5 | $6;
      $5 = $4;
      break label$130;
     }
     $5 = HEAP32[$4 + 8 >> 2];
    }
    HEAP32[$4 + 8 >> 2] = $0;
    HEAP32[$5 + 12 >> 2] = $0;
    HEAP32[$0 + 12 >> 2] = $4;
    HEAP32[$0 + 8 >> 2] = $5;
   }
   HEAP32[6829] = $3;
   HEAP32[6826] = $1;
  }
  $0 = $2 + 8 | 0;
 }
 $1 = $10 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function decfloat($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $7 = global$0 - 8960 | 0;
 $9 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 $29 = $3 + $4 | 0;
 $34 = 0 - $29 | 0;
 label$2 : {
  label$3 : {
   while (1) {
    label$5 : {
     if (($2 | 0) != 48) {
      if (($2 | 0) != 46) {
       break label$2;
      }
      $13 = HEAP32[$1 + 4 >> 2];
      if ($13 >>> 0 >= HEAPU32[$1 + 104 >> 2]) {
       break label$5;
      }
      HEAP32[$1 + 4 >> 2] = $13 + 1;
      $2 = HEAPU8[$13 | 0];
      break label$3;
     }
     $13 = HEAP32[$1 + 4 >> 2];
     if ($13 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      $14 = 1;
      HEAP32[$1 + 4 >> 2] = $13 + 1;
      $2 = HEAPU8[$13 | 0];
      continue;
     }
     $14 = 1;
     $2 = __shgetc($1);
     continue;
    }
    break;
   }
   $2 = __shgetc($1);
  }
  $19 = 1;
  if (($2 | 0) != 48) {
   break label$2;
  }
  while (1) {
   $13 = HEAP32[$1 + 4 >> 2];
   label$9 : {
    if ($13 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$1 + 4 >> 2] = $13 + 1;
     $2 = HEAPU8[$13 | 0];
     break label$9;
    }
    $2 = __shgetc($1);
   }
   $9 = $15 + -1 | 0;
   $11 = $17;
   $10 = $11 + -1 | 0;
   if ($10 >>> 0 < 4294967295) {
    $9 = $9 + 1 | 0;
   }
   $17 = $10;
   $15 = $9;
   if (($2 | 0) == 48) {
    continue;
   }
   break;
  }
  $14 = 1;
 }
 HEAP32[$7 + 768 >> 2] = 0;
 label$11 : {
  label$12 : {
   $20 = ($2 | 0) == 46;
   $11 = $2 + -48 | 0;
   label$13 : {
    label$14 : {
     label$15 : {
      label$16 : {
       if (!($20 | $11 >>> 0 <= 9)) {
        $13 = 0;
        break label$16;
       }
       $13 = 0;
       while (1) {
        label$19 : {
         if ($20 & 1) {
          if (!$19) {
           $17 = $16;
           $9 = $18;
           $15 = $9;
           $19 = 1;
           break label$19;
          }
          $14 = ($14 | 0) != 0;
          break label$15;
         }
         $9 = $18;
         $10 = $9;
         $8 = $16 + 1 | 0;
         if ($8 >>> 0 < 1) {
          $10 = $10 + 1 | 0;
         }
         $16 = $8;
         $18 = $10;
         if (($13 | 0) <= 2044) {
          $20 = ($2 | 0) != 48;
          $26 = $20 ? $16 : $26;
          $14 = ($7 + 768 | 0) + ($13 << 2) | 0;
          $11 = $21 ? (Math_imul(HEAP32[$14 >> 2], 10) + $2 | 0) + -48 | 0 : $11;
          HEAP32[$14 >> 2] = $11;
          $14 = 1;
          $2 = $21 + 1 | 0;
          $9 = $2;
          $2 = ($2 | 0) == 9;
          $21 = $2 ? 0 : $9;
          $13 = $2 + $13 | 0;
          break label$19;
         }
         if (($2 | 0) == 48) {
          break label$19;
         }
         HEAP32[$7 + 8944 >> 2] = HEAP32[$7 + 8944 >> 2] | 1;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        label$25 : {
         if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
          HEAP32[$1 + 4 >> 2] = $2 + 1;
          $2 = HEAPU8[$2 | 0];
          break label$25;
         }
         $2 = __shgetc($1);
        }
        $11 = $2 + -48 | 0;
        $20 = ($2 | 0) == 46;
        if ($20 | $11 >>> 0 < 10) {
         continue;
        }
        break;
       }
      }
      $11 = $19;
      $12 = $11 ? $17 : $16;
      $17 = $12;
      $10 = $15;
      $9 = $11 ? $10 : $18;
      $15 = $9;
      if (!(!$14 | ($2 & -33) != 69)) {
       $9 = scanexp($1, $6);
       $22 = $9;
       $12 = i64toi32_i32$HIGH_BITS;
       $25 = $12;
       $11 = $22;
       label$28 : {
        if ($11 | ($12 | 0) != -2147483648) {
         break label$28;
        }
        if (!$6) {
         break label$13;
        }
        $22 = 0;
        $25 = 0;
        if (!HEAP32[$1 + 104 >> 2]) {
         break label$28;
        }
        HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
       }
       $11 = $15;
       $12 = $25;
       $8 = $11 + $12 | 0;
       $10 = $17;
       $9 = $22;
       $6 = $10 + $9 | 0;
       if ($6 >>> 0 < $9 >>> 0) {
        $8 = $8 + 1 | 0;
       }
       $17 = $6;
       $15 = $8;
       break label$12;
      }
      $14 = ($14 | 0) != 0;
      if (($2 | 0) < 0) {
       break label$14;
      }
     }
     if (!HEAP32[$1 + 104 >> 2]) {
      break label$14;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
    }
    if ($14) {
     break label$12;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   $16 = 0;
   $18 = 0;
   __shlim($1, 0, 0);
   $10 = 0;
   break label$11;
  }
  $1 = HEAP32[$7 + 768 >> 2];
  if (!$1) {
   __extenddftf2($7, +($5 | 0) * 0);
   $8 = HEAP32[$7 >> 2];
   $16 = $8;
   $10 = HEAP32[$7 + 4 >> 2];
   $18 = $10;
   $8 = HEAP32[$7 + 12 >> 2];
   $27 = $8;
   $10 = HEAP32[$7 + 8 >> 2];
   break label$11;
  }
  label$30 : {
   $11 = $16;
   $8 = $18;
   if (($8 | 0) > 0 ? 1 : ($8 | 0) >= 0 ? $11 >>> 0 <= 9 ? 0 : 1 : 0) {
    break label$30;
   }
   $10 = $16;
   $9 = $17;
   $11 = $15;
   if (($10 | 0) != ($9 | 0) | ($18 | 0) != ($11 | 0) | ($1 >>> $3 | 0 ? ($3 | 0) <= 30 : 0)) {
    break label$30;
   }
   __floatsitf($7 + 48 | 0, $5);
   __floatunsitf($7 + 32 | 0, $1);
   $9 = HEAP32[$7 + 48 >> 2];
   $3 = $9;
   $11 = HEAP32[$7 + 52 >> 2];
   $1 = $11;
   $11 = HEAP32[$7 + 56 >> 2];
   $4 = $11;
   $9 = HEAP32[$7 + 60 >> 2];
   $2 = $9;
   $9 = HEAP32[$7 + 32 >> 2];
   $5 = $9;
   $11 = HEAP32[$7 + 36 >> 2];
   $10 = $11;
   $11 = HEAP32[$7 + 40 >> 2];
   $6 = $11;
   $9 = HEAP32[$7 + 44 >> 2];
   $8 = $9;
   $9 = $1;
   $11 = $2;
   __multf3($7 + 16 | 0, $3, $9, $4, $11, $5, $10, $6, $8);
   $8 = HEAP32[$7 + 16 >> 2];
   $16 = $8;
   $10 = HEAP32[$7 + 20 >> 2];
   $18 = $10;
   $8 = HEAP32[$7 + 28 >> 2];
   $27 = $8;
   $10 = HEAP32[$7 + 24 >> 2];
   break label$11;
  }
  $10 = ($4 | 0) / -2 | 0;
  $8 = $10 >> 31;
  $1 = $8;
  $11 = $17;
  $9 = $10;
  $8 = $15;
  $10 = $1;
  if (($8 | 0) > ($10 | 0) ? 1 : ($8 | 0) >= ($10 | 0) ? $11 >>> 0 <= $9 >>> 0 ? 0 : 1 : 0) {
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   __floatsitf($7 + 96 | 0, $5);
   $11 = HEAP32[$7 + 96 >> 2];
   $2 = $11;
   $11 = HEAP32[$7 + 108 >> 2];
   $1 = $11;
   $8 = HEAP32[$7 + 100 >> 2];
   $11 = $8;
   $8 = HEAP32[$7 + 104 >> 2];
   $3 = $8;
   $8 = $1;
   __multf3($7 + 80 | 0, $2, $11, $3, $8, -1, -1, -1, 2147418111);
   $10 = HEAP32[$7 + 80 >> 2];
   $2 = $10;
   $10 = HEAP32[$7 + 92 >> 2];
   $1 = $10;
   $9 = HEAP32[$7 + 84 >> 2];
   $10 = $9;
   $9 = HEAP32[$7 + 88 >> 2];
   $3 = $9;
   $9 = $1;
   __multf3($7 - -64 | 0, $2, $10, $3, $9, -1, -1, -1, 2147418111);
   $11 = HEAP32[$7 + 64 >> 2];
   $16 = $11;
   $8 = HEAP32[$7 + 68 >> 2];
   $18 = $8;
   $11 = HEAP32[$7 + 76 >> 2];
   $27 = $11;
   $8 = HEAP32[$7 + 72 >> 2];
   $10 = $8;
   break label$11;
  }
  $8 = $4 + -226 | 0;
  $11 = $8 >> 31;
  $1 = $11;
  $9 = $17;
  $10 = $8;
  $11 = $15;
  $8 = $1;
  if (($11 | 0) < ($8 | 0) ? 1 : ($11 | 0) <= ($8 | 0) ? $9 >>> 0 >= $10 >>> 0 ? 0 : 1 : 0) {
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   __floatsitf($7 + 144 | 0, $5);
   $9 = HEAP32[$7 + 144 >> 2];
   $2 = $9;
   $9 = HEAP32[$7 + 156 >> 2];
   $1 = $9;
   $11 = HEAP32[$7 + 148 >> 2];
   $9 = $11;
   $11 = HEAP32[$7 + 152 >> 2];
   $3 = $11;
   $11 = $1;
   __multf3($7 + 128 | 0, $2, $9, $3, $11, 0, 0, 0, 65536);
   $8 = HEAP32[$7 + 128 >> 2];
   $2 = $8;
   $8 = HEAP32[$7 + 140 >> 2];
   $1 = $8;
   $10 = HEAP32[$7 + 132 >> 2];
   $8 = $10;
   $10 = HEAP32[$7 + 136 >> 2];
   $3 = $10;
   $10 = $1;
   __multf3($7 + 112 | 0, $2, $8, $3, $10, 0, 0, 0, 65536);
   $9 = HEAP32[$7 + 112 >> 2];
   $16 = $9;
   $11 = HEAP32[$7 + 116 >> 2];
   $18 = $11;
   $9 = HEAP32[$7 + 124 >> 2];
   $27 = $9;
   $11 = HEAP32[$7 + 120 >> 2];
   $10 = $11;
   break label$11;
  }
  if ($21) {
   if (($21 | 0) <= 8) {
    $2 = ($7 + 768 | 0) + ($13 << 2) | 0;
    $1 = HEAP32[$2 >> 2];
    while (1) {
     $1 = Math_imul($1, 10);
     $21 = $21 + 1 | 0;
     if (($21 | 0) != 9) {
      continue;
     }
     break;
    }
    HEAP32[$2 >> 2] = $1;
   }
   $13 = $13 + 1 | 0;
  }
  label$36 : {
   $19 = $17;
   if (($26 | 0) > 8 | ($26 | 0) > ($19 | 0) | ($19 | 0) > 17) {
    break label$36;
   }
   if (($19 | 0) == 9) {
    __floatsitf($7 + 192 | 0, $5);
    __floatunsitf($7 + 176 | 0, HEAP32[$7 + 768 >> 2]);
    $9 = HEAP32[$7 + 192 >> 2];
    $3 = $9;
    $11 = HEAP32[$7 + 196 >> 2];
    $1 = $11;
    $11 = HEAP32[$7 + 200 >> 2];
    $4 = $11;
    $9 = HEAP32[$7 + 204 >> 2];
    $2 = $9;
    $9 = HEAP32[$7 + 176 >> 2];
    $5 = $9;
    $11 = HEAP32[$7 + 180 >> 2];
    $10 = $11;
    $11 = HEAP32[$7 + 184 >> 2];
    $6 = $11;
    $9 = HEAP32[$7 + 188 >> 2];
    $8 = $9;
    $9 = $1;
    $11 = $2;
    __multf3($7 + 160 | 0, $3, $9, $4, $11, $5, $10, $6, $8);
    $8 = HEAP32[$7 + 160 >> 2];
    $16 = $8;
    $10 = HEAP32[$7 + 164 >> 2];
    $18 = $10;
    $8 = HEAP32[$7 + 172 >> 2];
    $27 = $8;
    $10 = HEAP32[$7 + 168 >> 2];
    break label$11;
   }
   if (($19 | 0) <= 8) {
    __floatsitf($7 + 272 | 0, $5);
    __floatunsitf($7 + 256 | 0, HEAP32[$7 + 768 >> 2]);
    $8 = HEAP32[$7 + 272 >> 2];
    $3 = $8;
    $10 = HEAP32[$7 + 276 >> 2];
    $1 = $10;
    $10 = HEAP32[$7 + 280 >> 2];
    $4 = $10;
    $8 = HEAP32[$7 + 284 >> 2];
    $2 = $8;
    $8 = HEAP32[$7 + 256 >> 2];
    $5 = $8;
    $10 = HEAP32[$7 + 260 >> 2];
    $11 = $10;
    $10 = HEAP32[$7 + 264 >> 2];
    $6 = $10;
    $8 = HEAP32[$7 + 268 >> 2];
    $9 = $8;
    $8 = $1;
    $10 = $2;
    __multf3($7 + 240 | 0, $3, $8, $4, $10, $5, $11, $6, $9);
    __floatsitf($7 + 224 | 0, HEAP32[(0 - $19 << 2) + 9024 >> 2]);
    $9 = HEAP32[$7 + 240 >> 2];
    $3 = $9;
    $11 = HEAP32[$7 + 244 >> 2];
    $1 = $11;
    $11 = HEAP32[$7 + 248 >> 2];
    $4 = $11;
    $9 = HEAP32[$7 + 252 >> 2];
    $2 = $9;
    $9 = HEAP32[$7 + 224 >> 2];
    $5 = $9;
    $11 = HEAP32[$7 + 228 >> 2];
    $10 = $11;
    $11 = HEAP32[$7 + 232 >> 2];
    $6 = $11;
    $9 = HEAP32[$7 + 236 >> 2];
    $8 = $9;
    $9 = $1;
    $11 = $2;
    __divtf3($7 + 208 | 0, $3, $9, $4, $11, $5, $10, $6, $8);
    $8 = HEAP32[$7 + 208 >> 2];
    $16 = $8;
    $10 = HEAP32[$7 + 212 >> 2];
    $18 = $10;
    $8 = HEAP32[$7 + 220 >> 2];
    $27 = $8;
    $10 = HEAP32[$7 + 216 >> 2];
    break label$11;
   }
   $2 = (Math_imul($19, -3) + $3 | 0) + 27 | 0;
   $1 = HEAP32[$7 + 768 >> 2];
   if ($1 >>> $2 | 0 ? ($2 | 0) <= 30 : 0) {
    break label$36;
   }
   __floatsitf($7 + 352 | 0, $5);
   __floatunsitf($7 + 336 | 0, $1);
   $8 = HEAP32[$7 + 352 >> 2];
   $3 = $8;
   $10 = HEAP32[$7 + 356 >> 2];
   $1 = $10;
   $10 = HEAP32[$7 + 360 >> 2];
   $4 = $10;
   $8 = HEAP32[$7 + 364 >> 2];
   $2 = $8;
   $8 = HEAP32[$7 + 336 >> 2];
   $5 = $8;
   $10 = HEAP32[$7 + 340 >> 2];
   $11 = $10;
   $10 = HEAP32[$7 + 344 >> 2];
   $6 = $10;
   $8 = HEAP32[$7 + 348 >> 2];
   $9 = $8;
   $8 = $1;
   $10 = $2;
   __multf3($7 + 320 | 0, $3, $8, $4, $10, $5, $11, $6, $9);
   __floatsitf($7 + 304 | 0, HEAP32[($19 << 2) + 8952 >> 2]);
   $9 = HEAP32[$7 + 320 >> 2];
   $3 = $9;
   $11 = HEAP32[$7 + 324 >> 2];
   $1 = $11;
   $11 = HEAP32[$7 + 328 >> 2];
   $4 = $11;
   $9 = HEAP32[$7 + 332 >> 2];
   $2 = $9;
   $9 = HEAP32[$7 + 304 >> 2];
   $5 = $9;
   $11 = HEAP32[$7 + 308 >> 2];
   $10 = $11;
   $11 = HEAP32[$7 + 312 >> 2];
   $6 = $11;
   $9 = HEAP32[$7 + 316 >> 2];
   $8 = $9;
   $9 = $1;
   $11 = $2;
   __multf3($7 + 288 | 0, $3, $9, $4, $11, $5, $10, $6, $8);
   $8 = HEAP32[$7 + 288 >> 2];
   $16 = $8;
   $10 = HEAP32[$7 + 292 >> 2];
   $18 = $10;
   $8 = HEAP32[$7 + 300 >> 2];
   $27 = $8;
   $10 = HEAP32[$7 + 296 >> 2];
   break label$11;
  }
  $21 = 0;
  $1 = ($19 | 0) % 9 | 0;
  label$39 : {
   if (!$1) {
    $2 = 0;
    break label$39;
   }
   $6 = ($19 | 0) > -1 ? $1 : $1 + 9 | 0;
   label$41 : {
    if (!$13) {
     $2 = 0;
     $13 = 0;
     break label$41;
    }
    $20 = HEAP32[(0 - $6 << 2) + 9024 >> 2];
    $16 = 1e9 / ($20 | 0) | 0;
    $14 = 0;
    $1 = 0;
    $2 = 0;
    while (1) {
     $11 = ($7 + 768 | 0) + ($1 << 2) | 0;
     $9 = $11;
     $11 = HEAP32[$11 >> 2];
     $26 = ($11 >>> 0) / ($20 >>> 0) | 0;
     $14 = $26 + $14 | 0;
     HEAP32[$9 >> 2] = $14;
     $14 = !$14 & ($1 | 0) == ($2 | 0);
     $2 = $14 ? $2 + 1 & 2047 : $2;
     $19 = $14 ? $19 + -9 | 0 : $19;
     $14 = Math_imul($11 - Math_imul($20, $26) | 0, $16);
     $1 = $1 + 1 | 0;
     if (($13 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
    if (!$14) {
     break label$41;
    }
    HEAP32[($7 + 768 | 0) + ($13 << 2) >> 2] = $14;
    $13 = $13 + 1 | 0;
   }
   $19 = ($19 - $6 | 0) + 9 | 0;
  }
  while (1) {
   $26 = ($7 + 768 | 0) + ($2 << 2) | 0;
   label$45 : {
    while (1) {
     if (($19 | 0) != 36 | HEAPU32[$26 >> 2] >= 10384593 ? ($19 | 0) >= 36 : 0) {
      break label$45;
     }
     $11 = $13 + 2047 | 0;
     $14 = 0;
     $20 = $13;
     while (1) {
      $13 = $20;
      $1 = $11 & 2047;
      $20 = ($7 + 768 | 0) + ($1 << 2) | 0;
      $11 = $20;
      $8 = HEAP32[$11 >> 2];
      $9 = $8 << 29;
      $8 = $8 >>> 3 | 0;
      $6 = $8;
      $10 = $14;
      $12 = $10 + $9 | 0;
      if ($12 >>> 0 < $9 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $17 = $12;
      $15 = $6;
      $8 = $12;
      $16 = 0;
      label$49 : {
       if (!$15 & $8 >>> 0 < 1000000001 | $15 >>> 0 < 0) {
        break label$49;
       }
       $8 = $15;
       $6 = __wasm_i64_udiv($17, $8, 1e9, 0);
       $16 = $6;
       $8 = i64toi32_i32$HIGH_BITS;
       $18 = $8;
       $6 = __wasm_i64_mul($16, $8, 1e9, 0);
       $8 = i64toi32_i32$HIGH_BITS;
       $12 = $8;
       $9 = $17;
       $10 = $6;
       $11 = $9 - $10 | 0;
       $17 = $11;
       $8 = $15;
       $6 = $12;
       $12 = $6 + ($9 >>> 0 < $10 >>> 0) | 0;
       $12 = $8 - $12 | 0;
       $15 = $12;
      }
      $14 = $16;
      HEAP32[$20 >> 2] = $17;
      $20 = ($13 + -1 & 2047) != ($1 | 0) ? $13 : ($1 | 0) == ($2 | 0) ? $13 : $17 ? $13 : $1;
      $11 = $1 + -1 | 0;
      if (($1 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
     $21 = $21 + -29 | 0;
     if (!$14) {
      continue;
     }
     break;
    }
    $2 = $2 + -1 & 2047;
    if (($20 | 0) == ($2 | 0)) {
     $1 = ($7 + 768 | 0) + (($20 + 2046 & 2047) << 2) | 0;
     $13 = $20 + -1 & 2047;
     HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | HEAP32[($7 + 768 | 0) + ($13 << 2) >> 2];
    }
    $19 = $19 + 9 | 0;
    HEAP32[($7 + 768 | 0) + ($2 << 2) >> 2] = $14;
    continue;
   }
   break;
  }
  label$51 : {
   label$52 : while (1) {
    $6 = $13 + 1 & 2047;
    $8 = ($7 + 768 | 0) + (($13 + -1 & 2047) << 2) | 0;
    while (1) {
     $11 = ($19 | 0) > 45 ? 9 : 1;
     label$54 : {
      while (1) {
       $20 = $2;
       $1 = 0;
       label$56 : {
        while (1) {
         label$58 : {
          $2 = $1 + $20 & 2047;
          if (($13 | 0) == ($2 | 0)) {
           break label$58;
          }
          $2 = HEAP32[($7 + 768 | 0) + ($2 << 2) >> 2];
          $14 = HEAP32[($1 << 2) + 8976 >> 2];
          if ($2 >>> 0 < $14 >>> 0) {
           break label$58;
          }
          if ($2 >>> 0 > $14 >>> 0) {
           break label$56;
          }
          $1 = $1 + 1 | 0;
          if (($1 | 0) != 4) {
           continue;
          }
         }
         break;
        }
        if (($19 | 0) != 36) {
         break label$56;
        }
        $17 = 0;
        $15 = 0;
        $1 = 0;
        $16 = 0;
        $18 = 0;
        while (1) {
         $2 = $1 + $20 & 2047;
         if (($13 | 0) == ($2 | 0)) {
          $13 = $13 + 1 & 2047;
          HEAP32[(($13 << 2) + $7 | 0) + 764 >> 2] = 0;
         }
         $12 = $15;
         $9 = $18;
         __multf3($7 + 752 | 0, $17, $12, $16, $9, 0, 0, 1342177280, 1075633366);
         __floatunsitf($7 + 736 | 0, HEAP32[($7 + 768 | 0) + ($2 << 2) >> 2]);
         $10 = HEAP32[$7 + 752 >> 2];
         $11 = $10;
         $8 = HEAP32[$7 + 756 >> 2];
         $2 = $8;
         $8 = HEAP32[$7 + 760 >> 2];
         $15 = $8;
         $10 = HEAP32[$7 + 764 >> 2];
         $6 = $10;
         $10 = HEAP32[$7 + 736 >> 2];
         $18 = $10;
         $8 = HEAP32[$7 + 740 >> 2];
         $9 = $8;
         $8 = HEAP32[$7 + 744 >> 2];
         $17 = $8;
         $10 = HEAP32[$7 + 748 >> 2];
         $12 = $10;
         $10 = $2;
         $8 = $6;
         __addtf3($7 + 720 | 0, $11, $10, $15, $8, $18, $9, $17, $12);
         $12 = HEAP32[$7 + 728 >> 2];
         $16 = $12;
         $9 = HEAP32[$7 + 732 >> 2];
         $18 = $9;
         $9 = HEAP32[$7 + 720 >> 2];
         $17 = $9;
         $12 = HEAP32[$7 + 724 >> 2];
         $15 = $12;
         $1 = $1 + 1 | 0;
         if (($1 | 0) != 4) {
          continue;
         }
         break;
        }
        __floatsitf($7 + 704 | 0, $5);
        $12 = HEAP32[$7 + 704 >> 2];
        $1 = $12;
        $9 = HEAP32[$7 + 708 >> 2];
        $8 = $9;
        $9 = HEAP32[$7 + 712 >> 2];
        $2 = $9;
        $12 = HEAP32[$7 + 716 >> 2];
        $10 = $12;
        $12 = $15;
        $9 = $18;
        __multf3($7 + 688 | 0, $17, $12, $16, $9, $1, $8, $2, $10);
        $10 = HEAP32[$7 + 696 >> 2];
        $16 = $10;
        $8 = HEAP32[$7 + 700 >> 2];
        $18 = $8;
        $17 = 0;
        $15 = 0;
        $8 = HEAP32[$7 + 688 >> 2];
        $22 = $8;
        $10 = HEAP32[$7 + 692 >> 2];
        $25 = $10;
        $14 = $21 + 113 | 0;
        $1 = $14 - $4 | 0;
        $11 = ($1 | 0) < ($3 | 0);
        $2 = $11 ? ($1 | 0) > 0 ? $1 : 0 : $3;
        if (($2 | 0) <= 112) {
         break label$54;
        }
        break label$51;
       }
       $21 = $11 + $21 | 0;
       $2 = $13;
       if (($20 | 0) == ($2 | 0)) {
        continue;
       }
       break;
      }
      $26 = 1e9 >>> $11 | 0;
      $16 = -1 << $11 ^ -1;
      $1 = 0;
      $2 = $20;
      while (1) {
       $14 = ($7 + 768 | 0) + ($20 << 2) | 0;
       $9 = $14;
       $14 = HEAP32[$14 >> 2];
       $1 = ($14 >>> $11 | 0) + $1 | 0;
       HEAP32[$9 >> 2] = $1;
       $1 = !$1 & ($2 | 0) == ($20 | 0);
       $2 = $1 ? $2 + 1 & 2047 : $2;
       $19 = $1 ? $19 + -9 | 0 : $19;
       $1 = Math_imul($14 & $16, $26);
       $20 = $20 + 1 & 2047;
       if (($20 | 0) != ($13 | 0)) {
        continue;
       }
       break;
      }
      if (!$1) {
       continue;
      }
      if (($2 | 0) != ($6 | 0)) {
       HEAP32[($7 + 768 | 0) + ($13 << 2) >> 2] = $1;
       $13 = $6;
       continue label$52;
      }
      HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 1;
      $2 = $6;
      continue;
     }
     break;
    }
    break;
   }
   __extenddftf2($7 + 640 | 0, scalbn(1, 225 - $2 | 0));
   $10 = HEAP32[$7 + 640 >> 2];
   $4 = $10;
   $10 = HEAP32[$7 + 652 >> 2];
   $3 = $10;
   $8 = HEAP32[$7 + 644 >> 2];
   $10 = $8;
   $8 = HEAP32[$7 + 648 >> 2];
   $6 = $8;
   $8 = $3;
   $9 = $25;
   $12 = $18;
   copysignl($7 + 672 | 0, $4, $10, $6, $8, $22, $9, $16, $12);
   $12 = HEAP32[$7 + 680 >> 2];
   $30 = $12;
   $9 = HEAP32[$7 + 684 >> 2];
   $31 = $9;
   $9 = HEAP32[$7 + 672 >> 2];
   $32 = $9;
   $12 = HEAP32[$7 + 676 >> 2];
   $33 = $12;
   __extenddftf2($7 + 624 | 0, scalbn(1, 113 - $2 | 0));
   $12 = HEAP32[$7 + 624 >> 2];
   $3 = $12;
   $9 = HEAP32[$7 + 628 >> 2];
   $8 = $9;
   $9 = HEAP32[$7 + 632 >> 2];
   $4 = $9;
   $12 = HEAP32[$7 + 636 >> 2];
   $10 = $12;
   $12 = $25;
   $9 = $18;
   fmodl($7 + 656 | 0, $22, $12, $16, $9, $3, $8, $4, $10);
   $10 = HEAP32[$7 + 656 >> 2];
   $17 = $10;
   $8 = HEAP32[$7 + 660 >> 2];
   $15 = $8;
   $8 = HEAP32[$7 + 664 >> 2];
   $23 = $8;
   $10 = HEAP32[$7 + 668 >> 2];
   $24 = $10;
   $10 = $12;
   $8 = $9;
   $9 = $15;
   $12 = $24;
   __subtf3($7 + 608 | 0, $22, $10, $16, $8, $17, $9, $23, $12);
   $12 = HEAP32[$7 + 608 >> 2];
   $3 = $12;
   $9 = HEAP32[$7 + 612 >> 2];
   $8 = $9;
   $9 = HEAP32[$7 + 616 >> 2];
   $4 = $9;
   $12 = HEAP32[$7 + 620 >> 2];
   $10 = $12;
   $12 = $33;
   $9 = $31;
   __addtf3($7 + 592 | 0, $32, $12, $30, $9, $3, $8, $4, $10);
   $10 = HEAP32[$7 + 600 >> 2];
   $16 = $10;
   $8 = HEAP32[$7 + 604 >> 2];
   $18 = $8;
   $8 = HEAP32[$7 + 592 >> 2];
   $22 = $8;
   $10 = HEAP32[$7 + 596 >> 2];
   $25 = $10;
  }
  $19 = $20 + 4 & 2047;
  label$63 : {
   if (($19 | 0) == ($13 | 0)) {
    break label$63;
   }
   $19 = HEAP32[($7 + 768 | 0) + ($19 << 2) >> 2];
   label$64 : {
    if ($19 >>> 0 <= 499999999) {
     if (($20 + 5 & 2047) == ($13 | 0) ? !$19 : 0) {
      break label$64;
     }
     __extenddftf2($7 + 480 | 0, +($5 | 0) * .25);
     $10 = HEAP32[$7 + 480 >> 2];
     $3 = $10;
     $8 = HEAP32[$7 + 484 >> 2];
     $9 = $8;
     $8 = HEAP32[$7 + 488 >> 2];
     $4 = $8;
     $10 = HEAP32[$7 + 492 >> 2];
     $12 = $10;
     $10 = $15;
     $8 = $24;
     __addtf3($7 + 464 | 0, $17, $10, $23, $8, $3, $9, $4, $12);
     $12 = HEAP32[$7 + 472 >> 2];
     $23 = $12;
     $9 = HEAP32[$7 + 476 >> 2];
     $24 = $9;
     $9 = HEAP32[$7 + 464 >> 2];
     $17 = $9;
     $12 = HEAP32[$7 + 468 >> 2];
     $15 = $12;
     break label$64;
    }
    if (($19 | 0) != 5e8) {
     __extenddftf2($7 + 576 | 0, +($5 | 0) * .75);
     $12 = HEAP32[$7 + 576 >> 2];
     $3 = $12;
     $9 = HEAP32[$7 + 580 >> 2];
     $8 = $9;
     $9 = HEAP32[$7 + 584 >> 2];
     $4 = $9;
     $12 = HEAP32[$7 + 588 >> 2];
     $10 = $12;
     $12 = $15;
     $9 = $24;
     __addtf3($7 + 560 | 0, $17, $12, $23, $9, $3, $8, $4, $10);
     $10 = HEAP32[$7 + 568 >> 2];
     $23 = $10;
     $8 = HEAP32[$7 + 572 >> 2];
     $24 = $8;
     $8 = HEAP32[$7 + 560 >> 2];
     $17 = $8;
     $10 = HEAP32[$7 + 564 >> 2];
     $15 = $10;
     break label$64;
    }
    $28 = +($5 | 0);
    if (($20 + 5 & 2047) == ($13 | 0)) {
     __extenddftf2($7 + 512 | 0, $28 * .5);
     $10 = HEAP32[$7 + 512 >> 2];
     $3 = $10;
     $8 = HEAP32[$7 + 516 >> 2];
     $9 = $8;
     $8 = HEAP32[$7 + 520 >> 2];
     $4 = $8;
     $10 = HEAP32[$7 + 524 >> 2];
     $12 = $10;
     $10 = $15;
     $8 = $24;
     __addtf3($7 + 496 | 0, $17, $10, $23, $8, $3, $9, $4, $12);
     $12 = HEAP32[$7 + 504 >> 2];
     $23 = $12;
     $9 = HEAP32[$7 + 508 >> 2];
     $24 = $9;
     $9 = HEAP32[$7 + 496 >> 2];
     $17 = $9;
     $12 = HEAP32[$7 + 500 >> 2];
     $15 = $12;
     break label$64;
    }
    __extenddftf2($7 + 544 | 0, $28 * .75);
    $12 = HEAP32[$7 + 544 >> 2];
    $3 = $12;
    $9 = HEAP32[$7 + 548 >> 2];
    $8 = $9;
    $9 = HEAP32[$7 + 552 >> 2];
    $4 = $9;
    $12 = HEAP32[$7 + 556 >> 2];
    $10 = $12;
    $12 = $15;
    $9 = $24;
    __addtf3($7 + 528 | 0, $17, $12, $23, $9, $3, $8, $4, $10);
    $10 = HEAP32[$7 + 536 >> 2];
    $23 = $10;
    $8 = HEAP32[$7 + 540 >> 2];
    $24 = $8;
    $8 = HEAP32[$7 + 528 >> 2];
    $17 = $8;
    $10 = HEAP32[$7 + 532 >> 2];
    $15 = $10;
   }
   if (($2 | 0) > 111) {
    break label$63;
   }
   $10 = $15;
   $8 = $24;
   fmodl($7 + 448 | 0, $17, $10, $23, $8, 0, 0, 0, 1073676288);
   $12 = HEAP32[$7 + 448 >> 2];
   $4 = $12;
   $12 = HEAP32[$7 + 460 >> 2];
   $3 = $12;
   $9 = HEAP32[$7 + 452 >> 2];
   $12 = $9;
   $9 = HEAP32[$7 + 456 >> 2];
   $5 = $9;
   $9 = $3;
   if (__letf2($4, $12, $5, $9, 0, 0, 0, 0)) {
    break label$63;
   }
   $10 = $15;
   $8 = $24;
   __addtf3($7 + 432 | 0, $17, $10, $23, $8, 0, 0, 0, 1073676288);
   $12 = HEAP32[$7 + 440 >> 2];
   $23 = $12;
   $9 = HEAP32[$7 + 444 >> 2];
   $24 = $9;
   $9 = HEAP32[$7 + 432 >> 2];
   $17 = $9;
   $12 = HEAP32[$7 + 436 >> 2];
   $15 = $12;
  }
  $12 = $25;
  $9 = $18;
  $8 = $15;
  $10 = $24;
  __addtf3($7 + 416 | 0, $22, $12, $16, $9, $17, $8, $23, $10);
  $10 = HEAP32[$7 + 416 >> 2];
  $4 = $10;
  $10 = HEAP32[$7 + 428 >> 2];
  $3 = $10;
  $8 = HEAP32[$7 + 420 >> 2];
  $10 = $8;
  $8 = HEAP32[$7 + 424 >> 2];
  $5 = $8;
  $8 = $3;
  $9 = $33;
  $12 = $31;
  __subtf3($7 + 400 | 0, $4, $10, $5, $8, $32, $9, $30, $12);
  $12 = HEAP32[$7 + 408 >> 2];
  $16 = $12;
  $9 = HEAP32[$7 + 412 >> 2];
  $18 = $9;
  $9 = HEAP32[$7 + 400 >> 2];
  $22 = $9;
  $12 = HEAP32[$7 + 404 >> 2];
  $25 = $12;
  label$68 : {
   if (($14 & 2147483647) <= (-2 - $29 | 0)) {
    break label$68;
   }
   $12 = $25;
   $9 = $18;
   __multf3($7 + 384 | 0, $22, $12, $16, $9, 0, 0, 0, 1073610752);
   $10 = $15;
   $8 = $24;
   $14 = __letf2($17, $10, $23, $8, 0, 0, 0, 0);
   $12 = $25;
   $9 = $18;
   $28 = fabs(__trunctfdf2($22, $12, $16, $9));
   $13 = $28 >= 1.0384593717069655e+34;
   $9 = HEAP32[$7 + 392 >> 2];
   $10 = $13 ? $9 : $16;
   $16 = $10;
   $12 = HEAP32[$7 + 396 >> 2];
   $9 = $18;
   $8 = $13 ? $12 : $9;
   $18 = $8;
   $8 = HEAP32[$7 + 384 >> 2];
   $9 = $13;
   $12 = $9 ? $8 : $22;
   $22 = $12;
   $10 = HEAP32[$7 + 388 >> 2];
   $8 = $25;
   $6 = $9 ? $10 : $8;
   $25 = $6;
   $21 = $9 + $21 | 0;
   if (($21 + 110 | 0) <= ($34 | 0) ? !(($9 ^ 1 | ($1 | 0) != ($2 | 0)) & $11 & ($14 | 0) != 0) : 0) {
    break label$68;
   }
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
  $6 = $25;
  $12 = $18;
  scalbnl($7 + 368 | 0, $22, $6, $16, $12, $21);
  $12 = HEAP32[$7 + 368 >> 2];
  $16 = $12;
  $6 = HEAP32[$7 + 372 >> 2];
  $18 = $6;
  $12 = HEAP32[$7 + 380 >> 2];
  $27 = $12;
  $6 = HEAP32[$7 + 376 >> 2];
  $10 = $6;
 }
 $12 = $27;
 $15 = $12;
 $6 = $0;
 HEAP32[$6 >> 2] = $16;
 $12 = $18;
 HEAP32[$6 + 4 >> 2] = $12;
 $17 = $10;
 HEAP32[$6 + 8 >> 2] = $17;
 $12 = $15;
 HEAP32[$6 + 12 >> 2] = $12;
 $0 = $7 + 8960 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $11 = global$0 - 560 | 0;
 $18 = $11;
 if ($11 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $18;
 HEAP32[$11 + 548 >> 2] = $10;
 HEAP32[$11 + 552 >> 2] = $1;
 HEAP32[$11 + 96 >> 2] = 167;
 $15 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20int__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($11 + 136 | 0, $11 + 144 | 0, $11 + 96 | 0);
 $1 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15);
 HEAP32[$11 + 132 >> 2] = $1;
 HEAP32[$11 + 128 >> 2] = $1 + 400;
 $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 96 | 0);
 $14 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 + 80 | 0);
 $12 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 - -64 | 0);
 $13 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 + 48 | 0);
 $16 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 + 32 | 0);
 std____2____money_get_wchar_t_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($2, $3, $11 + 120 | 0, $11 + 116 | 0, $11 + 112 | 0, $17, $14, $12, $13, $11 + 28 | 0);
 wasm2js_i32$0 = $9, wasm2js_i32$1 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($8), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $19 = $4 & 512;
 $1 = 0;
 $4 = 0;
 while (1) {
  $10 = $4;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (($1 | 0) == 4) {
       break label$6;
      }
      if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $11 + 552 | 0)) {
       break label$6;
      }
      $2 = HEAP8[($11 + 120 | 0) + $1 | 0];
      if ($2 >>> 0 > 4) {
       break label$4;
      }
      $4 = 0;
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           switch ($2 - 1 | 0) {
           case 0:
            if (($1 | 0) == 3) {
             break label$4;
            }
            if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($7, 8192, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0))) {
             std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28int_29($11 + 16 | 0, $0, 0);
             std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($16, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____proxy__operator__28_29_20const($11 + 16 | 0));
             break label$10;
            }
            HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
            $0 = 0;
            break label$5;
           case 3:
            break label$7;
           case 1:
            break label$8;
           case 2:
            break label$9;
           default:
            break label$11;
           }
          }
          if (($1 | 0) == 3) {
           break label$4;
          }
         }
         while (1) {
          if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $11 + 552 | 0)) {
           break label$4;
          }
          if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($7, 8192, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0))) {
           break label$4;
          }
          std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28int_29($11 + 16 | 0, $0, 0);
          std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($16, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____proxy__operator__28_29_20const($11 + 16 | 0));
          continue;
         }
        }
        if ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($12) | 0) == (0 - std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($13) | 0)) {
         break label$4;
        }
        label$15 : {
         if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($12)) {
          if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($13)) {
           break label$15;
          }
         }
         $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($12);
         $2 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
         if ($4) {
          if (HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29($12, 0) >> 2] == ($2 | 0)) {
           std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
           $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $10;
           break label$3;
          }
          HEAP8[$6 | 0] = 1;
          break label$4;
         }
         if (HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29($13, 0) >> 2] != ($2 | 0)) {
          break label$4;
         }
         std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
         HEAP8[$6 | 0] = 1;
         $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $10;
         break label$3;
        }
        if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) | 0) == HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29($12, 0) >> 2]) {
         std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
         $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $10;
         break label$3;
        }
        if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) | 0) == HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29($13, 0) >> 2]) {
         std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
         HEAP8[$6 | 0] = 1;
         $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $10;
         break label$3;
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        $0 = 0;
        break label$5;
       }
       if (!($19 | ($10 | $1 >>> 0 < 2))) {
        if (!(($1 | 0) == 2 & HEAPU8[$11 + 123 | 0] != 0)) {
         break label$3;
        }
       }
       wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($14), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
       $4 = std____2____wrap_iter_wchar_t_20const______wrap_iter_wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2__enable_if_is_convertible_wchar_t__2c_20wchar_t_20const____value_2c_20void___type__29($11 + 16 | 0, $11 + 8 | 0, 0);
       label$22 : {
        if (!$1 | HEAPU8[($1 + $11 | 0) + 119 | 0] > 1) {
         break label$22;
        }
        while (1) {
         label$24 : {
          wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($14), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
          if (!bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($4, $11 + 8 | 0)) {
           break label$24;
          }
          if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($7, 8192, HEAP32[std____2____wrap_iter_wchar_t_20const____operator__28_29_20const($4) >> 2])) {
           break label$24;
          }
          std____2____wrap_iter_wchar_t_20const____operator___28_29($4);
          continue;
         }
         break;
        }
        wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($14), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
        $4 = decltype_28_28fp_base_28_29_29_20__20_28fp0_base_28_29_29_29_20std____2__operator__wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($4, $11 + 8 | 0);
        if ($4 >>> 0 <= std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($16) >>> 0) {
         wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($16), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         if (bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___29(std____2____wrap_iter_wchar_t____operator__28long_29_20const($11 + 8 | 0, $4), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($16), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($14))) {
          break label$22;
         }
        }
        wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($14), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        std____2____wrap_iter_wchar_t_20const______wrap_iter_wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2__enable_if_is_convertible_wchar_t__2c_20wchar_t_20const____value_2c_20void___type__29($11 + 8 | 0, $11, 0);
        HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 8 >> 2];
       }
       HEAP32[$11 + 8 >> 2] = HEAP32[$11 + 16 >> 2];
       while (1) {
        label$27 : {
         wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($14), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         if (!bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($11 + 8 | 0, $11)) {
          break label$27;
         }
         if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $11 + 552 | 0)) {
          break label$27;
         }
         if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) | 0) != HEAP32[std____2____wrap_iter_wchar_t_20const____operator__28_29_20const($11 + 8 | 0) >> 2]) {
          break label$27;
         }
         std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
         std____2____wrap_iter_wchar_t_20const____operator___28_29($11 + 8 | 0);
         continue;
        }
        break;
       }
       if (!$19) {
        break label$4;
       }
       wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($14), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       if (!bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($11 + 8 | 0, $11)) {
        break label$4;
       }
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
       $0 = 0;
       break label$5;
      }
      while (1) {
       label$29 : {
        if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $11 + 552 | 0)) {
         break label$29;
        }
        $2 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
        label$30 : {
         if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($7, 2048, $2)) {
          $3 = HEAP32[$9 >> 2];
          if (($3 | 0) == HEAP32[$11 + 548 >> 2]) {
           void_20std____2____double_or_nothing_wchar_t__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t___29($8, $9, $11 + 548 | 0);
           $3 = HEAP32[$9 >> 2];
          }
          HEAP32[$9 >> 2] = $3 + 4;
          HEAP32[$3 >> 2] = $2;
          $4 = $4 + 1 | 0;
          break label$30;
         }
         $18 = !$4;
         $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($17);
         if ($18 | !$3 | HEAP32[$11 + 112 >> 2] != ($2 | 0)) {
          break label$29;
         }
         $2 = HEAP32[$11 + 132 >> 2];
         if (($2 | 0) == HEAP32[$11 + 128 >> 2]) {
          void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 132 | 0, $11 + 128 | 0);
          $2 = HEAP32[$11 + 132 >> 2];
         }
         HEAP32[$11 + 132 >> 2] = $2 + 4;
         HEAP32[$2 >> 2] = $4;
         $4 = 0;
        }
        std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
        continue;
       }
       break;
      }
      $3 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15);
      label$34 : {
       if (!$4) {
        break label$34;
       }
       $2 = HEAP32[$11 + 132 >> 2];
       if (($3 | 0) == ($2 | 0)) {
        break label$34;
       }
       if (HEAP32[$11 + 128 >> 2] == ($2 | 0)) {
        void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 132 | 0, $11 + 128 | 0);
        $2 = HEAP32[$11 + 132 >> 2];
       }
       HEAP32[$11 + 132 >> 2] = $2 + 4;
       HEAP32[$2 >> 2] = $4;
      }
      label$36 : {
       if (HEAP32[$11 + 28 >> 2] < 1) {
        break label$36;
       }
       label$37 : {
        if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $11 + 552 | 0)) {
         if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) | 0) == HEAP32[$11 + 116 >> 2]) {
          break label$37;
         }
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        $0 = 0;
        break label$5;
       }
       while (1) {
        std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
        if (HEAP32[$11 + 28 >> 2] < 1) {
         break label$36;
        }
        label$40 : {
         if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $11 + 552 | 0)) {
          if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($7, 2048, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0))) {
           break label$40;
          }
         }
         HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
         $0 = 0;
         break label$5;
        }
        if (HEAP32[$9 >> 2] == HEAP32[$11 + 548 >> 2]) {
         void_20std____2____double_or_nothing_wchar_t__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t___29($8, $9, $11 + 548 | 0);
        }
        $4 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
        $2 = HEAP32[$9 >> 2];
        HEAP32[$9 >> 2] = $2 + 4;
        HEAP32[$2 >> 2] = $4;
        HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 28 >> 2] + -1;
        continue;
       }
      }
      $4 = $10;
      if (HEAP32[$9 >> 2] != (std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($8) | 0)) {
       break label$3;
      }
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      $0 = 0;
      break label$5;
     }
     label$43 : {
      if (!$10) {
       break label$43;
      }
      $4 = 1;
      while (1) {
       if ($4 >>> 0 >= std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($10) >>> 0) {
        break label$43;
       }
       label$45 : {
        if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $11 + 552 | 0)) {
         if ((std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) | 0) == HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($10, $4) >> 2]) {
          break label$45;
         }
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        $0 = 0;
        break label$5;
       }
       std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
       $4 = $4 + 1 | 0;
       continue;
      }
     }
     $0 = 1;
     if ((std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15) | 0) == HEAP32[$11 + 132 >> 2]) {
      break label$5;
     }
     $0 = 0;
     HEAP32[$11 + 16 >> 2] = 0;
     std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($17, std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15), HEAP32[$11 + 132 >> 2], $11 + 16 | 0);
     if (HEAP32[$11 + 16 >> 2]) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      break label$5;
     }
     $0 = 1;
    }
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($16);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($13);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($12);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($14);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($17);
    std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
    $1 = $11 + 560 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow();
    }
    global$0 = $1;
    return $0;
   }
   $4 = $10;
  }
  $1 = $1 + 1 | 0;
  continue;
 }
}
function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $11 = global$0 - 560 | 0;
 $18 = $11;
 if ($11 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $18;
 HEAP32[$11 + 548 >> 2] = $10;
 HEAP32[$11 + 552 >> 2] = $1;
 HEAP32[$11 + 104 >> 2] = 167;
 $15 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20int__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($11 + 136 | 0, $11 + 144 | 0, $11 + 104 | 0);
 $1 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15);
 HEAP32[$11 + 132 >> 2] = $1;
 HEAP32[$11 + 128 >> 2] = $1 + 400;
 $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 104 | 0);
 $14 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 88 | 0);
 $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 72 | 0);
 $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 56 | 0);
 $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 40 | 0);
 std____2____money_get_char_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($2, $3, $11 + 120 | 0, $11 + 119 | 0, $11 + 118 | 0, $17, $14, $12, $13, $11 + 36 | 0);
 wasm2js_i32$0 = $9, wasm2js_i32$1 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($8), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $19 = $4 & 512;
 $1 = 0;
 $4 = 0;
 while (1) {
  $10 = $4;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (($1 | 0) == 4) {
       break label$6;
      }
      if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $11 + 552 | 0)) {
       break label$6;
      }
      $2 = HEAP8[($11 + 120 | 0) + $1 | 0];
      if ($2 >>> 0 > 4) {
       break label$4;
      }
      $4 = 0;
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           switch ($2 - 1 | 0) {
           case 0:
            if (($1 | 0) == 3) {
             break label$4;
            }
            if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 8192, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0))) {
             std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28int_29($11 + 24 | 0, $0, 0);
             std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($16, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____proxy__operator__28_29_20const($11 + 24 | 0));
             break label$10;
            }
            HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
            $0 = 0;
            break label$5;
           case 3:
            break label$7;
           case 1:
            break label$8;
           case 2:
            break label$9;
           default:
            break label$11;
           }
          }
          if (($1 | 0) == 3) {
           break label$4;
          }
         }
         while (1) {
          if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $11 + 552 | 0)) {
           break label$4;
          }
          if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 8192, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0))) {
           break label$4;
          }
          std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28int_29($11 + 24 | 0, $0, 0);
          std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($16, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____proxy__operator__28_29_20const($11 + 24 | 0));
          continue;
         }
        }
        if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) | 0) == (0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) | 0)) {
         break label$4;
        }
        label$15 : {
         if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12)) {
          if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13)) {
           break label$15;
          }
         }
         $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12);
         $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
         if ($4) {
          if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($12, 0) | 0] == ($2 & 255)) {
           std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
           $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $10;
           break label$3;
          }
          HEAP8[$6 | 0] = 1;
          break label$4;
         }
         if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($13, 0) | 0] != ($2 & 255)) {
          break label$4;
         }
         std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
         HEAP8[$6 | 0] = 1;
         $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $10;
         break label$3;
        }
        if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) == HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($12, 0) | 0]) {
         std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
         $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $10;
         break label$3;
        }
        if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) == HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($13, 0) | 0]) {
         std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
         HEAP8[$6 | 0] = 1;
         $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $10;
         break label$3;
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        $0 = 0;
        break label$5;
       }
       if (!($19 | ($10 | $1 >>> 0 < 2))) {
        if (!(($1 | 0) == 2 & HEAPU8[$11 + 123 | 0] != 0)) {
         break label$3;
        }
       }
       wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
       $4 = std____2____wrap_iter_char_20const______wrap_iter_char___28std____2____wrap_iter_char___20const__2c_20std____2__enable_if_is_convertible_char__2c_20char_20const____value_2c_20void___type__29($11 + 24 | 0, $11 + 16 | 0, 0);
       label$22 : {
        if (!$1 | HEAPU8[($1 + $11 | 0) + 119 | 0] > 1) {
         break label$22;
        }
        while (1) {
         label$24 : {
          wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($14), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
          if (!bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($4, $11 + 16 | 0)) {
           break label$24;
          }
          if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 8192, HEAP8[std____2____wrap_iter_char_20const____operator__28_29_20const($4) | 0])) {
           break label$24;
          }
          std____2____wrap_iter_char_20const____operator___28_29($4);
          continue;
         }
         break;
        }
        wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
        $4 = decltype_28_28fp_base_28_29_29_20__20_28fp0_base_28_29_29_29_20std____2__operator__char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($4, $11 + 16 | 0);
        if ($4 >>> 0 <= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($16) >>> 0) {
         wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($16), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
         if (bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___29(std____2____wrap_iter_char____operator__28long_29_20const($11 + 16 | 0, $4), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($16), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14))) {
          break label$22;
         }
        }
        wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
        std____2____wrap_iter_char_20const______wrap_iter_char___28std____2____wrap_iter_char___20const__2c_20std____2__enable_if_is_convertible_char__2c_20char_20const____value_2c_20void___type__29($11 + 16 | 0, $11 + 8 | 0, 0);
        HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 16 >> 2];
       }
       HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 24 >> 2];
       while (1) {
        label$27 : {
         wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($14), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         if (!bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($11 + 16 | 0, $11 + 8 | 0)) {
          break label$27;
         }
         if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $11 + 552 | 0)) {
          break label$27;
         }
         if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) != HEAPU8[std____2____wrap_iter_char_20const____operator__28_29_20const($11 + 16 | 0) | 0]) {
          break label$27;
         }
         std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
         std____2____wrap_iter_char_20const____operator___28_29($11 + 16 | 0);
         continue;
        }
        break;
       }
       if (!$19) {
        break label$4;
       }
       wasm2js_i32$0 = $11, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($14), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
       if (!bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($11 + 16 | 0, $11 + 8 | 0)) {
        break label$4;
       }
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
       $0 = 0;
       break label$5;
      }
      while (1) {
       label$29 : {
        if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $11 + 552 | 0)) {
         break label$29;
        }
        $2 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
        label$30 : {
         if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 2048, $2)) {
          $3 = HEAP32[$9 >> 2];
          if (($3 | 0) == HEAP32[$11 + 548 >> 2]) {
           void_20std____2____double_or_nothing_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($8, $9, $11 + 548 | 0);
           $3 = HEAP32[$9 >> 2];
          }
          HEAP32[$9 >> 2] = $3 + 1;
          HEAP8[$3 | 0] = $2;
          $4 = $4 + 1 | 0;
          break label$30;
         }
         $18 = !$4;
         $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($17);
         if ($18 | !$3 | HEAPU8[$11 + 118 | 0] != ($2 & 255)) {
          break label$29;
         }
         $2 = HEAP32[$11 + 132 >> 2];
         if (($2 | 0) == HEAP32[$11 + 128 >> 2]) {
          void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 132 | 0, $11 + 128 | 0);
          $2 = HEAP32[$11 + 132 >> 2];
         }
         HEAP32[$11 + 132 >> 2] = $2 + 4;
         HEAP32[$2 >> 2] = $4;
         $4 = 0;
        }
        std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
        continue;
       }
       break;
      }
      $3 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15);
      label$34 : {
       if (!$4) {
        break label$34;
       }
       $2 = HEAP32[$11 + 132 >> 2];
       if (($3 | 0) == ($2 | 0)) {
        break label$34;
       }
       if (HEAP32[$11 + 128 >> 2] == ($2 | 0)) {
        void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($15, $11 + 132 | 0, $11 + 128 | 0);
        $2 = HEAP32[$11 + 132 >> 2];
       }
       HEAP32[$11 + 132 >> 2] = $2 + 4;
       HEAP32[$2 >> 2] = $4;
      }
      label$36 : {
       if (HEAP32[$11 + 36 >> 2] < 1) {
        break label$36;
       }
       label$37 : {
        if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $11 + 552 | 0)) {
         if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) == HEAPU8[$11 + 119 | 0]) {
          break label$37;
         }
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        $0 = 0;
        break label$5;
       }
       while (1) {
        std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
        if (HEAP32[$11 + 36 >> 2] < 1) {
         break label$36;
        }
        label$40 : {
         if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $11 + 552 | 0)) {
          if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 2048, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0))) {
           break label$40;
          }
         }
         HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
         $0 = 0;
         break label$5;
        }
        if (HEAP32[$9 >> 2] == HEAP32[$11 + 548 >> 2]) {
         void_20std____2____double_or_nothing_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($8, $9, $11 + 548 | 0);
        }
        $4 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
        $2 = HEAP32[$9 >> 2];
        HEAP32[$9 >> 2] = $2 + 1;
        HEAP8[$2 | 0] = $4;
        HEAP32[$11 + 36 >> 2] = HEAP32[$11 + 36 >> 2] + -1;
        continue;
       }
      }
      $4 = $10;
      if (HEAP32[$9 >> 2] != (std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($8) | 0)) {
       break label$3;
      }
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      $0 = 0;
      break label$5;
     }
     label$43 : {
      if (!$10) {
       break label$43;
      }
      $4 = 1;
      while (1) {
       if ($4 >>> 0 >= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) >>> 0) {
        break label$43;
       }
       label$45 : {
        if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $11 + 552 | 0)) {
         if ((std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) & 255) == HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($10, $4) | 0]) {
          break label$45;
         }
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
        $0 = 0;
        break label$5;
       }
       std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
       $4 = $4 + 1 | 0;
       continue;
      }
     }
     $0 = 1;
     if ((std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15) | 0) == HEAP32[$11 + 132 >> 2]) {
      break label$5;
     }
     $0 = 0;
     HEAP32[$11 + 24 >> 2] = 0;
     std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($17, std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($15), HEAP32[$11 + 132 >> 2], $11 + 24 | 0);
     if (HEAP32[$11 + 24 >> 2]) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      break label$5;
     }
     $0 = 1;
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($16);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($13);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($12);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($14);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($17);
    std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
    $1 = $11 + 560 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow();
    }
    global$0 = $1;
    return $0;
   }
   $4 = $10;
  }
  $1 = $1 + 1 | 0;
  continue;
 }
}
function printf_core($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $7 = global$0 - 80 | 0;
 $9 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 HEAP32[$7 + 76 >> 2] = $1;
 $22 = $7 + 55 | 0;
 $20 = $7 + 56 | 0;
 $1 = 0;
 label$2 : {
  label$3 : {
   label$4 : while (1) {
    label$5 : {
     if (($18 | 0) < 0) {
      break label$5;
     }
     if (($1 | 0) > (2147483647 - $18 | 0)) {
      wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 61, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      $18 = -1;
      break label$5;
     }
     $18 = $1 + $18 | 0;
    }
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               label$18 : {
                label$19 : {
                 $14 = HEAP32[$7 + 76 >> 2];
                 $1 = $14;
                 $8 = HEAPU8[$1 | 0];
                 if ($8) {
                  while (1) {
                   label$22 : {
                    label$23 : {
                     $8 = $8 & 255;
                     label$24 : {
                      if (!$8) {
                       $8 = $1;
                       break label$24;
                      }
                      if (($8 | 0) != 37) {
                       break label$23;
                      }
                      $8 = $1;
                      while (1) {
                       if (HEAPU8[$1 + 1 | 0] != 37) {
                        break label$24;
                       }
                       $9 = $1 + 2 | 0;
                       HEAP32[$7 + 76 >> 2] = $9;
                       $8 = $8 + 1 | 0;
                       $10 = HEAPU8[$1 + 2 | 0];
                       $1 = $9;
                       if (($10 | 0) == 37) {
                        continue;
                       }
                       break;
                      }
                     }
                     $1 = $8 - $14 | 0;
                     if ($0) {
                      out($0, $14, $1);
                     }
                     if ($1) {
                      continue label$4;
                     }
                     $19 = -1;
                     $8 = 1;
                     $9 = isdigit(HEAP8[HEAP32[$7 + 76 >> 2] + 1 | 0]);
                     $1 = HEAP32[$7 + 76 >> 2];
                     if (!(!$9 | HEAPU8[$1 + 2 | 0] != 36)) {
                      $19 = HEAP8[$1 + 1 | 0] + -48 | 0;
                      $21 = 1;
                      $8 = 3;
                     }
                     $1 = $1 + $8 | 0;
                     HEAP32[$7 + 76 >> 2] = $1;
                     $8 = 0;
                     $16 = HEAP8[$1 | 0];
                     $10 = $16 + -32 | 0;
                     label$29 : {
                      if ($10 >>> 0 > 31) {
                       $9 = $1;
                       break label$29;
                      }
                      $9 = $1;
                      $10 = 1 << $10;
                      if (!($10 & 75913)) {
                       break label$29;
                      }
                      while (1) {
                       $9 = $1 + 1 | 0;
                       HEAP32[$7 + 76 >> 2] = $9;
                       $8 = $8 | $10;
                       $16 = HEAP8[$1 + 1 | 0];
                       $10 = $16 + -32 | 0;
                       if ($10 >>> 0 > 31) {
                        break label$29;
                       }
                       $1 = $9;
                       $10 = 1 << $10;
                       if ($10 & 75913) {
                        continue;
                       }
                       break;
                      }
                     }
                     label$32 : {
                      if (($16 | 0) == 42) {
                       $11 = $7;
                       label$34 : {
                        label$35 : {
                         if (!isdigit(HEAP8[$9 + 1 | 0])) {
                          break label$35;
                         }
                         $9 = HEAP32[$7 + 76 >> 2];
                         if (HEAPU8[$9 + 2 | 0] != 36) {
                          break label$35;
                         }
                         HEAP32[((HEAP8[$9 + 1 | 0] << 2) + $4 | 0) + -192 >> 2] = 10;
                         $17 = HEAP32[((HEAP8[$9 + 1 | 0] << 3) + $3 | 0) + -384 >> 2];
                         $21 = 1;
                         $1 = $9 + 3 | 0;
                         break label$34;
                        }
                        if ($21) {
                         break label$3;
                        }
                        $21 = 0;
                        $17 = 0;
                        if ($0) {
                         $1 = HEAP32[$2 >> 2];
                         HEAP32[$2 >> 2] = $1 + 4;
                         $17 = HEAP32[$1 >> 2];
                        }
                        $1 = HEAP32[$7 + 76 >> 2] + 1 | 0;
                       }
                       HEAP32[$11 + 76 >> 2] = $1;
                       if (($17 | 0) > -1) {
                        break label$32;
                       }
                       $17 = 0 - $17 | 0;
                       $8 = $8 | 8192;
                       break label$32;
                      }
                      $17 = getint($7 + 76 | 0);
                      if (($17 | 0) < 0) {
                       break label$3;
                      }
                      $1 = HEAP32[$7 + 76 >> 2];
                     }
                     $13 = -1;
                     label$37 : {
                      if (HEAPU8[$1 | 0] != 46) {
                       break label$37;
                      }
                      if (HEAPU8[$1 + 1 | 0] == 42) {
                       label$39 : {
                        if (!isdigit(HEAP8[$1 + 2 | 0])) {
                         break label$39;
                        }
                        $1 = HEAP32[$7 + 76 >> 2];
                        if (HEAPU8[$1 + 3 | 0] != 36) {
                         break label$39;
                        }
                        HEAP32[((HEAP8[$1 + 2 | 0] << 2) + $4 | 0) + -192 >> 2] = 10;
                        $13 = HEAP32[((HEAP8[$1 + 2 | 0] << 3) + $3 | 0) + -384 >> 2];
                        $1 = $1 + 4 | 0;
                        HEAP32[$7 + 76 >> 2] = $1;
                        break label$37;
                       }
                       if ($21) {
                        break label$3;
                       }
                       if ($0) {
                        $1 = HEAP32[$2 >> 2];
                        HEAP32[$2 >> 2] = $1 + 4;
                        $13 = HEAP32[$1 >> 2];
                       } else {
                        $13 = 0;
                       }
                       $1 = HEAP32[$7 + 76 >> 2] + 2 | 0;
                       HEAP32[$7 + 76 >> 2] = $1;
                       break label$37;
                      }
                      HEAP32[$7 + 76 >> 2] = $1 + 1;
                      $13 = getint($7 + 76 | 0);
                      $1 = HEAP32[$7 + 76 >> 2];
                     }
                     $9 = 0;
                     while (1) {
                      $10 = $9;
                      $15 = -1;
                      if (HEAP8[$1 | 0] + -65 >>> 0 > 57) {
                       break label$2;
                      }
                      $16 = $1 + 1 | 0;
                      HEAP32[$7 + 76 >> 2] = $16;
                      $9 = HEAP8[$1 | 0];
                      $1 = $16;
                      $9 = HEAPU8[(Math_imul($10, 58) + $9 | 0) + 9231 | 0];
                      if ($9 + -1 >>> 0 < 8) {
                       continue;
                      }
                      break;
                     }
                     if (!$9) {
                      break label$2;
                     }
                     label$43 : {
                      label$44 : {
                       label$45 : {
                        if (($9 | 0) == 19) {
                         if (($19 | 0) <= -1) {
                          break label$45;
                         }
                         break label$2;
                        }
                        if (($19 | 0) < 0) {
                         break label$44;
                        }
                        HEAP32[($19 << 2) + $4 >> 2] = $9;
                        $1 = ($19 << 3) + $3 | 0;
                        $11 = HEAP32[$1 >> 2];
                        $12 = HEAP32[$1 + 4 >> 2];
                        HEAP32[$7 + 64 >> 2] = $11;
                        HEAP32[$7 + 68 >> 2] = $12;
                       }
                       $1 = 0;
                       if (!$0) {
                        continue label$4;
                       }
                       break label$43;
                      }
                      if (!$0) {
                       break label$7;
                      }
                      pop_arg($7 - -64 | 0, $9, $2, $6);
                      $16 = HEAP32[$7 + 76 >> 2];
                     }
                     $12 = $8 & -65537;
                     $8 = $8 & 8192 ? $12 : $8;
                     $15 = 0;
                     $19 = 9273;
                     $9 = $20;
                     $1 = HEAP8[$16 + -1 | 0];
                     $1 = $10 ? ($1 & 15) == 3 ? $1 & -33 : $1 : $1;
                     $16 = $1 + -88 | 0;
                     if ($16 >>> 0 <= 32) {
                      break label$22;
                     }
                     label$47 : {
                      label$48 : {
                       label$49 : {
                        label$50 : {
                         $10 = $1 + -65 | 0;
                         if ($10 >>> 0 > 6) {
                          if (($1 | 0) != 83) {
                           break label$8;
                          }
                          if (!$13) {
                           break label$50;
                          }
                          $9 = HEAP32[$7 + 64 >> 2];
                          break label$48;
                         }
                         switch ($10 - 1 | 0) {
                         case 1:
                          break label$49;
                         case 0:
                         case 2:
                          break label$8;
                         default:
                          break label$19;
                         }
                        }
                        $1 = 0;
                        pad($0, 32, $17, 0, $8);
                        break label$47;
                       }
                       HEAP32[$7 + 12 >> 2] = 0;
                       $7;
                       $12 = HEAP32[$7 + 64 >> 2];
                       HEAP32[$7 + 8 >> 2] = $12;
                       HEAP32[$7 + 64 >> 2] = $7 + 8;
                       $13 = -1;
                       $9 = $7 + 8 | 0;
                      }
                      $1 = 0;
                      label$52 : {
                       while (1) {
                        $10 = HEAP32[$9 >> 2];
                        if (!$10) {
                         break label$52;
                        }
                        $10 = wctomb($7 + 4 | 0, $10);
                        $14 = ($10 | 0) < 0;
                        if (!($14 | $10 >>> 0 > $13 - $1 >>> 0)) {
                         $9 = $9 + 4 | 0;
                         $1 = $1 + $10 | 0;
                         if ($13 >>> 0 > $1 >>> 0) {
                          continue;
                         }
                         break label$52;
                        }
                        break;
                       }
                       $15 = -1;
                       if ($14) {
                        break label$2;
                       }
                      }
                      pad($0, 32, $17, $1, $8);
                      if (!$1) {
                       $1 = 0;
                       break label$47;
                      }
                      $10 = 0;
                      $9 = HEAP32[$7 + 64 >> 2];
                      while (1) {
                       $14 = HEAP32[$9 >> 2];
                       if (!$14) {
                        break label$47;
                       }
                       $14 = wctomb($7 + 4 | 0, $14);
                       $10 = $14 + $10 | 0;
                       if (($10 | 0) > ($1 | 0)) {
                        break label$47;
                       }
                       out($0, $7 + 4 | 0, $14);
                       $9 = $9 + 4 | 0;
                       if ($10 >>> 0 < $1 >>> 0) {
                        continue;
                       }
                       break;
                      }
                     }
                     pad($0, 32, $17, $1, $8 ^ 8192);
                     $1 = ($17 | 0) > ($1 | 0) ? $17 : $1;
                     continue label$4;
                    }
                    $9 = $1 + 1 | 0;
                    HEAP32[$7 + 76 >> 2] = $9;
                    $8 = HEAPU8[$1 + 1 | 0];
                    $1 = $9;
                    continue;
                   }
                   break;
                  }
                  switch ($16 - 1 | 0) {
                  case 28:
                   break label$11;
                  case 21:
                   break label$12;
                  case 23:
                   break label$14;
                  case 22:
                   break label$15;
                  case 11:
                  case 16:
                   break label$16;
                  case 10:
                   break label$17;
                  case 26:
                   break label$18;
                  case 8:
                  case 12:
                  case 13:
                  case 14:
                   break label$19;
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 9:
                  case 15:
                  case 17:
                  case 18:
                  case 19:
                  case 20:
                  case 24:
                  case 25:
                  case 27:
                  case 29:
                  case 30:
                   break label$8;
                  default:
                   break label$13;
                  }
                 }
                 $15 = $18;
                 if ($0) {
                  break label$2;
                 }
                 if (!$21) {
                  break label$7;
                 }
                 $1 = 1;
                 while (1) {
                  $8 = HEAP32[($1 << 2) + $4 >> 2];
                  if ($8) {
                   pop_arg(($1 << 3) + $3 | 0, $8, $2, $6);
                   $15 = 1;
                   $1 = $1 + 1 | 0;
                   if (($1 | 0) != 10) {
                    continue;
                   }
                   break label$2;
                  }
                  break;
                 }
                 $15 = 1;
                 if ($1 >>> 0 > 9) {
                  break label$2;
                 }
                 while (1) {
                  $8 = $1;
                  $1 = $1 + 1 | 0;
                  if (HEAP32[($1 << 2) + $4 >> 2] ? 0 : ($1 | 0) != 10) {
                   continue;
                  }
                  break;
                 }
                 $15 = $8 >>> 0 < 9 ? -1 : 1;
                 break label$2;
                }
                $1 = FUNCTION_TABLE[$5]($0, HEAPF64[$7 + 64 >> 3], $17, $13, $8, $1) | 0;
                continue;
               }
               $1 = HEAP32[$7 + 64 >> 2];
               $14 = $1 ? $1 : 9283;
               $1 = memchr($14, 0, $13);
               $9 = $1 ? $1 : $13 + $14 | 0;
               $8 = $12;
               $13 = $1 ? $1 - $14 | 0 : $13;
               break label$8;
              }
              $7;
              $11 = HEAP32[$7 + 64 >> 2];
              HEAP8[$7 + 55 | 0] = $11;
              $13 = 1;
              $14 = $22;
              $8 = $12;
              break label$8;
             }
             $12 = HEAP32[$7 + 64 >> 2];
             $10 = $12;
             $11 = HEAP32[$7 + 68 >> 2];
             $1 = $11;
             if (($11 | 0) < -1 ? 1 : ($11 | 0) <= -1 ? $10 >>> 0 > 4294967295 ? 0 : 1 : 0) {
              $12 = $10;
              $10 = 0 - $10 | 0;
              $11 = $1;
              $11 = $11 + (0 < $12 >>> 0) | 0;
              $11 = 0 - $11 | 0;
              $1 = $11;
              HEAP32[$7 + 64 >> 2] = $10;
              HEAP32[$7 + 68 >> 2] = $11;
              $15 = 1;
              $19 = 9273;
              break label$10;
             }
             if ($8 & 2048) {
              $15 = 1;
              $19 = 9274;
              break label$10;
             }
             $15 = $8 & 1;
             $19 = $15 ? 9275 : 9273;
             break label$10;
            }
            $11 = HEAP32[$7 + 64 >> 2];
            $12 = HEAP32[$7 + 68 >> 2];
            $14 = fmt_o($11, $12, $20);
            if (!($8 & 8)) {
             break label$9;
            }
            $1 = $20 - $14 | 0;
            $13 = ($13 | 0) > ($1 | 0) ? $13 : $1 + 1 | 0;
            break label$9;
           }
           $13 = $13 >>> 0 > 8 ? $13 : 8;
           $8 = $8 | 8;
           $1 = 120;
          }
          $12 = HEAP32[$7 + 64 >> 2];
          $11 = HEAP32[$7 + 68 >> 2];
          $14 = fmt_x($12, $11, $20, $1 & 32);
          if (!($8 & 8)) {
           break label$9;
          }
          $11 = HEAP32[$7 + 64 >> 2];
          $12 = HEAP32[$7 + 68 >> 2];
          if (!($11 | $12)) {
           break label$9;
          }
          $19 = ($1 >>> 4 | 0) + 9273 | 0;
          $15 = 2;
          break label$9;
         }
         $1 = 0;
         $8 = $10 & 255;
         if ($8 >>> 0 > 7) {
          continue;
         }
         label$63 : {
          switch ($8 - 1 | 0) {
          default:
           HEAP32[HEAP32[$7 + 64 >> 2] >> 2] = $18;
           continue;
          case 0:
           HEAP32[HEAP32[$7 + 64 >> 2] >> 2] = $18;
           continue;
          case 1:
           $11 = $18;
           $12 = $11 >> 31;
           $11 = HEAP32[$7 + 64 >> 2];
           HEAP32[$11 >> 2] = $18;
           HEAP32[$11 + 4 >> 2] = $12;
           continue;
          case 2:
           HEAP16[HEAP32[$7 + 64 >> 2] >> 1] = $18;
           continue;
          case 3:
           HEAP8[HEAP32[$7 + 64 >> 2]] = $18;
           continue;
          case 5:
           HEAP32[HEAP32[$7 + 64 >> 2] >> 2] = $18;
           continue;
          case 4:
           continue;
          case 6:
           break label$63;
          }
         }
         $11 = $18;
         $12 = $11 >> 31;
         $11 = HEAP32[$7 + 64 >> 2];
         HEAP32[$11 >> 2] = $18;
         HEAP32[$11 + 4 >> 2] = $12;
         continue;
        }
        $12 = HEAP32[$7 + 64 >> 2];
        $10 = $12;
        $11 = HEAP32[$7 + 68 >> 2];
        $1 = $11;
        $19 = 9273;
       }
       $11 = $1;
       $14 = fmt_u($10, $11, $20);
      }
      $8 = ($13 | 0) > -1 ? $8 & -65537 : $8;
      $11 = HEAP32[$7 + 64 >> 2];
      $10 = $11;
      $12 = HEAP32[$7 + 68 >> 2];
      $1 = $12;
      label$70 : {
       label$71 : {
        if ($13) {
         break label$71;
        }
        $12 = $1;
        if ($12 | $10) {
         break label$71;
        }
        $14 = $20;
        $13 = 0;
        break label$70;
       }
       $12 = $1;
       $1 = !($12 | $10) + ($20 - $14 | 0) | 0;
       $13 = ($13 | 0) > ($1 | 0) ? $13 : $1;
      }
     }
     $10 = $9 - $14 | 0;
     $16 = ($13 | 0) < ($10 | 0) ? $10 : $13;
     $9 = $16 + $15 | 0;
     $1 = ($17 | 0) < ($9 | 0) ? $9 : $17;
     pad($0, 32, $1, $9, $8);
     out($0, $19, $15);
     pad($0, 48, $1, $9, $8 ^ 65536);
     pad($0, 48, $16, $10, 0);
     out($0, $14, $10);
     pad($0, 32, $1, $9, $8 ^ 8192);
     continue;
    }
    break;
   }
   $15 = 0;
   break label$2;
  }
  $15 = -1;
 }
 $0 = $7 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $15;
}
function vfscanf($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f64$0 = 0;
 $8 = global$0 - 304 | 0;
 $5 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 if (HEAP32[$0 + 76 >> 2] >= 0) {
  $23 = __lockfile($0);
 }
 $6 = HEAPU8[$1 | 0];
 label$3 : {
  if (!$6) {
   break label$3;
  }
  label$4 : {
   while (1) {
    label$6 : {
     label$7 : {
      if (isspace($6 & 255)) {
       while (1) {
        $6 = $1;
        $1 = $1 + 1 | 0;
        if (isspace(HEAPU8[$6 + 1 | 0])) {
         continue;
        }
        break;
       }
       __shlim($0, 0, 0);
       while (1) {
        $1 = HEAP32[$0 + 4 >> 2];
        label$11 : {
         if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $1 + 1;
          $1 = HEAPU8[$1 | 0];
          break label$11;
         }
         $1 = __shgetc($0);
        }
        if (isspace($1)) {
         continue;
        }
        break;
       }
       label$13 : {
        if (!HEAP32[$0 + 104 >> 2]) {
         $1 = HEAP32[$0 + 4 >> 2];
         break label$13;
        }
        $1 = HEAP32[$0 + 4 >> 2] + -1 | 0;
        HEAP32[$0 + 4 >> 2] = $1;
       }
       $7 = $1 - HEAP32[$0 + 8 >> 2] | 0;
       $5 = $7 >> 31;
       $13 = $7;
       $14 = $5;
       $5 = HEAP32[$0 + 120 >> 2];
       $10 = $18;
       $3 = $5 + $10 | 0;
       $5 = $19;
       $7 = HEAP32[$0 + 124 >> 2];
       $4 = $5 + $7 | 0;
       $1 = $3;
       $4 = $3 >>> 0 < $10 >>> 0 ? $4 + 1 | 0 : $4;
       $9 = $4;
       $4 = $14;
       $3 = $9 + $4 | 0;
       $7 = $13;
       $10 = $1;
       $5 = $7 + $10 | 0;
       if ($5 >>> 0 < $10 >>> 0) {
        $3 = $3 + 1 | 0;
       }
       $18 = $5;
       $19 = $3;
       break label$7;
      }
      label$15 : {
       label$16 : {
        label$17 : {
         $6 = HEAPU8[$1 | 0];
         if (($6 | 0) == 37) {
          $3 = HEAPU8[$1 + 1 | 0];
          if (($3 | 0) == 42) {
           break label$17;
          }
          if (($3 | 0) != 37) {
           break label$16;
          }
         }
         __shlim($0, 0, 0);
         $6 = (($6 | 0) == 37) + $1 | 0;
         $1 = HEAP32[$0 + 4 >> 2];
         label$19 : {
          if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $1 + 1;
           $1 = HEAPU8[$1 | 0];
           break label$19;
          }
          $1 = __shgetc($0);
         }
         if (($1 | 0) != HEAPU8[$6 | 0]) {
          if (HEAP32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
          }
          $20 = 0;
          if (($1 | 0) >= 0) {
           break label$3;
          }
          break label$6;
         }
         $3 = $19;
         $5 = $3;
         $4 = $18;
         $9 = $4 + 1 | 0;
         if ($9 >>> 0 < 1) {
          $5 = $5 + 1 | 0;
         }
         $18 = $9;
         $19 = $5;
         break label$7;
        }
        $6 = $1 + 2 | 0;
        $11 = 0;
        break label$15;
       }
       if (!(!isdigit($3) | HEAPU8[$1 + 2 | 0] != 36)) {
        $6 = $1 + 3 | 0;
        $11 = arg_n($2, HEAPU8[$1 + 1 | 0] + -48 | 0);
        break label$15;
       }
       $6 = $1 + 1 | 0;
       $11 = HEAP32[$2 >> 2];
       $2 = $2 + 4 | 0;
      }
      $20 = 0;
      $1 = 0;
      if (isdigit(HEAPU8[$6 | 0])) {
       while (1) {
        $1 = (HEAPU8[$6 | 0] + Math_imul($1, 10) | 0) + -48 | 0;
        $3 = HEAPU8[$6 + 1 | 0];
        $6 = $6 + 1 | 0;
        if (isdigit($3)) {
         continue;
        }
        break;
       }
      }
      $4 = HEAPU8[$6 | 0];
      $3 = $6;
      label$26 : {
       if (($4 | 0) != 109) {
        break label$26;
       }
       $15 = 0;
       $20 = ($11 | 0) != 0;
       $4 = HEAPU8[$6 + 1 | 0];
       $16 = 0;
       $3 = $6 + 1 | 0;
      }
      $12 = ($4 & 255) + -65 | 0;
      if ($12 >>> 0 > 57) {
       break label$6;
      }
      $6 = $3 + 1 | 0;
      $4 = 3;
      label$27 : {
       label$28 : {
        switch ($12 - 1 | 0) {
        case 38:
         $5 = $3 + 2 | 0;
         $3 = HEAPU8[$3 + 1 | 0] == 104;
         $6 = $3 ? $5 : $6;
         $4 = $3 ? -2 : -1;
         break label$27;
        case 42:
         $5 = $3 + 2 | 0;
         $3 = HEAPU8[$3 + 1 | 0] == 108;
         $6 = $3 ? $5 : $6;
         $4 = $3 ? 3 : 1;
         break label$27;
        case 50:
        case 56:
         $4 = 1;
         break label$27;
        case 10:
         $4 = 2;
         break label$27;
        case 40:
         break label$27;
        case 0:
        case 2:
        case 6:
        case 7:
        case 8:
        case 9:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 23:
        case 24:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 32:
        case 41:
        case 43:
        case 47:
        case 48:
        case 52:
        case 53:
        case 55:
         break label$6;
        default:
         break label$28;
        }
       }
       $4 = 0;
       $6 = $3;
      }
      $3 = HEAPU8[$6 | 0];
      $12 = ($3 & 47) == 3;
      $21 = $12 ? 1 : $4;
      $17 = $12 ? $3 | 32 : $3;
      label$33 : {
       if (($17 | 0) == 91) {
        break label$33;
       }
       label$34 : {
        if (($17 | 0) != 110) {
         if (($17 | 0) != 99) {
          break label$34;
         }
         $1 = ($1 | 0) > 1 ? $1 : 1;
         break label$33;
        }
        $5 = $19;
        store_int($11, $21, $18, $5);
        break label$7;
       }
       __shlim($0, 0, 0);
       while (1) {
        $3 = HEAP32[$0 + 4 >> 2];
        label$37 : {
         if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $3 + 1;
          $3 = HEAPU8[$3 | 0];
          break label$37;
         }
         $3 = __shgetc($0);
        }
        if (isspace($3)) {
         continue;
        }
        break;
       }
       label$39 : {
        if (!HEAP32[$0 + 104 >> 2]) {
         $3 = HEAP32[$0 + 4 >> 2];
         break label$39;
        }
        $3 = HEAP32[$0 + 4 >> 2] + -1 | 0;
        HEAP32[$0 + 4 >> 2] = $3;
       }
       $4 = $3 - HEAP32[$0 + 8 >> 2] | 0;
       $5 = $4 >> 31;
       $13 = $4;
       $14 = $5;
       $10 = $18;
       $5 = HEAP32[$0 + 120 >> 2];
       $7 = $10 + $5 | 0;
       $5 = $19;
       $4 = HEAP32[$0 + 124 >> 2];
       $9 = $5 + $4 | 0;
       $5 = $7;
       $9 = $7 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
       $3 = $9;
       $9 = $14;
       $7 = $9 + $3 | 0;
       $10 = $5;
       $4 = $13;
       $5 = $10 + $4 | 0;
       if ($5 >>> 0 < $10 >>> 0) {
        $7 = $7 + 1 | 0;
       }
       $18 = $5;
       $19 = $7;
      }
      $7 = $1 >> 31;
      $14 = $7;
      $13 = $1;
      __shlim($0, $1, $7);
      $4 = HEAP32[$0 + 4 >> 2];
      $3 = HEAP32[$0 + 104 >> 2];
      label$41 : {
       if ($4 >>> 0 < $3 >>> 0) {
        HEAP32[$0 + 4 >> 2] = $4 + 1;
        break label$41;
       }
       if ((__shgetc($0) | 0) < 0) {
        break label$6;
       }
       $3 = HEAP32[$0 + 104 >> 2];
      }
      if ($3) {
       HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
      }
      label$44 : {
       label$45 : {
        $3 = $17 + -88 | 0;
        if ($3 >>> 0 > 32) {
         $1 = $17 + -65 | 0;
         if ($1 >>> 0 > 6 | !(1 << $1 & 113)) {
          break label$44;
         }
         break label$45;
        }
        $4 = 16;
        label$47 : {
         label$48 : {
          label$49 : {
           switch ($3 - 1 | 0) {
           case 16:
            $4 = 0;
            break label$48;
           case 11:
           case 28:
            $4 = 10;
            break label$48;
           case 0:
           case 1:
           case 3:
           case 4:
           case 5:
           case 6:
           case 7:
           case 9:
           case 15:
           case 17:
           case 18:
           case 19:
           case 20:
           case 21:
           case 24:
           case 25:
           case 27:
           case 29:
           case 30:
            break label$44;
           case 8:
           case 12:
           case 13:
           case 14:
            break label$45;
           case 2:
           case 10:
           case 26:
            break label$47;
           case 22:
            break label$49;
           default:
            break label$48;
           }
          }
          $4 = 8;
         }
         $7 = __intscan($0, $4, 0, -1, -1);
         $13 = $7;
         $4 = i64toi32_i32$HIGH_BITS;
         $14 = $4;
         $4 = HEAP32[$0 + 120 >> 2];
         $12 = $4;
         $7 = HEAP32[$0 + 124 >> 2];
         $1 = $7;
         $4 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
         $7 = $4 >> 31;
         $10 = $4;
         $3 = 0 - $4 | 0;
         $4 = $7;
         $5 = $4 + (0 < $10 >>> 0) | 0;
         $5 = 0 - $5 | 0;
         $9 = $5;
         $7 = $12;
         $5 = $1;
         if (($7 | 0) == ($3 | 0) & ($5 | 0) == ($9 | 0)) {
          break label$4;
         }
         if (!(!$11 | ($17 | 0) != 112)) {
          HEAP32[$11 >> 2] = $13;
          break label$44;
         }
         $7 = $14;
         store_int($11, $21, $13, $7);
         break label$44;
        }
        label$53 : {
         if (($17 & 239) == 99) {
          memset($8 + 32 | 0, -1, 257);
          HEAP8[$8 + 32 | 0] = 0;
          if (($17 | 0) != 115) {
           break label$53;
          }
          HEAP8[$8 + 65 | 0] = 0;
          HEAP8[$8 + 46 | 0] = 0;
          HEAP16[$8 + 42 >> 1] = 0;
          HEAP16[$8 + 44 >> 1] = 0;
          break label$53;
         }
         $4 = HEAPU8[$6 + 1 | 0];
         $3 = ($4 | 0) == 94;
         memset($8 + 32 | 0, $3, 257);
         HEAP8[$8 + 32 | 0] = 0;
         $12 = $3 ? $6 + 2 | 0 : $6 + 1 | 0;
         label$55 : {
          label$56 : {
           label$57 : {
            $6 = HEAPU8[($3 ? 2 : 1) + $6 | 0];
            if (($6 | 0) != 45) {
             if (($6 | 0) == 93) {
              break label$57;
             }
             $4 = ($4 | 0) != 94;
             $6 = $12;
             break label$55;
            }
            $4 = ($4 | 0) != 94;
            HEAP8[$8 + 78 | 0] = $4;
            break label$56;
           }
           $4 = ($4 | 0) != 94;
           HEAP8[$8 + 126 | 0] = $4;
          }
          $6 = $12 + 1 | 0;
         }
         while (1) {
          $3 = HEAPU8[$6 | 0];
          label$60 : {
           if (($3 | 0) != 45) {
            if (!$3) {
             break label$6;
            }
            if (($3 | 0) != 93) {
             break label$60;
            }
            break label$53;
           }
           $3 = 45;
           $5 = HEAPU8[$6 + 1 | 0];
           if (!$5 | ($5 | 0) == 93) {
            break label$60;
           }
           $12 = $6 + 1 | 0;
           $6 = HEAPU8[$6 + -1 | 0];
           label$62 : {
            if ($6 >>> 0 >= $5 >>> 0) {
             $3 = $5;
             break label$62;
            }
            while (1) {
             $6 = $6 + 1 | 0;
             HEAP8[$6 + ($8 + 32 | 0) | 0] = $4;
             $3 = HEAPU8[$12 | 0];
             if ($6 >>> 0 < $3 >>> 0) {
              continue;
             }
             break;
            }
           }
           $6 = $12;
          }
          HEAP8[($3 + $8 | 0) + 33 | 0] = $4;
          $6 = $6 + 1 | 0;
          continue;
         }
        }
        $12 = ($17 | 0) == 99;
        $4 = $12 ? $1 + 1 | 0 : 31;
        label$65 : {
         label$66 : {
          $17 = ($21 | 0) != 1;
          label$67 : {
           if (!$17) {
            $3 = $11;
            if ($20) {
             $3 = dlmalloc($4 << 2);
             if (!$3) {
              break label$65;
             }
            }
            HEAP32[$8 + 296 >> 2] = 0;
            HEAP32[$8 + 300 >> 2] = 0;
            $1 = 0;
            while (1) {
             $16 = $3;
             label$71 : {
              while (1) {
               $5 = $8;
               $3 = HEAP32[$0 + 4 >> 2];
               label$73 : {
                if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                 HEAP32[$0 + 4 >> 2] = $3 + 1;
                 $3 = HEAPU8[$3 | 0];
                 break label$73;
                }
                $3 = __shgetc($0);
               }
               if (!HEAPU8[($5 + $3 | 0) + 33 | 0]) {
                break label$71;
               }
               HEAP8[$8 + 27 | 0] = $3;
               $3 = mbrtowc($8 + 28 | 0, $8 + 27 | 0, 1, $8 + 296 | 0);
               if (($3 | 0) == -2) {
                continue;
               }
               if (($3 | 0) == -1) {
                break label$66;
               }
               if ($16) {
                HEAP32[($1 << 2) + $16 >> 2] = HEAP32[$8 + 28 >> 2];
                $1 = $1 + 1 | 0;
               }
               if (!$20 | ($1 | 0) != ($4 | 0)) {
                continue;
               }
               break;
              }
              $4 = $4 << 1 | 1;
              $3 = dlrealloc($16, $4 << 2);
              if ($3) {
               continue;
              }
              break label$66;
             }
             break;
            }
            if (!mbsinit($8 + 296 | 0)) {
             break label$66;
            }
            $15 = 0;
            break label$67;
           }
           if ($20) {
            $1 = 0;
            $3 = dlmalloc($4);
            if (!$3) {
             break label$65;
            }
            while (1) {
             $15 = $3;
             while (1) {
              $5 = $8;
              $3 = HEAP32[$0 + 4 >> 2];
              label$79 : {
               if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                HEAP32[$0 + 4 >> 2] = $3 + 1;
                $3 = HEAPU8[$3 | 0];
                break label$79;
               }
               $3 = __shgetc($0);
              }
              if (!HEAPU8[($5 + $3 | 0) + 33 | 0]) {
               $16 = 0;
               break label$67;
              }
              HEAP8[$1 + $15 | 0] = $3;
              $1 = $1 + 1 | 0;
              if (($4 | 0) != ($1 | 0)) {
               continue;
              }
              break;
             }
             $16 = 0;
             $4 = $4 << 1 | 1;
             $3 = dlrealloc($15, $4);
             if ($3) {
              continue;
             }
             break;
            }
            break label$6;
           }
           $1 = 0;
           if ($11) {
            while (1) {
             $5 = $8;
             $3 = HEAP32[$0 + 4 >> 2];
             label$84 : {
              if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
               HEAP32[$0 + 4 >> 2] = $3 + 1;
               $3 = HEAPU8[$3 | 0];
               break label$84;
              }
              $3 = __shgetc($0);
             }
             if (HEAPU8[($5 + $3 | 0) + 33 | 0]) {
              HEAP8[$1 + $11 | 0] = $3;
              $1 = $1 + 1 | 0;
              continue;
             } else {
              $16 = 0;
              $15 = $11;
              break label$67;
             }
            }
           }
           while (1) {
            $5 = $8;
            $1 = HEAP32[$0 + 4 >> 2];
            label$89 : {
             if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
              HEAP32[$0 + 4 >> 2] = $1 + 1;
              $1 = HEAPU8[$1 | 0];
              break label$89;
             }
             $1 = __shgetc($0);
            }
            if (HEAPU8[($5 + $1 | 0) + 33 | 0]) {
             continue;
            }
            break;
           }
           $15 = 0;
           $16 = 0;
           $1 = 0;
          }
          label$91 : {
           if (!HEAP32[$0 + 104 >> 2]) {
            $3 = HEAP32[$0 + 4 >> 2];
            break label$91;
           }
           $3 = HEAP32[$0 + 4 >> 2] + -1 | 0;
           HEAP32[$0 + 4 >> 2] = $3;
          }
          $7 = HEAP32[$0 + 120 >> 2];
          $10 = $7;
          $5 = HEAP32[$0 + 124 >> 2];
          $4 = $5;
          $7 = $3 - HEAP32[$0 + 8 >> 2] | 0;
          $5 = $7 >> 31;
          $9 = $7;
          $7 = $5;
          $5 = $4;
          $3 = $5 + $7 | 0;
          $4 = $9 + $10 | 0;
          if ($4 >>> 0 < $9 >>> 0) {
           $3 = $3 + 1 | 0;
          }
          $9 = $4;
          $10 = $3;
          if (!($3 | $4)) {
           break label$4;
          }
          $5 = $13;
          $3 = $14;
          if ($12 ? ($5 | 0) != ($9 | 0) | ($10 | 0) != ($3 | 0) : 0) {
           break label$4;
          }
          label$93 : {
           if (!$20) {
            break label$93;
           }
           if (!$17) {
            HEAP32[$11 >> 2] = $16;
            break label$93;
           }
           HEAP32[$11 >> 2] = $15;
          }
          if ($12) {
           break label$44;
          }
          if ($16) {
           HEAP32[($1 << 2) + $16 >> 2] = 0;
          }
          if (!$15) {
           $15 = 0;
           break label$44;
          }
          HEAP8[$1 + $15 | 0] = 0;
          break label$44;
         }
         $15 = 0;
         break label$6;
        }
        $15 = 0;
        $16 = 0;
        break label$6;
       }
       __floatscan($8, $0, $21, 0);
       $5 = HEAP32[$0 + 120 >> 2];
       $9 = $5;
       $3 = HEAP32[$0 + 124 >> 2];
       $1 = $3;
       $5 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
       $3 = $5 >> 31;
       $10 = $5;
       $7 = 0 - $5 | 0;
       $5 = $3;
       $4 = $5 + (0 < $10 >>> 0) | 0;
       $4 = 0 - $4 | 0;
       $3 = $9;
       $9 = $4;
       $4 = $1;
       if (($7 | 0) == ($3 | 0) & ($9 | 0) == ($4 | 0)) {
        break label$4;
       }
       if (!$11 | $21 >>> 0 > 2) {
        break label$44;
       }
       $3 = HEAP32[$8 + 8 >> 2];
       $13 = $3;
       $4 = HEAP32[$8 + 12 >> 2];
       $14 = $4;
       $4 = HEAP32[$8 >> 2];
       $9 = $4;
       $3 = HEAP32[$8 + 4 >> 2];
       $10 = $3;
       label$97 : {
        switch ($21 - 1 | 0) {
        default:
         $3 = $10;
         $4 = $14;
         wasm2js_i32$0 = $11, wasm2js_f32$0 = __trunctfsf2($9, $3, $13, $4), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
         break label$44;
        case 0:
         $4 = $10;
         $3 = $14;
         wasm2js_i32$0 = $11, wasm2js_f64$0 = __trunctfdf2($9, $4, $13, $3), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
         break label$44;
        case 1:
         break label$97;
        }
       }
       $4 = $11;
       HEAP32[$4 >> 2] = $9;
       $3 = $10;
       HEAP32[$4 + 4 >> 2] = $3;
       HEAP32[$4 + 8 >> 2] = $13;
       $3 = $14;
       HEAP32[$4 + 12 >> 2] = $3;
      }
      $4 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
      $3 = $4 >> 31;
      $13 = $4;
      $14 = $3;
      $9 = $18;
      $3 = HEAP32[$0 + 120 >> 2];
      $5 = $9 + $3 | 0;
      $3 = $19;
      $4 = HEAP32[$0 + 124 >> 2];
      $7 = $3 + $4 | 0;
      $1 = $5;
      $7 = $5 >>> 0 < $9 >>> 0 ? $7 + 1 | 0 : $7;
      $10 = $7;
      $7 = $14;
      $5 = $7 + $10 | 0;
      $9 = $1;
      $4 = $13;
      $3 = $9 + $4 | 0;
      if ($3 >>> 0 < $9 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $18 = $3;
      $19 = $5;
      $22 = (($11 | 0) != 0) + $22 | 0;
     }
     $1 = $6 + 1 | 0;
     $6 = HEAPU8[$6 + 1 | 0];
     if ($6) {
      continue;
     }
     break label$3;
    }
    break;
   }
   $22 = $22 ? $22 : -1;
  }
  if (!$20) {
   break label$3;
  }
  dlfree($15);
  dlfree($16);
 }
 if ($23) {
  __unlockfile($0);
 }
 $0 = $8 + 304 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $22;
}
function __multf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 $16 = global$0 - 96 | 0;
 $9 = $16;
 if ($16 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 $10 = $3;
 $13 = 0;
 $11 = $2;
 $28 = $13 | $11;
 $10 = 0;
 $9 = $10;
 $10 = $3;
 $9 = $9 | $10;
 $23 = $9;
 $10 = $7;
 $13 = $10 << 15;
 $12 = $13;
 $13 = $6;
 $10 = $13 >>> 17 | 0;
 $9 = $5;
 $11 = ($13 & 131071) << 15 | $9 >>> 17;
 $13 = 0;
 $26 = $13 | $11;
 $9 = $10;
 $10 = $12;
 $9 = $9 | $10;
 $9 = $8;
 $13 = $9 & 65535;
 $17 = $13;
 $10 = $7;
 $24 = $10;
 $9 = $10;
 $14 = $9 << 15;
 $10 = $13 << 15 | $9 >>> 17;
 $12 = $10;
 $10 = $6;
 $11 = $10 >>> 17 | 0;
 $9 = 0;
 $13 = $9;
 $10 = $14;
 $34 = $10 | $11;
 $9 = $12;
 $13 = $9 | $13;
 $30 = $13;
 $13 = $4;
 $10 = $8;
 $10 = $13 ^ $10;
 $9 = $3;
 $11 = $7;
 $9 = $10 & -2147483648;
 $15 = $9;
 $9 = $4;
 $13 = $9 & 65535;
 $19 = $13;
 $10 = $3;
 $25 = $10;
 $31 = $13;
 $10 = 0;
 $35 = $10;
 $10 = $17;
 $9 = $10 >>> 17 | 0;
 $37 = ($10 & 131071) << 15 | $11 >>> 17;
 $9 = $8;
 $20 = $9 >>> 16 & 32767;
 $13 = $4;
 $32 = $13 >>> 16 & 32767;
 label$2 : {
  label$3 : {
   if ($32 + -1 >>> 0 <= 32765) {
    $9 = 0;
    if ($20 + -1 >>> 0 < 32766) {
     break label$3;
    }
   }
   $10 = $2;
   $14 = !($10 | $1);
   $10 = $4;
   $9 = $10 & 2147483647;
   $29 = $9;
   $13 = $3;
   $27 = $13;
   $10 = $13;
   $12 = ($9 | 0) == 2147418112 & $10 >>> 0 < 0 | $9 >>> 0 < 2147418112;
   $10 = $9;
   $11 = $13;
   if (!(!$11 & ($10 | 0) == 2147418112 ? $14 : $12)) {
    $13 = $3;
    $21 = $13;
    $11 = $4;
    $10 = $11 | 32768;
    $15 = $10;
    break label$2;
   }
   $10 = $6;
   $14 = !($10 | $5);
   $10 = $8;
   $13 = $10 & 2147483647;
   $4 = $13;
   $11 = $7;
   $3 = $11;
   $10 = $11;
   $12 = ($13 | 0) == 2147418112 & $10 >>> 0 < 0 | $13 >>> 0 < 2147418112;
   $10 = $13;
   $9 = $11;
   if (!(!$9 & ($10 | 0) == 2147418112 ? $14 : $12)) {
    $11 = $7;
    $21 = $11;
    $9 = $8;
    $10 = $9 | 32768;
    $15 = $10;
    $1 = $5;
    $10 = $6;
    $2 = $10;
    break label$2;
   }
   $10 = $29;
   $11 = $10 ^ 2147418112;
   $9 = $27;
   $13 = $9;
   $10 = $1;
   $9 = $11;
   $11 = $2;
   $9 = $9 | $11;
   if (!($13 | $10 | $9)) {
    $9 = $4;
    $10 = $6;
    $10 = $9 | $10;
    $13 = $5;
    $11 = $3;
    if (!($10 | ($13 | $11))) {
     $15 = 2147450880;
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    $9 = $21;
    $21 = $9;
    $10 = $15;
    $11 = $10 | 2147418112;
    $15 = $11;
    $1 = 0;
    $2 = 0;
    break label$2;
   }
   $11 = $4;
   $9 = $11 ^ 2147418112;
   $7 = $9;
   $10 = $3;
   $13 = $10;
   $11 = $5;
   $9 = $6;
   $10 = $7;
   $10 = $9 | $10;
   if (!($13 | $11 | $10)) {
    $9 = $1;
    $13 = $27;
    $3 = $9 | $13;
    $10 = $2;
    $11 = $29;
    $11 = $10 | $11;
    $1 = 0;
    $2 = 0;
    if (!($11 | $3)) {
     $15 = 2147450880;
     break label$2;
    }
    $10 = $21;
    $21 = $10;
    $11 = $15;
    $9 = $11 | 2147418112;
    $15 = $9;
    break label$2;
   }
   $9 = $2;
   $10 = $29;
   $10 = $9 | $10;
   $13 = $27;
   $11 = $1;
   if (!($10 | ($13 | $11))) {
    $1 = 0;
    $2 = 0;
    break label$2;
   }
   $10 = $4;
   $11 = $6;
   $11 = $10 | $11;
   $9 = $3;
   $13 = $5;
   if (!($11 | ($9 | $13))) {
    $1 = 0;
    $2 = 0;
    break label$2;
   }
   $11 = $29;
   $10 = $27;
   if (($11 | 0) == 65535 & $10 >>> 0 <= 4294967295 | $11 >>> 0 < 65535) {
    $23 = $16 + 80 | 0;
    $22 = $1;
    $10 = $2;
    $12 = $10;
    $8 = $25;
    $10 = $19;
    $7 = $10;
    $18 = !($10 | $25);
    $14 = $18;
    $9 = $14 ? $1 : $25;
    $10 = $2;
    $11 = $19;
    $13 = $14 ? $10 : $11;
    $10 = Math_clz32($13);
    $9 = ($10 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $10;
    $10 = $18 << 6;
    $11 = $9 + $10 | 0;
    $11 >>> 0 < $10 >>> 0;
    $9 = $7;
    __ashlti3($23, $22, $12, $8, $9, $11 + -15 | 0);
    $14 = $16;
    $9 = HEAP32[$14 + 88 >> 2];
    $25 = $9;
    $12 = HEAP32[$14 + 92 >> 2];
    $19 = $12;
    $12 = $14;
    $9 = HEAP32[$12 + 80 >> 2];
    $1 = $9;
    $14 = HEAP32[$12 + 84 >> 2];
    $2 = $14;
    $9 = 0;
    $12 = $9;
    $10 = $14;
    $14 = 0;
    $28 = $10 | $14;
    $9 = $25;
    $12 = $9 | $12;
    $23 = $12;
    $12 = $19;
    $31 = $12;
    $35 = 0;
    $18 = 16 - $11 | 0;
   }
   $14 = $4;
   $12 = $3;
   $9 = $18;
   if (($14 | 0) == 65535 & $12 >>> 0 > 4294967295 | $14 >>> 0 > 65535) {
    break label$3;
   }
   $22 = $16 - -64 | 0;
   $8 = $5;
   $12 = $6;
   $11 = $12;
   $7 = $24;
   $12 = $17;
   $3 = $12;
   $4 = !($12 | $24);
   $13 = $4;
   $9 = $13 ? $5 : $24;
   $12 = $6;
   $14 = $17;
   $10 = $13 ? $12 : $14;
   $12 = Math_clz32($10);
   $9 = ($12 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $12;
   $12 = $4 << 6;
   $14 = $9 + $12 | 0;
   $14 >>> 0 < $12 >>> 0;
   $9 = $3;
   __ashlti3($22, $8, $11, $7, $9, $14 + -15 | 0);
   $13 = $16;
   $9 = HEAP32[$13 + 72 >> 2];
   $3 = $9;
   $11 = HEAP32[$13 + 76 >> 2];
   $4 = $11;
   $13 = $9;
   $9 = $11 << 15 | $9 >>> 17;
   $8 = $13 << 15;
   $7 = $9;
   $11 = $16;
   $9 = HEAP32[$11 + 64 >> 2];
   $5 = $9;
   $13 = HEAP32[$11 + 68 >> 2];
   $6 = $13;
   $12 = $13 >>> 17 | 0;
   $9 = 0;
   $11 = $9;
   $13 = $8;
   $34 = $13 | $12;
   $9 = $7;
   $11 = $9 | $11;
   $30 = $11;
   $9 = $3;
   $13 = $9 << 15;
   $7 = $13;
   $13 = $6;
   $9 = $13 >>> 17 | 0;
   $11 = $5;
   $12 = ($13 & 131071) << 15 | $11 >>> 17;
   $11 = $9;
   $13 = 0;
   $26 = $13 | $12;
   $9 = $7;
   $11 = $9 | $11;
   $11 = $4;
   $13 = $11 >>> 17 | 0;
   $9 = $3;
   $37 = ($11 & 131071) << 15 | $9 >>> 17;
   $9 = ($18 - $14 | 0) + 16 | 0;
  }
  $18 = $9;
  $11 = $26;
  $3 = $11;
  $11 = 0;
  $8 = $11;
  $9 = 0;
  $4 = $9;
  $11 = $9;
  $13 = $1;
  $7 = $13;
  $13 = $8;
  $13 = __wasm_i64_mul($3, $11, $1, $13);
  $36 = $13;
  $11 = i64toi32_i32$HIGH_BITS;
  $38 = $11;
  $11 = $6;
  $9 = $5;
  $11 = $9 << 15;
  $1 = $11 & -32768;
  $11 = 0;
  $6 = $11;
  $9 = 0;
  $2 = $9;
  $11 = $9;
  $13 = $28;
  $5 = $13;
  $13 = $6;
  $13 = __wasm_i64_mul($1, $11, $5, $13);
  $12 = $13;
  $11 = i64toi32_i32$HIGH_BITS;
  $13 = $11;
  $11 = $38;
  $14 = $13 + $11 | 0;
  $9 = $36;
  $10 = $9 + $12 | 0;
  if ($10 >>> 0 < $12 >>> 0) {
   $14 = $14 + 1 | 0;
  }
  $28 = $10;
  $23 = $14;
  $9 = $10;
  $17 = $9;
  $24 = 0;
  $9 = $2;
  $11 = $8;
  $11 = __wasm_i64_mul($1, $9, $7, $11);
  $12 = $11;
  $9 = i64toi32_i32$HIGH_BITS;
  $11 = $9;
  $9 = $10;
  $10 = $9 + $11 | 0;
  $14 = $24;
  $13 = $14 + $12 | 0;
  if ($13 >>> 0 < $12 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $26 = $13;
  $22 = $10;
  $14 = $17;
  $9 = $13;
  $12 = $24;
  $47 = ($10 | 0) == ($14 | 0) & $9 >>> 0 < $12 >>> 0 | $10 >>> 0 < $14 >>> 0;
  $9 = $4;
  $10 = $6;
  $10 = __wasm_i64_mul($3, $9, $5, $10);
  $42 = $10;
  $9 = i64toi32_i32$HIGH_BITS;
  $43 = $9;
  $10 = 0;
  $17 = $10;
  $10 = $2;
  $12 = $25;
  $24 = $12;
  $12 = $17;
  $12 = __wasm_i64_mul($1, $10, $24, $12);
  $14 = $12;
  $10 = i64toi32_i32$HIGH_BITS;
  $12 = $10;
  $10 = $43;
  $13 = $10 + $12 | 0;
  $9 = $42;
  $11 = $9 + $14 | 0;
  if ($11 >>> 0 < $14 >>> 0) {
   $13 = $13 + 1 | 0;
  }
  $27 = $11;
  $29 = $13;
  $10 = $34;
  $25 = $10;
  $9 = 0;
  $19 = $9;
  $10 = $8;
  $10 = __wasm_i64_mul($25, $9, $7, $10);
  $14 = $10;
  $9 = i64toi32_i32$HIGH_BITS;
  $10 = $9;
  $9 = $29;
  $11 = $9 + $10 | 0;
  $13 = $27;
  $12 = $13 + $14 | 0;
  if ($12 >>> 0 < $14 >>> 0) {
   $11 = $11 + 1 | 0;
  }
  $34 = $12;
  $30 = $11;
  $13 = $38;
  $11 = $23;
  $9 = $28;
  $14 = $36;
  $14 = ($13 | 0) == ($11 | 0) & $9 >>> 0 < $14 >>> 0 | $11 >>> 0 < $13 >>> 0;
  $11 = $14;
  $14 = 0;
  $9 = $14;
  $9 = $9 | $11;
  $14 = $9;
  $11 = $23;
  $13 = $11;
  $11 = 0;
  $13 = $13 | $11;
  $10 = $13 + $12 | 0;
  $9 = $30;
  $11 = $14;
  $12 = $9 + $11 | 0;
  $36 = $10;
  $12 = $10 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
  $38 = $12;
  $39 = $10;
  $33 = $12;
  $12 = $4;
  $14 = $17;
  $14 = __wasm_i64_mul($3, $12, $24, $14);
  $44 = $14;
  $12 = i64toi32_i32$HIGH_BITS;
  $45 = $12;
  $12 = $35;
  $23 = $12;
  $14 = $2;
  $9 = $31;
  $28 = $9 | 65536;
  $9 = $12;
  $9 = __wasm_i64_mul($1, $14, $28, $9);
  $13 = $9;
  $14 = i64toi32_i32$HIGH_BITS;
  $9 = $14;
  $14 = $45;
  $10 = $9 + $14 | 0;
  $12 = $44;
  $11 = $13 + $12 | 0;
  if ($11 >>> 0 < $13 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $31 = $11;
  $35 = $10;
  $10 = $6;
  $12 = $19;
  $12 = __wasm_i64_mul($5, $10, $25, $12);
  $13 = $12;
  $10 = i64toi32_i32$HIGH_BITS;
  $12 = $10;
  $10 = $35;
  $11 = $10 + $12 | 0;
  $14 = $31;
  $9 = $13 + $14 | 0;
  if ($9 >>> 0 < $13 >>> 0) {
   $11 = $11 + 1 | 0;
  }
  $40 = $9;
  $41 = $11;
  $10 = $37;
  $11 = $10 & 2147483647;
  $1 = $11 | -2147483648;
  $14 = 0;
  $10 = $14;
  $2 = $10;
  $11 = $8;
  $11 = __wasm_i64_mul($1, $10, $7, $11);
  $13 = $11;
  $10 = i64toi32_i32$HIGH_BITS;
  $11 = $10;
  $10 = $41;
  $9 = $10 + $11 | 0;
  $14 = $40;
  $12 = $13 + $14 | 0;
  if ($12 >>> 0 < $13 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $37 = $12;
  $46 = $9;
  $10 = $12;
  $14 = $33;
  $12 = $10 + $14 | 0;
  $9 = $39;
  $13 = 0;
  $11 = $9 + $13 | 0;
  if ($11 >>> 0 < $13 >>> 0) {
   $12 = $12 + 1 | 0;
  }
  $39 = $11;
  $48 = $12;
  $9 = $12;
  $11 = $9;
  $13 = $39;
  $14 = $47;
  $10 = $13 + $14 | 0;
  if ($10 >>> 0 < $13 >>> 0) {
   $11 = $11 + 1 | 0;
  }
  $7 = $10;
  $8 = $11;
  $20 = (($20 + $32 | 0) + $18 | 0) + -16383 | 0;
  $11 = $17;
  $14 = $19;
  $14 = __wasm_i64_mul($24, $11, $25, $14);
  $33 = $14;
  $11 = i64toi32_i32$HIGH_BITS;
  $18 = $11;
  $11 = $4;
  $14 = $23;
  $14 = __wasm_i64_mul($3, $11, $28, $14);
  $13 = $14;
  $11 = i64toi32_i32$HIGH_BITS;
  $14 = $11;
  $11 = $18;
  $10 = $11 + $14 | 0;
  $12 = $33;
  $9 = $13 + $12 | 0;
  if ($9 >>> 0 < $13 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $3 = $9;
  $4 = $10;
  $12 = $18;
  $13 = $33;
  $18 = ($10 | 0) == ($12 | 0) & $9 >>> 0 < $13 >>> 0 | $10 >>> 0 < $12 >>> 0;
  $11 = $2;
  $10 = $6;
  $10 = __wasm_i64_mul($1, $11, $5, $10);
  $12 = $10;
  $11 = i64toi32_i32$HIGH_BITS;
  $10 = $11;
  $11 = $4;
  $9 = $10 + $11 | 0;
  $13 = $3;
  $14 = $13 + $12 | 0;
  if ($14 >>> 0 < $12 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $5 = $14;
  $6 = $9;
  $13 = $4;
  $11 = $14;
  $12 = $3;
  $13 = ($9 | 0) == ($13 | 0) & $11 >>> 0 < $12 >>> 0 | $9 >>> 0 < $13 >>> 0;
  $14 = 0;
  $12 = $18;
  $10 = $13 + $12 | 0;
  if ($10 >>> 0 < $13 >>> 0) {
   $14 = 1;
  }
  $33 = $10;
  $18 = $14;
  $4 = $5;
  $14 = $6;
  $3 = $14;
  $14 = $29;
  $12 = $43;
  $11 = $27;
  $13 = $42;
  $9 = ($14 | 0) == ($12 | 0) & $11 >>> 0 < $13 >>> 0 | $14 >>> 0 < $12 >>> 0;
  $11 = $30;
  $13 = $34;
  $12 = $27;
  $14 = ($14 | 0) == ($11 | 0) & $13 >>> 0 < $12 >>> 0 | $11 >>> 0 < $14 >>> 0;
  $10 = 0;
  $12 = $9;
  $9 = $14 + $12 | 0;
  if ($9 >>> 0 < $14 >>> 0) {
   $10 = 1;
  }
  $14 = $9;
  $12 = $10;
  $10 = $3;
  $9 = $10 + $12 | 0;
  $13 = $4;
  $11 = $13 + $14 | 0;
  if ($11 >>> 0 < $14 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $3 = $11;
  $4 = $9;
  $13 = $6;
  $10 = $11;
  $14 = $5;
  $13 = ($9 | 0) == ($13 | 0) & $10 >>> 0 < $14 >>> 0 | $9 >>> 0 < $13 >>> 0;
  $10 = $18;
  $11 = $10;
  $14 = $33;
  $12 = $13 + $14 | 0;
  if ($12 >>> 0 < $13 >>> 0) {
   $11 = $11 + 1 | 0;
  }
  $10 = $12;
  $5 = $11;
  $11 = $2;
  $14 = $23;
  $14 = __wasm_i64_mul($1, $11, $28, $14);
  $13 = $14;
  $11 = i64toi32_i32$HIGH_BITS;
  $14 = $11;
  $11 = $5;
  $12 = $11 + $14 | 0;
  $9 = $13 + $10 | 0;
  if ($9 >>> 0 < $13 >>> 0) {
   $12 = $12 + 1 | 0;
  }
  $29 = $9;
  $27 = $12;
  $12 = $2;
  $10 = $17;
  $10 = __wasm_i64_mul($1, $12, $24, $10);
  $5 = $10;
  $12 = i64toi32_i32$HIGH_BITS;
  $6 = $12;
  $12 = $19;
  $10 = $23;
  $10 = __wasm_i64_mul($25, $12, $28, $10);
  $13 = $10;
  $12 = i64toi32_i32$HIGH_BITS;
  $10 = $12;
  $12 = $6;
  $9 = $10 + $12 | 0;
  $11 = $5;
  $14 = $13 + $11 | 0;
  if ($14 >>> 0 < $13 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $1 = $14;
  $2 = $9;
  $11 = $6;
  $12 = $14;
  $13 = $5;
  $13 = ($9 | 0) == ($11 | 0) & $12 >>> 0 < $13 >>> 0 | $9 >>> 0 < $11 >>> 0;
  $9 = $13;
  $13 = 0;
  $12 = $13;
  $13 = $9;
  $12 = $13 | $12;
  $13 = $29;
  $9 = 0;
  $11 = $2;
  $11 = $9 | $11;
  $10 = $13 + $11 | 0;
  $9 = $12;
  $12 = $27;
  $14 = $9 + $12 | 0;
  $6 = $10;
  $14 = $10 >>> 0 < $11 >>> 0 ? $14 + 1 | 0 : $14;
  $5 = $14;
  $12 = $1;
  $14 = $4;
  $13 = $14;
  $10 = $13 + $12 | 0;
  $11 = 0;
  $14 = $3;
  $9 = $11 + $14 | 0;
  if ($9 >>> 0 < $11 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $1 = $9;
  $2 = $10;
  $14 = $4;
  $11 = $3;
  $14 = ($10 | 0) == ($14 | 0) & $9 >>> 0 < $11 >>> 0 | $10 >>> 0 < $14 >>> 0;
  $13 = $5;
  $9 = $13;
  $11 = $6;
  $12 = $11 + $14 | 0;
  if ($12 >>> 0 < $14 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $19 = $12;
  $17 = $9;
  $5 = $1;
  $9 = $2;
  $4 = $9;
  $9 = $46;
  $11 = $41;
  $13 = $37;
  $14 = $40;
  $6 = ($9 | 0) == ($11 | 0) & $13 >>> 0 < $14 >>> 0 | $9 >>> 0 < $11 >>> 0;
  $9 = $45;
  $13 = $35;
  $14 = $31;
  $11 = $44;
  $3 = ($9 | 0) == ($13 | 0) & $14 >>> 0 < $11 >>> 0 | $13 >>> 0 < $9 >>> 0;
  $14 = $41;
  $11 = $40;
  $9 = $31;
  $13 = ($14 | 0) == ($13 | 0) & $11 >>> 0 < $9 >>> 0 | $14 >>> 0 < $13 >>> 0;
  $12 = 0;
  $9 = $3;
  $10 = $9 + $13 | 0;
  if ($10 >>> 0 < $13 >>> 0) {
   $12 = 1;
  }
  $13 = $10;
  $9 = $12;
  $10 = $9;
  $11 = $6;
  $14 = $13 + $11 | 0;
  $14 >>> 0 < $13 >>> 0;
  $12 = $14;
  $11 = $12;
  $12 = 0;
  $10 = $12;
  $10 = $10 | $11;
  $3 = $10;
  $11 = $46;
  $13 = $11;
  $11 = $49;
  $13 = $13 | $11;
  $12 = $5;
  $9 = $13 + $12 | 0;
  $10 = $4;
  $11 = $3;
  $14 = $10 + $11 | 0;
  $5 = $9;
  $14 = $9 >>> 0 < $13 >>> 0 ? $14 + 1 | 0 : $14;
  $6 = $14;
  $12 = $2;
  $13 = $1;
  $12 = ($14 | 0) == ($12 | 0) & $9 >>> 0 < $13 >>> 0 | $14 >>> 0 < $12 >>> 0;
  $10 = $17;
  $9 = $10;
  $13 = $19;
  $11 = $13 + $12 | 0;
  if ($11 >>> 0 < $12 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $19 = $11;
  $17 = $9;
  $2 = $5;
  $9 = $6;
  $1 = $9;
  $9 = $38;
  $13 = $30;
  $10 = $36;
  $12 = $34;
  $3 = ($9 | 0) == ($13 | 0) & $10 >>> 0 < $12 >>> 0 | $9 >>> 0 < $13 >>> 0;
  $10 = $48;
  $12 = $39;
  $13 = $36;
  $9 = ($10 | 0) == ($9 | 0) & $12 >>> 0 < $13 >>> 0 | $10 >>> 0 < $9 >>> 0;
  $11 = 0;
  $13 = $3;
  $14 = $9 + $13 | 0;
  if ($14 >>> 0 < $9 >>> 0) {
   $11 = 1;
  }
  $9 = $14;
  $13 = $11;
  $11 = $1;
  $14 = $13 + $11 | 0;
  $12 = $2;
  $10 = $9 + $12 | 0;
  if ($10 >>> 0 < $9 >>> 0) {
   $14 = $14 + 1 | 0;
  }
  $3 = $10;
  $4 = $14;
  $12 = $6;
  $9 = $5;
  $12 = ($14 | 0) == ($12 | 0) & $10 >>> 0 < $9 >>> 0 | $14 >>> 0 < $12 >>> 0;
  $11 = $17;
  $10 = $11;
  $9 = $19;
  $13 = $9 + $12 | 0;
  if ($13 >>> 0 < $12 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $1 = $13;
  $2 = $10;
  $9 = $10 & 65536;
  label$14 : {
   if ($9) {
    $20 = $20 + 1 | 0;
    break label$14;
   }
   $9 = $22;
   $5 = $9 >>> 31 | 0;
   $11 = 0;
   $6 = $11;
   $9 = $1;
   $1 = $9 << 1;
   $11 = $2;
   $10 = $11 << 1 | $9 >>> 31;
   $2 = $10;
   $10 = $4;
   $12 = $10 >>> 31 | 0;
   $9 = 0;
   $11 = $9;
   $10 = $1;
   $1 = $10 | $12;
   $9 = $2;
   $11 = $9 | $11;
   $2 = $11;
   $9 = $3;
   $3 = $9 << 1;
   $11 = $4;
   $10 = $11 << 1 | $9 >>> 31;
   $4 = $10;
   $10 = $8;
   $12 = $10 >>> 31 | 0;
   $9 = 0;
   $11 = $9;
   $10 = $3;
   $3 = $10 | $12;
   $9 = $4;
   $11 = $9 | $11;
   $4 = $11;
   $9 = $26;
   $26 = $9 << 1;
   $11 = $22;
   $10 = $11 << 1 | $9 >>> 31;
   $22 = $10;
   $11 = $7;
   $10 = $8;
   $9 = $10 << 1 | $11 >>> 31;
   $8 = $9;
   $10 = $5;
   $12 = $11 << 1;
   $7 = $10 | $12;
   $9 = $6;
   $11 = $8;
   $11 = $9 | $11;
   $8 = $11;
  }
  if (($20 | 0) >= 32767) {
   $9 = $21;
   $21 = $9;
   $11 = $15;
   $10 = $11 | 2147418112;
   $15 = $10;
   $1 = 0;
   $2 = 0;
   break label$2;
  }
  $10 = $15;
  $5 = $10;
  label$17 : {
   if (($20 | 0) <= 0) {
    $32 = 1 - $20 | 0;
    if ($32 >>> 0 <= 127) {
     $10 = $22;
     $9 = $8;
     $20 = $20 + 127 | 0;
     __ashlti3($16 + 48 | 0, $26, $10, $7, $9, $20);
     $9 = $4;
     $10 = $2;
     __ashlti3($16 + 32 | 0, $3, $9, $1, $10, $20);
     $10 = $22;
     $9 = $8;
     __lshrti3($16 + 16 | 0, $26, $10, $7, $9, $32);
     $9 = $4;
     $10 = $2;
     __lshrti3($16, $3, $9, $1, $10, $32);
     $11 = $16;
     $10 = HEAP32[$11 + 48 >> 2];
     $2 = $10;
     $9 = HEAP32[$11 + 52 >> 2];
     $1 = $9;
     $9 = HEAP32[$11 + 56 >> 2];
     $12 = $9;
     $10 = HEAP32[$11 + 60 >> 2];
     $9 = $10;
     $10 = $1;
     $9 = $9 | $10;
     $11 = $2;
     $10 = $11 | $12;
     $3 = ($10 | 0) != 0 | ($9 | 0) != 0;
     $12 = $16;
     $10 = HEAP32[$12 + 32 >> 2];
     $2 = $10;
     $9 = HEAP32[$12 + 36 >> 2];
     $1 = $9;
     $9 = HEAP32[$12 + 16 >> 2];
     $11 = $9;
     $10 = HEAP32[$12 + 20 >> 2];
     $9 = $10;
     $10 = $1;
     $9 = $9 | $10;
     $10 = $3;
     $12 = $2;
     $11 = $11 | $12;
     $26 = $10 | $11;
     $22 = $9;
     $9 = $16;
     $12 = HEAP32[$9 + 40 >> 2];
     $2 = $12;
     $10 = HEAP32[$9 + 44 >> 2];
     $1 = $10;
     $10 = HEAP32[$9 + 24 >> 2];
     $12 = HEAP32[$9 + 28 >> 2];
     $9 = $2;
     $7 = $9 | $10;
     $10 = $12;
     $12 = $1;
     $10 = $10 | $12;
     $8 = $10;
     $12 = $16;
     $10 = HEAP32[$12 >> 2];
     $3 = $10;
     $9 = HEAP32[$12 + 4 >> 2];
     $4 = $9;
     $10 = HEAP32[$12 + 12 >> 2];
     $9 = HEAP32[$12 + 8 >> 2];
     $1 = $9;
     break label$17;
    }
    $1 = 0;
    $2 = 0;
    break label$2;
   }
   $10 = $2;
   $9 = $10 & 65535;
   $10 = $20;
   $12 = $10 << 16;
   $10 = $12;
   $10 = $10 | $9;
   $9 = $1;
   $11 = 0;
   $1 = $9 | $11;
  }
  $11 = $1;
  $12 = $50;
  $21 = $11 | $12;
  $9 = $10;
  $10 = $5;
  $9 = $9 | $10;
  $15 = $9;
  $9 = $22;
  $2 = !($9 | $26);
  $10 = $7;
  $9 = $8;
  $1 = ($9 | 0) > -1 ? 1 : ($9 | 0) >= -1 ? $10 >>> 0 <= 4294967295 ? 0 : 1 : 0;
  $11 = $10;
  $10 = $8;
  if (!(!$11 & ($10 | 0) == -2147483648 ? $2 : $1)) {
   $11 = $15;
   $5 = $11;
   $11 = $4;
   $13 = $11;
   $12 = $3;
   $14 = $12 + 1 | 0;
   if ($14 >>> 0 < 1) {
    $13 = $13 + 1 | 0;
   }
   $1 = $14;
   $2 = $13;
   $12 = $4;
   $11 = $14;
   $9 = $3;
   $12 = ($13 | 0) == ($12 | 0) & $11 >>> 0 < $9 >>> 0 | $13 >>> 0 < $12 >>> 0;
   $11 = $5;
   $14 = $11;
   $9 = $21;
   $10 = $9 + $12 | 0;
   if ($10 >>> 0 < $12 >>> 0) {
    $14 = $14 + 1 | 0;
   }
   $21 = $10;
   $15 = $14;
   break label$2;
  }
  $14 = $8;
  $9 = $14 ^ -2147483648;
  $11 = $9;
  $14 = $26;
  $12 = $7;
  $9 = $22;
  $11 = $9 | $11;
  if ($14 | $12 | $11) {
   $1 = $3;
   $11 = $4;
   $2 = $11;
   break label$2;
  }
  $14 = 0;
  $1 = $14;
  $11 = $4;
  $14 = $11;
  $11 = $3;
  $9 = $11;
  $12 = $9 & 1;
  $13 = $9 + $12 | 0;
  $9 = $1;
  $10 = $14 + $9 | 0;
  $1 = $13;
  $10 = $13 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
  $2 = $10;
  $11 = $14;
  $12 = $3;
  $11 = ($10 | 0) == ($11 | 0) & $13 >>> 0 < $12 >>> 0 | $10 >>> 0 < $11 >>> 0;
  $14 = $15;
  $13 = $14;
  $12 = $21;
  $9 = $11 + $12 | 0;
  if ($9 >>> 0 < $11 >>> 0) {
   $13 = $13 + 1 | 0;
  }
  $21 = $9;
  $15 = $13;
 }
 $12 = $0;
 HEAP32[$12 >> 2] = $1;
 $13 = $2;
 HEAP32[$12 + 4 >> 2] = $13;
 HEAP32[$12 + 8 >> 2] = $21;
 $13 = $15;
 HEAP32[$12 + 12 >> 2] = $13;
 $0 = $16 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function hexfloat($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 432 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $13 = HEAP32[$1 + 4 >> 2];
 label$2 : {
  if ($13 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
   HEAP32[$1 + 4 >> 2] = $13 + 1;
   $13 = HEAPU8[$13 | 0];
   break label$2;
  }
  $13 = __shgetc($1);
 }
 label$4 : {
  label$5 : {
   while (1) {
    label$7 : {
     if (($13 | 0) != 48) {
      if (($13 | 0) != 46) {
       break label$4;
      }
      $13 = HEAP32[$1 + 4 >> 2];
      if ($13 >>> 0 >= HEAPU32[$1 + 104 >> 2]) {
       break label$7;
      }
      HEAP32[$1 + 4 >> 2] = $13 + 1;
      $13 = HEAPU8[$13 | 0];
      break label$5;
     }
     $13 = HEAP32[$1 + 4 >> 2];
     if ($13 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      $8 = 1;
      HEAP32[$1 + 4 >> 2] = $13 + 1;
      $13 = HEAPU8[$13 | 0];
      continue;
     }
     $8 = 1;
     $13 = __shgetc($1);
     continue;
    }
    break;
   }
   $13 = __shgetc($1);
  }
  $28 = 1;
  if (($13 | 0) != 48) {
   break label$4;
  }
  while (1) {
   $13 = HEAP32[$1 + 4 >> 2];
   label$11 : {
    if ($13 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$1 + 4 >> 2] = $13 + 1;
     $13 = HEAPU8[$13 | 0];
     break label$11;
    }
    $13 = __shgetc($1);
   }
   $8 = $22;
   $7 = $8 + -1 | 0;
   $11 = $24;
   $12 = $11 + -1 | 0;
   if ($12 >>> 0 < 4294967295) {
    $7 = $7 + 1 | 0;
   }
   $24 = $12;
   $22 = $7;
   if (($13 | 0) == 48) {
    continue;
   }
   break;
  }
  $8 = 1;
 }
 $17 = 1073676288;
 while (1) {
  label$14 : {
   $7 = $13 | 32;
   label$15 : {
    label$16 : {
     $9 = $13 + -48 | 0;
     if ($9 >>> 0 < 10) {
      break label$16;
     }
     if ($7 + -97 >>> 0 > 5 ? ($13 | 0) != 46 : 0) {
      break label$14;
     }
     if (($13 | 0) != 46) {
      break label$16;
     }
     if ($28) {
      break label$14;
     }
     $28 = 1;
     $24 = $14;
     $7 = $18;
     $22 = $7;
     break label$15;
    }
    $13 = ($13 | 0) > 57 ? $7 + -87 | 0 : $9;
    $8 = $14;
    $7 = $18;
    label$17 : {
     if (($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? $8 >>> 0 > 7 ? 0 : 1 : 0) {
      $23 = ($23 << 4) + $13 | 0;
      break label$17;
     }
     $10 = $14;
     $8 = $18;
     if (($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $10 >>> 0 > 28 ? 0 : 1 : 0) {
      __floatsitf($6 + 48 | 0, $13);
      $10 = $25;
      $8 = $17;
      __multf3($6 + 32 | 0, $26, $10, $19, $8, 0, 0, 0, 1073414144);
      $7 = HEAP32[$6 + 32 >> 2];
      $26 = $7;
      $11 = HEAP32[$6 + 36 >> 2];
      $25 = $11;
      $11 = HEAP32[$6 + 40 >> 2];
      $19 = $11;
      $7 = HEAP32[$6 + 44 >> 2];
      $17 = $7;
      $7 = HEAP32[$6 + 48 >> 2];
      $9 = $7;
      $11 = HEAP32[$6 + 52 >> 2];
      $8 = $11;
      $11 = HEAP32[$6 + 56 >> 2];
      $12 = $11;
      $7 = HEAP32[$6 + 60 >> 2];
      $10 = $7;
      $7 = $25;
      $11 = $17;
      __multf3($6 + 16 | 0, $26, $7, $19, $11, $9, $8, $12, $10);
      $10 = HEAP32[$6 + 16 >> 2];
      $9 = $10;
      $8 = HEAP32[$6 + 20 >> 2];
      $11 = $8;
      $8 = HEAP32[$6 + 24 >> 2];
      $12 = $8;
      $10 = HEAP32[$6 + 28 >> 2];
      $7 = $10;
      $10 = $16;
      $8 = $21;
      __addtf3($6, $15, $10, $20, $8, $9, $11, $12, $7);
      $7 = HEAP32[$6 + 8 >> 2];
      $20 = $7;
      $11 = HEAP32[$6 + 12 >> 2];
      $21 = $11;
      $11 = HEAP32[$6 >> 2];
      $15 = $11;
      $7 = HEAP32[$6 + 4 >> 2];
      $16 = $7;
      break label$17;
     }
     if (!$13 | $31) {
      break label$17;
     }
     $7 = $25;
     $11 = $17;
     __multf3($6 + 80 | 0, $26, $7, $19, $11, 0, 0, 0, 1073610752);
     $10 = HEAP32[$6 + 80 >> 2];
     $9 = $10;
     $8 = HEAP32[$6 + 84 >> 2];
     $11 = $8;
     $8 = HEAP32[$6 + 88 >> 2];
     $12 = $8;
     $10 = HEAP32[$6 + 92 >> 2];
     $7 = $10;
     $10 = $16;
     $8 = $21;
     __addtf3($6 - -64 | 0, $15, $10, $20, $8, $9, $11, $12, $7);
     $7 = HEAP32[$6 + 72 >> 2];
     $20 = $7;
     $11 = HEAP32[$6 + 76 >> 2];
     $21 = $11;
     $31 = 1;
     $11 = HEAP32[$6 + 64 >> 2];
     $15 = $11;
     $7 = HEAP32[$6 + 68 >> 2];
     $16 = $7;
    }
    $7 = $18;
    $12 = $7;
    $8 = $14;
    $9 = $8 + 1 | 0;
    if ($9 >>> 0 < 1) {
     $12 = $12 + 1 | 0;
    }
    $14 = $9;
    $18 = $12;
    $8 = 1;
   }
   $13 = HEAP32[$1 + 4 >> 2];
   if ($13 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
    HEAP32[$1 + 4 >> 2] = $13 + 1;
    $13 = HEAPU8[$13 | 0];
    continue;
   }
   $13 = __shgetc($1);
   continue;
  }
  break;
 }
 label$21 : {
  label$22 : {
   label$23 : {
    if (!$8) {
     if (!HEAP32[$1 + 104 >> 2]) {
      if ($5) {
       break label$22;
      }
      break label$23;
     }
     $13 = HEAP32[$1 + 4 >> 2];
     HEAP32[$1 + 4 >> 2] = $13 + -1;
     if (!$5) {
      break label$23;
     }
     HEAP32[$1 + 4 >> 2] = $13 + -2;
     if (!$28) {
      break label$22;
     }
     HEAP32[$1 + 4 >> 2] = $13 + -3;
     break label$22;
    }
    $7 = $14;
    $12 = $18;
    if (($12 | 0) < 0 ? 1 : ($12 | 0) <= 0 ? $7 >>> 0 > 7 ? 0 : 1 : 0) {
     $19 = $14;
     $7 = $18;
     $17 = $7;
     while (1) {
      $23 = $23 << 4;
      $7 = $17;
      $9 = $7;
      $10 = $19;
      $11 = $10 + 1 | 0;
      if ($11 >>> 0 < 1) {
       $9 = $9 + 1 | 0;
      }
      $19 = $11;
      $17 = $9;
      $7 = $11;
      if (($7 | 0) != 8 | $9) {
       continue;
      }
      break;
     }
    }
    label$28 : {
     if (($13 & -33) == 80) {
      $7 = scanexp($1, $5);
      $19 = $7;
      $9 = i64toi32_i32$HIGH_BITS;
      $17 = $9;
      $8 = $19;
      if ($8 | ($9 | 0) != -2147483648) {
       break label$28;
      }
      if ($5) {
       $19 = 0;
       $17 = 0;
       if (!HEAP32[$1 + 104 >> 2]) {
        break label$28;
       }
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
       break label$28;
      }
      $15 = 0;
      $16 = 0;
      __shlim($1, 0, 0);
      $14 = 0;
      break label$21;
     }
     $19 = 0;
     $17 = 0;
     if (!HEAP32[$1 + 104 >> 2]) {
      break label$28;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
    }
    if (!$23) {
     __extenddftf2($6 + 112 | 0, +($4 | 0) * 0);
     $8 = HEAP32[$6 + 112 >> 2];
     $15 = $8;
     $9 = HEAP32[$6 + 116 >> 2];
     $16 = $9;
     $8 = HEAP32[$6 + 124 >> 2];
     $27 = $8;
     $9 = HEAP32[$6 + 120 >> 2];
     $14 = $9;
     break label$21;
    }
    $12 = $28;
    $7 = $12 ? $24 : $14;
    $8 = $22;
    $9 = $18;
    $10 = $12 ? $8 : $9;
    $12 = $7;
    $7 = $10 << 2 | $7 >>> 30;
    $10 = $12 << 2;
    $12 = $17;
    $11 = $7 + $12 | 0;
    $8 = $19;
    $9 = $8 + $10 | 0;
    if ($9 >>> 0 < $8 >>> 0) {
     $11 = $11 + 1 | 0;
    }
    $7 = $9;
    $9 = $11 + -1 | 0;
    $12 = $7 + -32 | 0;
    if ($12 >>> 0 < 4294967264) {
     $9 = $9 + 1 | 0;
    }
    $14 = $12;
    $18 = $9;
    $7 = 0 - $3 | 0;
    $9 = $7 >> 31;
    $1 = $9;
    $11 = $12;
    $8 = $7;
    $9 = $18;
    $7 = $1;
    if (($9 | 0) > ($7 | 0) ? 1 : ($9 | 0) >= ($7 | 0) ? $11 >>> 0 <= $8 >>> 0 ? 0 : 1 : 0) {
     wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     __floatsitf($6 + 160 | 0, $4);
     $11 = HEAP32[$6 + 160 >> 2];
     $2 = $11;
     $11 = HEAP32[$6 + 172 >> 2];
     $1 = $11;
     $9 = HEAP32[$6 + 164 >> 2];
     $11 = $9;
     $9 = HEAP32[$6 + 168 >> 2];
     $3 = $9;
     $9 = $1;
     __multf3($6 + 144 | 0, $2, $11, $3, $9, -1, -1, -1, 2147418111);
     $7 = HEAP32[$6 + 144 >> 2];
     $2 = $7;
     $7 = HEAP32[$6 + 156 >> 2];
     $1 = $7;
     $8 = HEAP32[$6 + 148 >> 2];
     $7 = $8;
     $8 = HEAP32[$6 + 152 >> 2];
     $3 = $8;
     $8 = $1;
     __multf3($6 + 128 | 0, $2, $7, $3, $8, -1, -1, -1, 2147418111);
     $11 = HEAP32[$6 + 128 >> 2];
     $15 = $11;
     $9 = HEAP32[$6 + 132 >> 2];
     $16 = $9;
     $11 = HEAP32[$6 + 140 >> 2];
     $27 = $11;
     $9 = HEAP32[$6 + 136 >> 2];
     $14 = $9;
     break label$21;
    }
    $9 = $3 + -226 | 0;
    $11 = $9 >> 31;
    $1 = $11;
    $8 = $14;
    $7 = $9;
    $11 = $18;
    $9 = $1;
    if (($11 | 0) > ($9 | 0) ? 1 : ($11 | 0) >= ($9 | 0) ? $8 >>> 0 < $7 >>> 0 ? 0 : 1 : 0) {
     if (($23 | 0) > -1) {
      while (1) {
       $8 = $16;
       $11 = $21;
       __addtf3($6 + 416 | 0, $15, $8, $20, $11, 0, 0, 0, -1073807360);
       $9 = $8;
       $7 = $11;
       $13 = __getf2($15, $9, $20, $7, 0, 0, 0, 1073610752);
       $11 = HEAP32[$6 + 420 >> 2];
       $5 = $11;
       $11 = $9;
       $8 = HEAP32[$6 + 416 >> 2];
       $1 = ($13 | 0) < 0;
       $10 = $1;
       $9 = $10 ? $15 : $8;
       $12 = $9;
       $8 = $5;
       $7 = $10 ? $11 : $8;
       $5 = $7;
       $9 = HEAP32[$6 + 428 >> 2];
       $10 = $9;
       $7 = HEAP32[$6 + 424 >> 2];
       $8 = $1;
       $11 = $8 ? $20 : $7;
       $17 = $11;
       $9 = $21;
       $7 = $10;
       $10 = $8 ? $9 : $7;
       $1 = $10;
       $10 = $16;
       $11 = $9;
       $8 = $5;
       $9 = $1;
       __addtf3($6 + 400 | 0, $15, $10, $20, $11, $12, $8, $17, $9);
       $9 = $18;
       $12 = $9 + -1 | 0;
       $11 = $14;
       $7 = $11 + -1 | 0;
       if ($7 >>> 0 < 4294967295) {
        $12 = $12 + 1 | 0;
       }
       $14 = $7;
       $18 = $12;
       $12 = HEAP32[$6 + 408 >> 2];
       $20 = $12;
       $11 = HEAP32[$6 + 412 >> 2];
       $21 = $11;
       $11 = HEAP32[$6 + 400 >> 2];
       $15 = $11;
       $12 = HEAP32[$6 + 404 >> 2];
       $16 = $12;
       $23 = $23 << 1 | ($13 | 0) > -1;
       if (($23 | 0) > -1) {
        continue;
       }
       break;
      }
     }
     $11 = $3;
     $12 = $11 >> 31;
     $1 = $12;
     $9 = $14;
     $10 = $11;
     $8 = $9 - $10 | 0;
     $12 = $18;
     $11 = $1;
     $7 = $11 + ($9 >>> 0 < $10 >>> 0) | 0;
     $7 = $12 - $7 | 0;
     $12 = $8;
     $8 = $7;
     $11 = $12 + 32 | 0;
     if ($11 >>> 0 < 32) {
      $8 = $8 + 1 | 0;
     }
     $22 = $8;
     $12 = $2;
     $8 = $12 >> 31;
     $1 = $8;
     $13 = $11;
     $7 = $13;
     $10 = $12;
     $8 = $22;
     $12 = $1;
     $13 = (($8 | 0) < ($12 | 0) ? 1 : ($8 | 0) <= ($12 | 0) ? $7 >>> 0 >= $10 >>> 0 ? 0 : 1 : 0) ? ($7 | 0) > 0 ? $7 : 0 : $10;
     label$36 : {
      if (($13 | 0) >= 113) {
       __floatsitf($6 + 384 | 0, $4);
       $7 = HEAP32[$6 + 392 >> 2];
       $24 = $7;
       $8 = HEAP32[$6 + 396 >> 2];
       $22 = $8;
       $8 = HEAP32[$6 + 384 >> 2];
       $26 = $8;
       $7 = HEAP32[$6 + 388 >> 2];
       $25 = $7;
       $10 = 0;
       break label$36;
      }
      __extenddftf2($6 + 352 | 0, scalbn(1, 144 - $13 | 0));
      __floatsitf($6 + 336 | 0, $4);
      $7 = HEAP32[$6 + 352 >> 2];
      $3 = $7;
      $8 = HEAP32[$6 + 356 >> 2];
      $1 = $8;
      $8 = HEAP32[$6 + 360 >> 2];
      $4 = $8;
      $7 = HEAP32[$6 + 364 >> 2];
      $2 = $7;
      $7 = HEAP32[$6 + 336 >> 2];
      $26 = $7;
      $8 = HEAP32[$6 + 340 >> 2];
      $25 = $8;
      $8 = HEAP32[$6 + 344 >> 2];
      $24 = $8;
      $7 = HEAP32[$6 + 348 >> 2];
      $22 = $7;
      $7 = $1;
      $8 = $2;
      $10 = $25;
      $12 = $22;
      copysignl($6 + 368 | 0, $3, $7, $4, $8, $26, $10, $24, $12);
      $12 = HEAP32[$6 + 376 >> 2];
      $29 = $12;
      $10 = HEAP32[$6 + 380 >> 2];
      $30 = $10;
      $12 = HEAP32[$6 + 372 >> 2];
      $32 = $12;
      $10 = HEAP32[$6 + 368 >> 2];
     }
     $19 = $10;
     $12 = $32;
     $17 = $12;
     $1 = $6 + 320 | 0;
     $12 = $16;
     $10 = $21;
     $13 = !($23 & 1) & ((__letf2($15, $12, $20, $10, 0, 0, 0, 0) | 0) != 0 & ($13 | 0) < 32);
     __floatunsitf($1, $23 + $13 | 0);
     $7 = HEAP32[$6 + 320 >> 2];
     $1 = $7;
     $8 = HEAP32[$6 + 324 >> 2];
     $10 = $8;
     $8 = HEAP32[$6 + 328 >> 2];
     $2 = $8;
     $7 = HEAP32[$6 + 332 >> 2];
     $12 = $7;
     $7 = $25;
     $8 = $22;
     __multf3($6 + 304 | 0, $26, $7, $24, $8, $1, $10, $2, $12);
     $12 = HEAP32[$6 + 304 >> 2];
     $2 = $12;
     $12 = HEAP32[$6 + 316 >> 2];
     $1 = $12;
     $10 = HEAP32[$6 + 308 >> 2];
     $12 = $10;
     $10 = HEAP32[$6 + 312 >> 2];
     $3 = $10;
     $10 = $1;
     $8 = $17;
     $7 = $30;
     __addtf3($6 + 272 | 0, $2, $12, $3, $10, $19, $8, $29, $7);
     $9 = $13;
     $12 = $9 ? 0 : $15;
     $2 = $12;
     $12 = $21;
     $9 = $9 ? 0 : $12;
     $1 = $9;
     $8 = $16;
     $10 = $13 ? 0 : $8;
     $9 = $10;
     $8 = $13;
     $7 = $8 ? 0 : $20;
     $3 = $7;
     $7 = $1;
     $8 = $25;
     $10 = $22;
     __multf3($6 + 288 | 0, $2, $9, $3, $7, $26, $8, $24, $10);
     $10 = HEAP32[$6 + 288 >> 2];
     $3 = $10;
     $8 = HEAP32[$6 + 292 >> 2];
     $1 = $8;
     $8 = HEAP32[$6 + 296 >> 2];
     $4 = $8;
     $10 = HEAP32[$6 + 300 >> 2];
     $2 = $10;
     $10 = HEAP32[$6 + 272 >> 2];
     $5 = $10;
     $8 = HEAP32[$6 + 276 >> 2];
     $7 = $8;
     $8 = HEAP32[$6 + 280 >> 2];
     $11 = $8;
     $10 = HEAP32[$6 + 284 >> 2];
     $9 = $10;
     $10 = $1;
     $8 = $2;
     __addtf3($6 + 256 | 0, $3, $10, $4, $8, $5, $7, $11, $9);
     $9 = HEAP32[$6 + 256 >> 2];
     $2 = $9;
     $9 = HEAP32[$6 + 268 >> 2];
     $1 = $9;
     $7 = HEAP32[$6 + 260 >> 2];
     $9 = $7;
     $7 = HEAP32[$6 + 264 >> 2];
     $3 = $7;
     $7 = $1;
     $8 = $17;
     $10 = $30;
     __subtf3($6 + 240 | 0, $2, $9, $3, $7, $19, $8, $29, $10);
     $10 = HEAP32[$6 + 240 >> 2];
     $15 = $10;
     $10 = HEAP32[$6 + 252 >> 2];
     $21 = $10;
     $8 = HEAP32[$6 + 244 >> 2];
     $16 = $8;
     $10 = $8;
     $8 = HEAP32[$6 + 248 >> 2];
     $20 = $8;
     $8 = $21;
     if (!__letf2($15, $10, $20, $8, 0, 0, 0, 0)) {
      wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $9 = $16;
     $7 = $21;
     scalbnl($6 + 224 | 0, $15, $9, $20, $7, $14);
     $7 = HEAP32[$6 + 224 >> 2];
     $15 = $7;
     $9 = HEAP32[$6 + 228 >> 2];
     $16 = $9;
     $7 = HEAP32[$6 + 236 >> 2];
     $27 = $7;
     $9 = HEAP32[$6 + 232 >> 2];
     $14 = $9;
     break label$21;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($6 + 208 | 0, $4);
    $7 = HEAP32[$6 + 208 >> 2];
    $2 = $7;
    $7 = HEAP32[$6 + 220 >> 2];
    $1 = $7;
    $9 = HEAP32[$6 + 212 >> 2];
    $7 = $9;
    $9 = HEAP32[$6 + 216 >> 2];
    $3 = $9;
    $9 = $1;
    __multf3($6 + 192 | 0, $2, $7, $3, $9, 0, 0, 0, 65536);
    $10 = HEAP32[$6 + 192 >> 2];
    $2 = $10;
    $10 = HEAP32[$6 + 204 >> 2];
    $1 = $10;
    $8 = HEAP32[$6 + 196 >> 2];
    $10 = $8;
    $8 = HEAP32[$6 + 200 >> 2];
    $3 = $8;
    $8 = $1;
    __multf3($6 + 176 | 0, $2, $10, $3, $8, 0, 0, 0, 65536);
    $7 = HEAP32[$6 + 176 >> 2];
    $15 = $7;
    $9 = HEAP32[$6 + 180 >> 2];
    $16 = $9;
    $7 = HEAP32[$6 + 188 >> 2];
    $27 = $7;
    $9 = HEAP32[$6 + 184 >> 2];
    $14 = $9;
    break label$21;
   }
   __shlim($1, 0, 0);
  }
  __extenddftf2($6 + 96 | 0, +($4 | 0) * 0);
  $7 = HEAP32[$6 + 96 >> 2];
  $15 = $7;
  $9 = HEAP32[$6 + 100 >> 2];
  $16 = $9;
  $7 = HEAP32[$6 + 108 >> 2];
  $27 = $7;
  $9 = HEAP32[$6 + 104 >> 2];
  $14 = $9;
 }
 $7 = $27;
 $18 = $7;
 $9 = $0;
 HEAP32[$9 >> 2] = $15;
 $7 = $16;
 HEAP32[$9 + 4 >> 2] = $7;
 HEAP32[$9 + 8 >> 2] = $14;
 $7 = $18;
 HEAP32[$9 + 12 >> 2] = $7;
 $0 = $6 + 432 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $7 = global$0 + -64 | 0;
 $8 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 std____2__ios_base__getloc_28_29_20const($7, $3);
 $8 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($7);
 std____2__locale___locale_28_29($7);
 label$2 : {
  label$3 : {
   label$4 : {
    $9 = $6 + -65 | 0;
    if ($9 >>> 0 > 56) {
     if (($6 | 0) != 37) {
      break label$4;
     }
     std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_percent_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $7 + 56 | 0, $2, $4, $8);
     break label$3;
    }
    label$6 : {
     switch ($9 - 1 | 0) {
     default:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 0:
     case 32:
     case 38:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 33:
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, HEAP32[$7 + 56 >> 2], $2, $3, $4, $5, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($1), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($1) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($1) << 2) | 0), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
      break label$3;
     case 34:
     case 35:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 12 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 2:
      $6 = HEAP32[3487];
      $8 = HEAP32[3486];
      HEAP32[$7 + 24 >> 2] = $8;
      HEAP32[$7 + 28 >> 2] = $6;
      $8 = HEAP32[3485];
      $6 = HEAP32[3484];
      HEAP32[$7 + 16 >> 2] = $6;
      HEAP32[$7 + 20 >> 2] = $8;
      $6 = HEAP32[3483];
      $8 = HEAP32[3482];
      HEAP32[$7 + 8 >> 2] = $8;
      HEAP32[$7 + 12 >> 2] = $6;
      $8 = HEAP32[3481];
      $6 = HEAP32[3480];
      HEAP32[$7 >> 2] = $6;
      HEAP32[$7 + 4 >> 2] = $8;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
      break label$3;
     case 4:
      $6 = HEAP32[3495];
      $8 = HEAP32[3494];
      HEAP32[$7 + 24 >> 2] = $8;
      HEAP32[$7 + 28 >> 2] = $6;
      $8 = HEAP32[3493];
      $6 = HEAP32[3492];
      HEAP32[$7 + 16 >> 2] = $6;
      HEAP32[$7 + 20 >> 2] = $8;
      $6 = HEAP32[3491];
      $8 = HEAP32[3490];
      HEAP32[$7 + 8 >> 2] = $8;
      HEAP32[$7 + 12 >> 2] = $6;
      $8 = HEAP32[3489];
      $6 = HEAP32[3488];
      HEAP32[$7 >> 2] = $6;
      HEAP32[$7 + 4 >> 2] = $8;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
      break label$3;
     case 6:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 7:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 40:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 28 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 43:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 11:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 4 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 44:
     case 50:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_white_space_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 46:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 48:
      $6 = memcpy($7, 13984, 44);
      wasm2js_i32$0 = $6, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $6 + 44 | 0), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
      break label$3;
     case 16:
      HEAP32[$7 + 16 >> 2] = HEAP32[3512];
      $6 = HEAP32[3511];
      $8 = HEAP32[3510];
      HEAP32[$7 + 8 >> 2] = $8;
      HEAP32[$7 + 12 >> 2] = $6;
      $8 = HEAP32[3509];
      $6 = HEAP32[3508];
      HEAP32[$7 >> 2] = $6;
      HEAP32[$7 + 4 >> 2] = $8;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 20 | 0), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
      break label$3;
     case 17:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 18:
      $6 = HEAP32[3523];
      $8 = HEAP32[3522];
      HEAP32[$7 + 24 >> 2] = $8;
      HEAP32[$7 + 28 >> 2] = $6;
      $8 = HEAP32[3521];
      $6 = HEAP32[3520];
      HEAP32[$7 + 16 >> 2] = $6;
      HEAP32[$7 + 20 >> 2] = $8;
      $6 = HEAP32[3519];
      $8 = HEAP32[3518];
      HEAP32[$7 + 8 >> 2] = $8;
      HEAP32[$7 + 12 >> 2] = $6;
      $8 = HEAP32[3517];
      $6 = HEAP32[3516];
      HEAP32[$7 >> 2] = $6;
      HEAP32[$7 + 4 >> 2] = $8;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
      break label$3;
     case 53:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 54:
      $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5) | 0;
      break label$2;
     case 22:
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, HEAP32[$7 + 56 >> 2], $2, $3, $4, $5, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($1), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($1) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($1) << 2) | 0), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
      break label$3;
     case 55:
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 20 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     case 1:
     case 3:
     case 5:
     case 8:
     case 9:
     case 10:
     case 12:
     case 13:
     case 14:
     case 15:
     case 19:
     case 20:
     case 21:
     case 24:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 36:
     case 37:
     case 39:
     case 41:
     case 42:
     case 45:
     case 47:
     case 49:
     case 51:
     case 52:
      break label$4;
     case 23:
      break label$6;
     }
    }
    std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 20 | 0, $7 + 56 | 0, $2, $4, $8);
    break label$3;
   }
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
  }
  $4 = HEAP32[$7 + 56 >> 2];
 }
 $0 = $7 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $7 = global$0 - 32 | 0;
 $8 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 std____2__ios_base__getloc_28_29_20const($7 + 8 | 0, $3);
 $8 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($7 + 8 | 0);
 std____2__locale___locale_28_29($7 + 8 | 0);
 label$2 : {
  label$3 : {
   label$4 : {
    $9 = $6 + -65 | 0;
    if ($9 >>> 0 > 56) {
     if (($6 | 0) != 37) {
      break label$4;
     }
     std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_percent_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $7 + 24 | 0, $2, $4, $8);
     break label$3;
    }
    label$6 : {
     switch ($9 - 1 | 0) {
     default:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 0:
     case 32:
     case 38:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 33:
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, HEAP32[$7 + 24 >> 2], $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
      break label$3;
     case 34:
     case 35:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 12 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 2:
      HEAP32[$7 + 8 >> 2] = 623865125;
      HEAP32[$7 + 12 >> 2] = 2032480100;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
      break label$3;
     case 4:
      HEAP32[$7 + 8 >> 2] = 623728933;
      HEAP32[$7 + 12 >> 2] = 1680158061;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
      break label$3;
     case 6:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 7:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 40:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 28 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 43:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 11:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 4 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 44:
     case 50:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_white_space_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 46:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 48:
      $6 = HEAPU8[13903] | HEAPU8[13904] << 8 | (HEAPU8[13905] << 16 | HEAPU8[13906] << 24);
      HEAP8[$7 + 15 | 0] = $6;
      HEAP8[$7 + 16 | 0] = $6 >>> 8;
      HEAP8[$7 + 17 | 0] = $6 >>> 16;
      HEAP8[$7 + 18 | 0] = $6 >>> 24;
      $6 = HEAPU8[13900] | HEAPU8[13901] << 8 | (HEAPU8[13902] << 16 | HEAPU8[13903] << 24);
      HEAP32[$7 + 8 >> 2] = HEAPU8[13896] | HEAPU8[13897] << 8 | (HEAPU8[13898] << 16 | HEAPU8[13899] << 24);
      HEAP32[$7 + 12 >> 2] = $6;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 19 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
      break label$3;
     case 16:
      HEAP8[$7 + 12 | 0] = HEAPU8[13911];
      HEAP32[$7 + 8 >> 2] = HEAPU8[13907] | HEAPU8[13908] << 8 | (HEAPU8[13909] << 16 | HEAPU8[13910] << 24);
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 13 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
      break label$3;
     case 17:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 18:
      HEAP32[$7 + 8 >> 2] = 624576549;
      HEAP32[$7 + 12 >> 2] = 1394948685;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
      break label$3;
     case 53:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 54:
      $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5) | 0;
      break label$2;
     case 22:
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
      wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, HEAP32[$7 + 24 >> 2], $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
      break label$3;
     case 55:
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 20 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     case 1:
     case 3:
     case 5:
     case 8:
     case 9:
     case 10:
     case 12:
     case 13:
     case 14:
     case 15:
     case 19:
     case 20:
     case 21:
     case 24:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 36:
     case 37:
     case 39:
     case 41:
     case 42:
     case 45:
     case 47:
     case 49:
     case 51:
     case 52:
      break label$4;
     case 23:
      break label$6;
     }
    }
    std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 20 | 0, $7 + 24 | 0, $2, $4, $8);
    break label$3;
   }
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
  }
  $4 = HEAP32[$7 + 24 >> 2];
 }
 $0 = $7 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 $11 = global$0 - 560 | 0;
 $6 = $11;
 if ($11 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$11 + 44 >> 2] = 0;
 $10 = __DOUBLE_BITS($1);
 $14 = i64toi32_i32$HIGH_BITS;
 $15 = $14;
 label$2 : {
  if (($14 | 0) < -1 ? 1 : ($14 | 0) <= -1 ? $10 >>> 0 > 4294967295 ? 0 : 1 : 0) {
   $23 = 1;
   $24 = 9776;
   $1 = -$1;
   $10 = __DOUBLE_BITS($1);
   $14 = i64toi32_i32$HIGH_BITS;
   $15 = $14;
   break label$2;
  }
  if ($4 & 2048) {
   $23 = 1;
   $24 = 9779;
   break label$2;
  }
  $23 = $4 & 1;
  $24 = $23 ? 9782 : 9777;
 }
 $14 = $15;
 $10 = $14 & 2146435072;
 $14 = 0;
 label$5 : {
  if (!$14 & ($10 | 0) == 2146435072) {
   $12 = $23 + 3 | 0;
   pad($0, 32, $2, $12, $4 & -65537);
   out($0, $24, $23);
   $6 = $5 >>> 5 & 1;
   out($0, $1 != $1 ? $6 ? 9803 : 9807 : $6 ? 9795 : 9799, 3);
   break label$5;
  }
  $19 = $11 + 16 | 0;
  label$7 : {
   label$8 : {
    label$9 : {
     $1 = frexp($1, $11 + 44 | 0);
     $1 = $1 + $1;
     if ($1 != 0) {
      $6 = HEAP32[$11 + 44 >> 2];
      HEAP32[$11 + 44 >> 2] = $6 + -1;
      $20 = $5 | 32;
      if (($20 | 0) != 97) {
       break label$9;
      }
      break label$7;
     }
     $20 = $5 | 32;
     if (($20 | 0) == 97) {
      break label$7;
     }
     $9 = HEAP32[$11 + 44 >> 2];
     $13 = ($3 | 0) < 0 ? 6 : $3;
     break label$8;
    }
    $9 = $6 + -29 | 0;
    HEAP32[$11 + 44 >> 2] = $9;
    $1 = $1 * 268435456;
    $13 = ($3 | 0) < 0 ? 6 : $3;
   }
   $17 = ($9 | 0) < 0 ? $11 + 48 | 0 : $11 + 336 | 0;
   $8 = $17;
   while (1) {
    $3 = $8;
    if ($1 < 4294967296 & $1 >= 0) {
     $6 = ~~$1 >>> 0;
    } else {
     $6 = 0;
    }
    HEAP32[$3 >> 2] = $6;
    $8 = $8 + 4 | 0;
    $1 = ($1 - +($6 >>> 0)) * 1e9;
    if ($1 != 0) {
     continue;
    }
    break;
   }
   label$14 : {
    if (($9 | 0) < 1) {
     $6 = $8;
     $7 = $17;
     break label$14;
    }
    $7 = $17;
    while (1) {
     $9 = ($9 | 0) < 29 ? $9 : 29;
     $6 = $8 + -4 | 0;
     label$17 : {
      if ($6 >>> 0 < $7 >>> 0) {
       break label$17;
      }
      $12 = $9;
      $10 = 0;
      while (1) {
       $25 = $6;
       $15 = $10;
       $10 = 0;
       $3 = $10;
       $10 = HEAP32[$6 >> 2];
       $14 = $10;
       $18 = $12;
       $16 = $18 & 31;
       if (32 <= ($18 & 63) >>> 0) {
        $10 = $14 << $16;
        $18 = 0;
       } else {
        $10 = (1 << $16) - 1 & $14 >>> 32 - $16;
        $18 = $14 << $16;
       }
       $14 = $10;
       $10 = $3;
       $3 = $14 + $10 | 0;
       $16 = $18 + $15 | 0;
       if ($16 >>> 0 < $18 >>> 0) {
        $3 = $3 + 1 | 0;
       }
       $26 = $3;
       $10 = __wasm_i64_udiv($16, $3, 1e9, 0);
       $3 = i64toi32_i32$HIGH_BITS;
       $15 = $3;
       $18 = __wasm_i64_mul($10, $3, 1e9, 0);
       $3 = i64toi32_i32$HIGH_BITS;
       $27 = $3;
       $14 = $16 - $18 | 0;
       $3 = $26;
       $16 = ($16 >>> 0 < $18 >>> 0) + $27 | 0;
       HEAP32[$25 >> 2] = $14;
       $6 = $6 + -4 | 0;
       if ($6 >>> 0 >= $7 >>> 0) {
        continue;
       }
       break;
      }
      $6 = $10;
      if (!$6) {
       break label$17;
      }
      $7 = $7 + -4 | 0;
      HEAP32[$7 >> 2] = $6;
     }
     while (1) {
      $6 = $8;
      if ($6 >>> 0 > $7 >>> 0) {
       $8 = $6 + -4 | 0;
       if (!HEAP32[$8 >> 2]) {
        continue;
       }
      }
      break;
     }
     $9 = HEAP32[$11 + 44 >> 2] - $9 | 0;
     HEAP32[$11 + 44 >> 2] = $9;
     $8 = $6;
     if (($9 | 0) > 0) {
      continue;
     }
     break;
    }
   }
   if (($9 | 0) <= -1) {
    $21 = (($13 + 25 | 0) / 9 | 0) + 1 | 0;
    $14 = ($20 | 0) == 102;
    while (1) {
     $12 = ($9 | 0) < -9 ? 9 : 0 - $9 | 0;
     label$23 : {
      if ($7 >>> 0 >= $6 >>> 0) {
       $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
       break label$23;
      }
      $10 = 1e9 >>> $12 | 0;
      $15 = -1 << $12 ^ -1;
      $9 = 0;
      $8 = $7;
      while (1) {
       $3 = HEAP32[$8 >> 2];
       HEAP32[$8 >> 2] = ($3 >>> $12 | 0) + $9;
       $9 = Math_imul($3 & $15, $10);
       $8 = $8 + 4 | 0;
       if ($8 >>> 0 < $6 >>> 0) {
        continue;
       }
       break;
      }
      $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
      if (!$9) {
       break label$23;
      }
      HEAP32[$6 >> 2] = $9;
      $6 = $6 + 4 | 0;
     }
     $9 = HEAP32[$11 + 44 >> 2] + $12 | 0;
     HEAP32[$11 + 44 >> 2] = $9;
     $8 = $14 ? $17 : $7;
     $6 = $6 - $8 >> 2 > ($21 | 0) ? $8 + ($21 << 2) | 0 : $6;
     if (($9 | 0) < 0) {
      continue;
     }
     break;
    }
   }
   $8 = 0;
   label$26 : {
    if ($7 >>> 0 >= $6 >>> 0) {
     break label$26;
    }
    $8 = Math_imul($17 - $7 >> 2, 9);
    $9 = 10;
    $3 = HEAP32[$7 >> 2];
    if ($3 >>> 0 < 10) {
     break label$26;
    }
    while (1) {
     $8 = $8 + 1 | 0;
     $9 = Math_imul($9, 10);
     if ($3 >>> 0 >= $9 >>> 0) {
      continue;
     }
     break;
    }
   }
   $9 = ($13 - (($20 | 0) == 102 ? 0 : $8) | 0) - (($20 | 0) == 103 & ($13 | 0) != 0) | 0;
   if (($9 | 0) < (Math_imul($6 - $17 >> 2, 9) + -9 | 0)) {
    $3 = $9 + 9216 | 0;
    $10 = ($3 | 0) / 9 | 0;
    $12 = (($10 << 2) + $17 | 0) + -4092 | 0;
    $9 = 10;
    $3 = $3 - Math_imul($10, 9) | 0;
    if (($3 | 0) <= 7) {
     while (1) {
      $9 = Math_imul($9, 10);
      $3 = $3 + 1 | 0;
      if (($3 | 0) != 8) {
       continue;
      }
      break;
     }
    }
    $10 = HEAP32[$12 >> 2];
    $15 = ($10 >>> 0) / ($9 >>> 0) | 0;
    $21 = $12 + 4 | 0;
    $3 = $10 - Math_imul($9, $15) | 0;
    label$31 : {
     if ($3 ? 0 : ($21 | 0) == ($6 | 0)) {
      break label$31;
     }
     $14 = $9 >>> 1 | 0;
     $22 = $3 >>> 0 < $14 >>> 0 ? .5 : ($6 | 0) == ($21 | 0) ? ($14 | 0) == ($3 | 0) ? 1 : 1.5 : 1.5;
     $1 = $15 & 1 ? 9007199254740994 : 9007199254740992;
     if (!(!$23 | HEAPU8[$24 | 0] != 45)) {
      $22 = -$22;
      $1 = -$1;
     }
     $3 = $10 - $3 | 0;
     HEAP32[$12 >> 2] = $3;
     if ($1 + $22 == $1) {
      break label$31;
     }
     $8 = $3 + $9 | 0;
     HEAP32[$12 >> 2] = $8;
     if ($8 >>> 0 >= 1e9) {
      while (1) {
       HEAP32[$12 >> 2] = 0;
       $12 = $12 + -4 | 0;
       if ($12 >>> 0 < $7 >>> 0) {
        $7 = $7 + -4 | 0;
        HEAP32[$7 >> 2] = 0;
       }
       $8 = HEAP32[$12 >> 2] + 1 | 0;
       HEAP32[$12 >> 2] = $8;
       if ($8 >>> 0 > 999999999) {
        continue;
       }
       break;
      }
     }
     $8 = Math_imul($17 - $7 >> 2, 9);
     $9 = 10;
     $3 = HEAP32[$7 >> 2];
     if ($3 >>> 0 < 10) {
      break label$31;
     }
     while (1) {
      $8 = $8 + 1 | 0;
      $9 = Math_imul($9, 10);
      if ($3 >>> 0 >= $9 >>> 0) {
       continue;
      }
      break;
     }
    }
    $9 = $12 + 4 | 0;
    $6 = $6 >>> 0 > $9 >>> 0 ? $9 : $6;
   }
   label$37 : {
    while (1) {
     $9 = $6;
     $14 = 0;
     if ($6 >>> 0 <= $7 >>> 0) {
      break label$37;
     }
     $6 = $9 + -4 | 0;
     if (!HEAP32[$6 >> 2]) {
      continue;
     }
     break;
    }
    $14 = 1;
   }
   label$39 : {
    if (($20 | 0) != 103) {
     $15 = $4 & 8;
     break label$39;
    }
    $6 = $13 ? $13 : 1;
    $3 = ($6 | 0) > ($8 | 0) & ($8 | 0) > -5;
    $13 = ($3 ? $8 ^ -1 : -1) + $6 | 0;
    $5 = ($3 ? -1 : -2) + $5 | 0;
    $15 = $4 & 8;
    if ($15) {
     break label$39;
    }
    $6 = 9;
    label$41 : {
     if (!$14) {
      break label$41;
     }
     $12 = HEAP32[$9 + -4 >> 2];
     if (!$12) {
      break label$41;
     }
     $3 = 10;
     $6 = 0;
     if (($12 >>> 0) % 10) {
      break label$41;
     }
     while (1) {
      $6 = $6 + 1 | 0;
      $3 = Math_imul($3, 10);
      if (!(($12 >>> 0) % ($3 >>> 0))) {
       continue;
      }
      break;
     }
    }
    $3 = Math_imul($9 - $17 >> 2, 9) + -9 | 0;
    if (($5 & -33) == 70) {
     $15 = 0;
     $6 = $3 - $6 | 0;
     $6 = ($6 | 0) > 0 ? $6 : 0;
     $13 = ($13 | 0) < ($6 | 0) ? $13 : $6;
     break label$39;
    }
    $15 = 0;
    $6 = ($3 + $8 | 0) - $6 | 0;
    $6 = ($6 | 0) > 0 ? $6 : 0;
    $13 = ($13 | 0) < ($6 | 0) ? $13 : $6;
   }
   $20 = $13 | $15;
   $3 = ($20 | 0) != 0;
   $16 = $0;
   $18 = $2;
   $10 = $5 & -33;
   $6 = ($8 | 0) > 0 ? $8 : 0;
   label$44 : {
    if (($10 | 0) == 70) {
     break label$44;
    }
    $6 = $8 >> 31;
    $6 = fmt_u($6 ^ $6 + $8, 0, $19);
    if (($19 - $6 | 0) <= 1) {
     while (1) {
      $6 = $6 + -1 | 0;
      HEAP8[$6 | 0] = 48;
      if (($19 - $6 | 0) < 2) {
       continue;
      }
      break;
     }
    }
    $21 = $6 + -2 | 0;
    HEAP8[$21 | 0] = $5;
    HEAP8[$6 + -1 | 0] = ($8 | 0) < 0 ? 45 : 43;
    $6 = $19 - $21 | 0;
   }
   $12 = ($6 + (($13 + $23 | 0) + $3 | 0) | 0) + 1 | 0;
   pad($16, 32, $18, $12, $4);
   out($0, $24, $23);
   pad($0, 48, $2, $12, $4 ^ 65536);
   label$47 : {
    label$48 : {
     label$49 : {
      if (($10 | 0) == 70) {
       $10 = $11 + 16 | 8;
       $8 = $11 + 16 | 9;
       $3 = $7 >>> 0 > $17 >>> 0 ? $17 : $7;
       $7 = $3;
       while (1) {
        $16 = HEAP32[$7 >> 2];
        $6 = fmt_u($16, 0, $8);
        label$52 : {
         if (($3 | 0) != ($7 | 0)) {
          if ($6 >>> 0 <= $11 + 16 >>> 0) {
           break label$52;
          }
          while (1) {
           $6 = $6 + -1 | 0;
           HEAP8[$6 | 0] = 48;
           if ($6 >>> 0 > $11 + 16 >>> 0) {
            continue;
           }
           break;
          }
          break label$52;
         }
         if (($6 | 0) != ($8 | 0)) {
          break label$52;
         }
         HEAP8[$11 + 24 | 0] = 48;
         $6 = $10;
        }
        out($0, $6, $8 - $6 | 0);
        $7 = $7 + 4 | 0;
        if ($7 >>> 0 <= $17 >>> 0) {
         continue;
        }
        break;
       }
       if ($20) {
        out($0, 9811, 1);
       }
       if (($13 | 0) < 1 | $7 >>> 0 >= $9 >>> 0) {
        break label$49;
       }
       while (1) {
        $10 = HEAP32[$7 >> 2];
        $6 = fmt_u($10, 0, $8);
        if ($6 >>> 0 > $11 + 16 >>> 0) {
         while (1) {
          $6 = $6 + -1 | 0;
          HEAP8[$6 | 0] = 48;
          if ($6 >>> 0 > $11 + 16 >>> 0) {
           continue;
          }
          break;
         }
        }
        out($0, $6, ($13 | 0) < 9 ? $13 : 9);
        $6 = $13 + -9 | 0;
        $7 = $7 + 4 | 0;
        if ($7 >>> 0 >= $9 >>> 0) {
         break label$48;
        }
        $3 = ($13 | 0) > 9;
        $13 = $6;
        if ($3) {
         continue;
        }
        break;
       }
       break label$48;
      }
      label$59 : {
       if (($13 | 0) < 0) {
        break label$59;
       }
       $10 = $14 ? $9 : $7 + 4 | 0;
       $17 = $11 + 16 | 8;
       $9 = $11 + 16 | 9;
       $8 = $7;
       while (1) {
        $16 = HEAP32[$8 >> 2];
        $6 = fmt_u($16, 0, $9);
        if (($9 | 0) == ($6 | 0)) {
         HEAP8[$11 + 24 | 0] = 48;
         $6 = $17;
        }
        label$62 : {
         if (($7 | 0) != ($8 | 0)) {
          if ($6 >>> 0 <= $11 + 16 >>> 0) {
           break label$62;
          }
          while (1) {
           $6 = $6 + -1 | 0;
           HEAP8[$6 | 0] = 48;
           if ($6 >>> 0 > $11 + 16 >>> 0) {
            continue;
           }
           break;
          }
          break label$62;
         }
         out($0, $6, 1);
         $6 = $6 + 1 | 0;
         if (($13 | 0) < 1 ? !$15 : 0) {
          break label$62;
         }
         out($0, 9811, 1);
        }
        $3 = $9 - $6 | 0;
        out($0, $6, ($13 | 0) > ($3 | 0) ? $3 : $13);
        $13 = $13 - $3 | 0;
        $8 = $8 + 4 | 0;
        if ($8 >>> 0 >= $10 >>> 0) {
         break label$59;
        }
        if (($13 | 0) > -1) {
         continue;
        }
        break;
       }
      }
      pad($0, 48, $13 + 18 | 0, 18, 0);
      out($0, $21, $19 - $21 | 0);
      break label$47;
     }
     $6 = $13;
    }
    pad($0, 48, $6 + 9 | 0, 9, 0);
   }
   break label$5;
  }
  $8 = $5 & 32;
  $13 = $8 ? $24 + 9 | 0 : $24;
  label$65 : {
   if ($3 >>> 0 > 11) {
    break label$65;
   }
   $6 = 12 - $3 | 0;
   if (!$6) {
    break label$65;
   }
   $22 = 8;
   while (1) {
    $22 = $22 * 16;
    $6 = $6 + -1 | 0;
    if ($6) {
     continue;
    }
    break;
   }
   if (HEAPU8[$13 | 0] == 45) {
    $1 = -($22 + (-$1 - $22));
    break label$65;
   }
   $1 = $1 + $22 - $22;
  }
  $6 = HEAP32[$11 + 44 >> 2];
  $7 = $6;
  $6 = $6 >> 31;
  $6 = fmt_u($6 ^ $6 + $7, 0, $19);
  if (($19 | 0) == ($6 | 0)) {
   HEAP8[$11 + 15 | 0] = 48;
   $6 = $11 + 15 | 0;
  }
  $15 = $23 | 2;
  $7 = HEAP32[$11 + 44 >> 2];
  $10 = $6 + -2 | 0;
  HEAP8[$10 | 0] = $5 + 15;
  HEAP8[$6 + -1 | 0] = ($7 | 0) < 0 ? 45 : 43;
  $9 = $4 & 8;
  $7 = $11 + 16 | 0;
  while (1) {
   $6 = $7;
   $5 = $6;
   if (Math_abs($1) < 2147483648) {
    $7 = ~~$1;
   } else {
    $7 = -2147483648;
   }
   HEAP8[$5 | 0] = HEAPU8[$7 + 9760 | 0] | $8;
   $1 = ($1 - +($7 | 0)) * 16;
   $7 = $6 + 1 | 0;
   if (!(($7 - ($11 + 16 | 0) | 0) != 1 | ($1 == 0 ? !(($3 | 0) > 0 | $9) : 0))) {
    HEAP8[$6 + 1 | 0] = 46;
    $7 = $6 + 2 | 0;
   }
   if ($1 != 0) {
    continue;
   }
   break;
  }
  $5 = $0;
  $8 = $2;
  $14 = $15;
  if (!$3 | (($7 - $11 | 0) + -18 | 0) >= ($3 | 0)) {
   $6 = (($19 - ($11 + 16 | 0) | 0) - $10 | 0) + $7 | 0;
  } else {
   $6 = (($3 + $19 | 0) - $10 | 0) + 2 | 0;
  }
  $12 = $14 + $6 | 0;
  pad($5, 32, $8, $12, $4);
  out($0, $13, $15);
  pad($0, 48, $2, $12, $4 ^ 65536);
  $7 = $7 - ($11 + 16 | 0) | 0;
  out($0, $11 + 16 | 0, $7);
  $8 = $19 - $10 | 0;
  pad($0, 48, $6 - ($8 + $7 | 0) | 0, 0, 0);
  out($0, $10, $8);
 }
 pad($0, 32, $2, $12, $4 ^ 8192);
 $0 = $11 + 560 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return (($12 | 0) < ($2 | 0) ? $2 : $12) | 0;
}
function __addtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 $17 = global$0 - 112 | 0;
 $10 = $17;
 if ($17 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $10;
 $13 = $7;
 $18 = $13;
 $14 = $8;
 $11 = $14 & 2147483647;
 $19 = $11;
 $11 = $2;
 $9 = $11 + -1 | 0;
 $14 = $1;
 $10 = $14 + -1 | 0;
 if ($10 >>> 0 < 4294967295) {
  $9 = $9 + 1 | 0;
 }
 $20 = $9;
 $22 = ($10 | 0) == -1 & ($9 | 0) == -1;
 $12 = $3;
 $21 = $12;
 $11 = $4;
 $9 = $11 & 2147483647;
 $23 = $9;
 $12 = $2;
 $9 = $20;
 $12 = ($12 | 0) == ($9 | 0) & $10 >>> 0 < $1 >>> 0 | $9 >>> 0 < $12 >>> 0;
 $11 = $23;
 $10 = $11;
 $14 = $3;
 $13 = $14 + $12 | 0;
 if ($13 >>> 0 < $12 >>> 0) {
  $10 = $10 + 1 | 0;
 }
 $11 = $13;
 $13 = $10 + -1 | 0;
 $9 = $11 + -1 | 0;
 if ($9 >>> 0 < 4294967295) {
  $13 = $13 + 1 | 0;
 }
 label$2 : {
  label$3 : {
   $11 = ($13 | 0) == 2147418111 & $9 >>> 0 > 4294967295 | $13 >>> 0 > 2147418111;
   $10 = $13;
   if (!(($9 | 0) == -1 & ($10 | 0) == 2147418111 ? $22 : $11)) {
    $12 = $6;
    $9 = $12 + -1 | 0;
    $11 = $5;
    $14 = $11 + -1 | 0;
    if ($14 >>> 0 < 4294967295) {
     $9 = $9 + 1 | 0;
    }
    $12 = $14;
    $20 = ($12 | 0) != -1 | ($9 | 0) != -1;
    $12 = $9;
    $9 = $6;
    $13 = $14;
    $9 = ($12 | 0) == ($9 | 0) & $13 >>> 0 < $5 >>> 0 | $12 >>> 0 < $9 >>> 0;
    $13 = $19;
    $14 = $13;
    $11 = $18;
    $10 = $11 + $9 | 0;
    if ($10 >>> 0 < $9 >>> 0) {
     $14 = $14 + 1 | 0;
    }
    $13 = $10;
    $10 = $14 + -1 | 0;
    $12 = $13 + -1 | 0;
    if ($12 >>> 0 < 4294967295) {
     $10 = $10 + 1 | 0;
    }
    $11 = ($10 | 0) == 2147418111 & $12 >>> 0 < 4294967295 | $10 >>> 0 < 2147418111;
    $14 = $10;
    $9 = $12;
    if (($9 | 0) == -1 & ($14 | 0) == 2147418111 ? $20 : $11) {
     break label$3;
    }
   }
   $9 = $2;
   $11 = !($9 | $1);
   $9 = $23;
   $13 = $21;
   $12 = ($9 | 0) == 2147418112 & $13 >>> 0 < 0 | $9 >>> 0 < 2147418112;
   $13 = $9;
   $10 = $21;
   if (!(!$10 & ($13 | 0) == 2147418112 ? $11 : $12)) {
    $14 = $3;
    $7 = $14;
    $10 = $4;
    $13 = $10 | 32768;
    $8 = $13;
    $5 = $1;
    $13 = $2;
    $6 = $13;
    break label$2;
   }
   $13 = $6;
   $11 = !($13 | $5);
   $13 = $19;
   $10 = $18;
   $12 = ($13 | 0) == 2147418112 & $10 >>> 0 < 0 | $13 >>> 0 < 2147418112;
   $10 = $13;
   $9 = $18;
   if (!(!$9 & ($10 | 0) == 2147418112 ? $11 : $12)) {
    $14 = $7;
    $7 = $14;
    $9 = $8;
    $10 = $9 | 32768;
    $8 = $10;
    break label$2;
   }
   $10 = $23;
   $14 = $10 ^ 2147418112;
   $11 = $14;
   $9 = $21;
   $13 = $9;
   $10 = $1;
   $14 = $2;
   $9 = $11;
   $9 = $14 | $9;
   if (!($13 | $10 | $9)) {
    $14 = $1;
    $13 = $5;
    $11 = $14 ^ $13;
    $10 = $6;
    $9 = $2;
    $10 = $10 ^ $9;
    $5 = $10;
    $14 = $8;
    $10 = $4;
    $14 = $14 ^ $10;
    $13 = $7;
    $9 = $3;
    $10 = $13 ^ $9;
    $13 = $10;
    $9 = $14 ^ -2147483648;
    $10 = $9;
    $9 = $5;
    $10 = $10 | $9;
    $14 = $11;
    $16 = !($10 | ($14 | $13));
    $11 = $16;
    $13 = $11 ? 0 : $3;
    $7 = $13;
    $14 = $4;
    $9 = $11 ? 2147450880 : $14;
    $8 = $9;
    $10 = $11 ? 0 : $1;
    $5 = $10;
    $13 = $2;
    $11 = $11 ? 0 : $13;
    $6 = $11;
    break label$2;
   }
   $11 = $19;
   $10 = $11 ^ 2147418112;
   $11 = $5;
   $14 = $18;
   $9 = $14;
   $14 = $10;
   $10 = $6;
   $14 = $14 | $10;
   if (!($11 | $9 | $14)) {
    break label$2;
   }
   $14 = $2;
   $11 = $23;
   $11 = $14 | $11;
   $10 = $1;
   $9 = $21;
   if (!($11 | ($10 | $9))) {
    $11 = $6;
    $10 = $19;
    $10 = $11 | $10;
    $14 = $5;
    $9 = $18;
    $11 = $14 | $9;
    if ($11 | $10) {
     break label$2;
    }
    $14 = $5;
    $9 = $1;
    $5 = $14 & $9;
    $11 = $2;
    $10 = $6;
    $10 = $11 & $10;
    $6 = $10;
    $14 = $7;
    $11 = $3;
    $7 = $14 & $11;
    $10 = $4;
    $9 = $8;
    $9 = $10 & $9;
    $8 = $9;
    break label$2;
   }
   $11 = $19;
   $9 = $6;
   $11 = $11 | $9;
   $14 = $18;
   $10 = $5;
   if ($11 | ($14 | $10)) {
    break label$3;
   }
   $5 = $1;
   $11 = $2;
   $6 = $11;
   $7 = $3;
   $11 = $4;
   $8 = $11;
   break label$2;
  }
  $11 = $6;
  $10 = $2;
  $9 = $5;
  $14 = $1;
  $13 = ($11 | 0) == ($10 | 0) & $9 >>> 0 > $14 >>> 0 | $11 >>> 0 > $10 >>> 0;
  $11 = $23;
  $9 = $19;
  $14 = $18;
  $10 = $21;
  $12 = ($11 | 0) == ($9 | 0) & $14 >>> 0 > $10 >>> 0 | $9 >>> 0 > $11 >>> 0;
  $14 = $9;
  $10 = $18;
  $9 = $11;
  $11 = $21;
  $15 = ($10 | 0) == ($11 | 0) & ($9 | 0) == ($14 | 0) ? $13 : $12;
  $13 = $15;
  $9 = $13 ? $5 : $1;
  $18 = $9;
  $10 = $6;
  $14 = $2;
  $11 = $13 ? $10 : $14;
  $19 = $11;
  $10 = $13 ? $7 : $3;
  $21 = $10;
  $11 = $8;
  $9 = $4;
  $13 = $13 ? $11 : $9;
  $23 = $13;
  $22 = $10;
  $10 = $13 & 65535;
  $20 = $10;
  $9 = $15;
  $11 = $9 ? $3 : $7;
  $3 = $11;
  $10 = $4;
  $14 = $8;
  $13 = $9 ? $10 : $14;
  $4 = $13;
  $25 = $13 >>> 16 & 32767;
  $11 = $23;
  $16 = $11 >>> 16 & 32767;
  if (!$16) {
   $26 = $17 + 96 | 0;
   $8 = $18;
   $9 = $19;
   $12 = $9;
   $24 = $22;
   $9 = $20;
   $7 = $9;
   $16 = !($9 | $22);
   $14 = $16;
   $10 = $14 ? $18 : $22;
   $9 = $19;
   $13 = $20;
   $11 = $14 ? $9 : $13;
   $9 = Math_clz32($11);
   $10 = ($9 | 0) == 32 ? Math_clz32($10) + 32 | 0 : $9;
   $9 = $16 << 6;
   $13 = $10 + $9 | 0;
   $13 >>> 0 < $9 >>> 0;
   $10 = $7;
   __ashlti3($26, $8, $12, $24, $10, $13 + -15 | 0);
   $14 = $17;
   $10 = HEAP32[$14 + 104 >> 2];
   $22 = $10;
   $12 = HEAP32[$14 + 108 >> 2];
   $20 = $12;
   $12 = HEAP32[$14 + 96 >> 2];
   $18 = $12;
   $10 = HEAP32[$14 + 100 >> 2];
   $19 = $10;
   $16 = 16 - $13 | 0;
  }
  $11 = $15;
  $9 = $11 ? $1 : $5;
  $5 = $9;
  $10 = $2;
  $12 = $6;
  $14 = $11 ? $10 : $12;
  $6 = $14;
  $11 = $3;
  $1 = $11;
  $14 = $4;
  $9 = $14 & 65535;
  $2 = $9;
  if (!$25) {
   $25 = $17 + 80 | 0;
   $8 = $5;
   $9 = $6;
   $13 = $9;
   $24 = $1;
   $9 = $2;
   $7 = $9;
   $15 = !($1 | $9);
   $12 = $15;
   $10 = $12 ? $5 : $1;
   $9 = $6;
   $11 = $2;
   $14 = $12 ? $9 : $11;
   $9 = Math_clz32($14);
   $10 = ($9 | 0) == 32 ? Math_clz32($10) + 32 | 0 : $9;
   $9 = $15 << 6;
   $11 = $10 + $9 | 0;
   $11 >>> 0 < $9 >>> 0;
   $10 = $7;
   __ashlti3($25, $8, $13, $24, $10, $11 + -15 | 0);
   $25 = 16 - $11 | 0;
   $12 = $17;
   $10 = HEAP32[$12 + 80 >> 2];
   $5 = $10;
   $13 = HEAP32[$12 + 84 >> 2];
   $6 = $13;
   $10 = HEAP32[$12 + 92 >> 2];
   $2 = $10;
   $13 = HEAP32[$12 + 88 >> 2];
   $1 = $13;
  }
  $12 = $1;
  $7 = $12 << 3;
  $10 = $2;
  $13 = $10 << 3 | $12 >>> 29;
  $1 = $13;
  $13 = $6;
  $9 = $13 >>> 29 | 0;
  $12 = 0;
  $10 = $12;
  $12 = $1;
  $10 = $12 | $10;
  $13 = $7;
  $12 = $13 | $9;
  $7 = $12;
  $13 = $10 | 524288;
  $8 = $13;
  $10 = $22;
  $13 = $20;
  $12 = $13 << 3 | $10 >>> 29;
  $2 = $12;
  $12 = $19;
  $9 = $12 >>> 29 | 0;
  $12 = $10 << 3;
  $1 = $12 | $9;
  $10 = 0;
  $13 = $10;
  $10 = $2;
  $13 = $13 | $10;
  $2 = $13;
  $10 = $3;
  $9 = $21;
  $22 = $10 ^ $9;
  $13 = $4;
  $12 = $23;
  $12 = $13 ^ $12;
  $20 = $12;
  $13 = $5;
  $5 = $13 << 3;
  $4 = $5;
  $12 = $6;
  $10 = $12 << 3 | $13 >>> 29;
  $6 = $10;
  $3 = $10;
  $15 = $16 - $25 | 0;
  label$11 : {
   if (!$15) {
    break label$11;
   }
   if ($15 >>> 0 > 127) {
    $7 = 0;
    $8 = 0;
    $4 = 1;
    $10 = 0;
    break label$11;
   }
   $10 = $6;
   $13 = $8;
   __ashlti3($17 - -64 | 0, $5, $10, $7, $13, 128 - $15 | 0);
   $13 = $10;
   $10 = $8;
   __lshrti3($17 + 48 | 0, $5, $13, $7, $10, $15);
   $12 = $17;
   $10 = HEAP32[$12 + 56 >> 2];
   $7 = $10;
   $13 = HEAP32[$12 + 60 >> 2];
   $8 = $13;
   $13 = HEAP32[$12 + 48 >> 2];
   $3 = $13;
   $10 = HEAP32[$12 + 52 >> 2];
   $5 = $10;
   $10 = HEAP32[$12 + 64 >> 2];
   $4 = $10;
   $13 = HEAP32[$12 + 68 >> 2];
   $6 = $13;
   $13 = HEAP32[$12 + 72 >> 2];
   $9 = $13;
   $10 = HEAP32[$12 + 76 >> 2];
   $13 = $10;
   $10 = $6;
   $13 = $13 | $10;
   $12 = $4;
   $10 = $12 | $9;
   $12 = ($10 | 0) != 0 | ($13 | 0) != 0;
   $9 = $3;
   $4 = $12 | $9;
   $10 = $5;
  }
  $5 = $4;
  $13 = $10;
  $6 = $13;
  $10 = $1;
  $15 = $10;
  $13 = $2;
  $9 = $13 | 524288;
  $24 = $9;
  $13 = $18;
  $3 = $13 << 3;
  $9 = $19;
  $10 = $9 << 3 | $13 >>> 29;
  $4 = $10;
  $9 = $22;
  $10 = $20;
  label$13 : {
   if (($10 | 0) < -1 ? 1 : ($10 | 0) <= -1 ? $9 >>> 0 > 4294967295 ? 0 : 1 : 0) {
    $12 = $3;
    $13 = $5;
    $14 = $12 - $13 | 0;
    $1 = $14;
    $9 = $4;
    $10 = $6;
    $11 = $10 + ($12 >>> 0 < $13 >>> 0) | 0;
    $11 = $9 - $11 | 0;
    $2 = $11;
    $9 = $15;
    $13 = $7;
    $10 = $9 - $13 | 0;
    $11 = $24;
    $12 = $8;
    $14 = $12 + ($9 >>> 0 < $13 >>> 0) | 0;
    $14 = $11 - $14 | 0;
    $7 = $14;
    $14 = $4;
    $9 = $6;
    $11 = $3;
    $13 = $5;
    $9 = ($14 | 0) == ($9 | 0) & $11 >>> 0 < $13 >>> 0 | $14 >>> 0 < $9 >>> 0;
    $12 = $10 - $9 | 0;
    $5 = $12;
    $11 = $7;
    $10 = $10 >>> 0 < $9 >>> 0;
    $10 = $11 - $10 | 0;
    $6 = $10;
    $13 = $10;
    $10 = $2;
    $13 = $13 | $10;
    $11 = $1;
    $9 = $12;
    if (!($13 | ($11 | $9))) {
     $5 = 0;
     $6 = 0;
     $7 = 0;
     $8 = 0;
     break label$2;
    }
    $13 = $6;
    $10 = $5;
    if (($13 | 0) == 524287 & $10 >>> 0 > 4294967295 | $13 >>> 0 > 524287) {
     break label$13;
    }
    $8 = $17 + 32 | 0;
    $4 = $1;
    $10 = $2;
    $12 = $10;
    $7 = $5;
    $10 = $6;
    $3 = $10;
    $15 = !($5 | $10);
    $14 = $15;
    $11 = $14 ? $1 : $5;
    $10 = $2;
    $9 = $14 ? $10 : $6;
    $10 = Math_clz32($9);
    $11 = ($10 | 0) == 32 ? Math_clz32($11) + 32 | 0 : $10;
    $10 = $15 << 6;
    $13 = $11 + $10 | 0;
    $13 >>> 0 < $10 >>> 0;
    $15 = $13 + -12 | 0;
    $11 = $3;
    __ashlti3($8, $4, $12, $7, $11, $15);
    $16 = $16 - $15 | 0;
    $14 = $17;
    $11 = HEAP32[$14 + 40 >> 2];
    $5 = $11;
    $12 = HEAP32[$14 + 44 >> 2];
    $6 = $12;
    $12 = HEAP32[$14 + 32 >> 2];
    $1 = $12;
    $11 = HEAP32[$14 + 36 >> 2];
    $2 = $11;
    break label$13;
   }
   $11 = $4;
   $12 = $6;
   $13 = $11 + $12 | 0;
   $14 = $3;
   $10 = $5;
   $9 = $14 + $10 | 0;
   if ($9 >>> 0 < $10 >>> 0) {
    $13 = $13 + 1 | 0;
   }
   $1 = $9;
   $14 = $6;
   $2 = $13;
   $3 = ($14 | 0) == ($13 | 0) & $9 >>> 0 < $5 >>> 0 | $13 >>> 0 < $14 >>> 0;
   $11 = $8;
   $13 = $24;
   $9 = $11 + $13 | 0;
   $14 = $15;
   $10 = $7;
   $12 = $14 + $10 | 0;
   if ($12 >>> 0 < $14 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $14 = $12;
   $12 = $9;
   $11 = $3;
   $13 = $14 + $11 | 0;
   if ($13 >>> 0 < $14 >>> 0) {
    $12 = $12 + 1 | 0;
   }
   $5 = $13;
   $6 = $12;
   $11 = $12 & 1048576;
   if (!$11) {
    break label$13;
   }
   $12 = $1;
   $7 = $12 & 1;
   $9 = 0;
   $3 = $9;
   $11 = $5;
   $12 = $11 << 31;
   $4 = $12;
   $12 = $2;
   $11 = $12 >>> 1 | 0;
   $9 = $1;
   $14 = ($12 & 1) << 31 | $9 >>> 1;
   $9 = $11;
   $11 = $4;
   $9 = $11 | $9;
   $12 = 0;
   $14 = $14 | $12;
   $11 = $7;
   $1 = $14 | $11;
   $12 = $9;
   $9 = $3;
   $12 = $12 | $9;
   $2 = $12;
   $16 = $16 + 1 | 0;
   $9 = $5;
   $5 = ($6 & 1) << 31 | $9 >>> 1;
   $12 = $6;
   $11 = $12 >>> 1 | 0;
   $6 = $11;
  }
  $7 = 0;
  $11 = $23;
  $9 = $11 & -2147483648;
  $8 = $9;
  if (($16 | 0) >= 32767) {
   $11 = $7;
   $7 = $11;
   $9 = $8;
   $12 = $9 | 2147418112;
   $8 = $12;
   $5 = 0;
   $6 = 0;
   break label$2;
  }
  $15 = 0;
  label$17 : {
   if (($16 | 0) > 0) {
    $15 = $16;
    break label$17;
   }
   $12 = $2;
   $11 = $6;
   __ashlti3($17 + 16 | 0, $1, $12, $5, $11, $16 + 127 | 0);
   $11 = $12;
   $12 = $6;
   __lshrti3($17, $1, $11, $5, $12, 1 - $16 | 0);
   $9 = $17;
   $12 = HEAP32[$9 >> 2];
   $1 = $12;
   $11 = HEAP32[$9 + 4 >> 2];
   $2 = $11;
   $11 = HEAP32[$9 + 16 >> 2];
   $3 = $11;
   $12 = HEAP32[$9 + 20 >> 2];
   $4 = $12;
   $12 = HEAP32[$9 + 24 >> 2];
   $14 = $12;
   $11 = HEAP32[$9 + 28 >> 2];
   $12 = $11;
   $11 = $4;
   $12 = $11 | $12;
   $9 = $3;
   $11 = $14 | $9;
   $14 = $1;
   $9 = ($11 | 0) != 0 | ($12 | 0) != 0;
   $1 = $14 | $9;
   $11 = $2;
   $12 = $11;
   $2 = $12;
   $11 = $17;
   $12 = HEAP32[$11 + 8 >> 2];
   $5 = $12;
   $14 = HEAP32[$11 + 12 >> 2];
   $6 = $14;
  }
  $14 = $6;
  $12 = $14 >>> 3 | 0;
  $11 = $5;
  $14 = ($14 & 7) << 29 | $11 >>> 3;
  $3 = $14;
  $14 = $8;
  $11 = $12 & 65535;
  $14 = $14 | $11;
  $4 = $14;
  $12 = $3;
  $9 = $7;
  $14 = $12 | $9;
  $18 = $14 | 0;
  $11 = $15;
  $12 = $11 << 16;
  $11 = $12;
  $12 = $4;
  $11 = $11 | $12;
  $3 = $11;
  $12 = $5;
  $14 = $12 << 29;
  $4 = $14;
  $11 = $1;
  $9 = ($2 & 7) << 29 | $11 >>> 3;
  $14 = $2;
  $12 = $14 >>> 3 | 0;
  $11 = $12;
  $12 = $4;
  $11 = $11 | $12;
  $8 = $11;
  $13 = $11;
  $14 = 0;
  $7 = $14 | $9;
  $12 = $7;
  $16 = $1 & 7;
  $9 = $16 >>> 0 > 4;
  $10 = $12 + $9 | 0;
  if ($10 >>> 0 < $9 >>> 0) {
   $13 = $13 + 1 | 0;
  }
  $5 = $10;
  $6 = $13;
  $12 = $8;
  $9 = $7;
  $12 = ($13 | 0) == ($12 | 0) & $10 >>> 0 < $9 >>> 0 | $13 >>> 0 < $12 >>> 0;
  $11 = $3;
  $10 = $11;
  $9 = $18;
  $14 = $12 + $9 | 0;
  if ($14 >>> 0 < $12 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $3 = $14;
  $4 = $10;
  $11 = $5;
  $13 = ($16 | 0) == 4;
  $12 = $13 ? $11 & 1 : 0;
  $1 = $12;
  $12 = $6;
  $9 = 0;
  $10 = $13 ? $9 : 0;
  $2 = $10;
  $14 = $12 + $10 | 0;
  $13 = $1;
  $9 = $11;
  $11 = $13 + $9 | 0;
  if ($11 >>> 0 < $9 >>> 0) {
   $14 = $14 + 1 | 0;
  }
  $5 = $11;
  $6 = $14;
  $13 = $2;
  $10 = $11;
  $9 = $1;
  $13 = ($14 | 0) == ($13 | 0) & $10 >>> 0 < $9 >>> 0 | $14 >>> 0 < $13 >>> 0;
  $10 = $4;
  $11 = $10;
  $9 = $3;
  $12 = $13 + $9 | 0;
  if ($12 >>> 0 < $13 >>> 0) {
   $11 = $11 + 1 | 0;
  }
  $7 = $12;
  $8 = $11;
 }
 $9 = $0;
 HEAP32[$9 >> 2] = $5;
 $11 = $6;
 HEAP32[$9 + 4 >> 2] = $11;
 HEAP32[$9 + 8 >> 2] = $7;
 $11 = $8;
 HEAP32[$9 + 12 >> 2] = $11;
 $0 = $17 + 112 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function neopt__jhelper__Parse_28neopt__ITextReader__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 112 | 0;
 $6 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     if (($2 | 0) > -1) {
      while (1) {
       label$8 : {
        label$9 : {
         if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 32) {
          break label$9;
         }
         if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 9) {
          break label$9;
         }
         if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 13) {
          break label$9;
         }
         if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) != 10) {
          break label$8;
         }
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
        continue;
       }
       break;
      }
      label$10 : {
       label$11 : {
        $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
        $6 = $4 & 255;
        $7 = $6 + -34 | 0;
        if ($7 >>> 0 > 5) {
         if (($6 | 0) != 91) {
          break label$11;
         }
         neopt__jhelper__ParseArray_28neopt__ITextReader__2c_20int_29($3 + 72 | 0, $1, $2);
         HEAP32[$0 >> 2] = HEAP32[$3 + 72 >> 2];
         break label$10;
        }
        label$13 : {
         switch ($7 - 1 | 0) {
         case 0:
         case 1:
         case 2:
         case 3:
          break label$11;
         default:
          break label$13;
         }
        }
        neopt__jhelper__ParseString_28neopt__ITextReader__2c_20int_29($3 + 72 | 0, $1, 100);
        HEAP32[$0 >> 2] = HEAP32[$3 + 72 >> 2];
        break label$10;
       }
       if (!(($4 + -48 & 255) >>> 0 > 9 ? ($4 | 0) != 45 : 0)) {
        neopt__jhelper__ParseNumber_28neopt__ITextReader__2c_20int_29($3 + 72 | 0, $1, 100);
        HEAP32[$0 >> 2] = HEAP32[$3 + 72 >> 2];
        break label$10;
       }
       label$16 : {
        $4 = ($4 & 255) + -102 | 0;
        if ($4 >>> 0 > 14) {
         break label$16;
        }
        label$17 : {
         switch ($4 - 1 | 0) {
         default:
          neopt__jhelper__ParseBoolean_28neopt__ITextReader__2c_20int_29($3 + 72 | 0, $1, 100);
          HEAP32[$0 >> 2] = HEAP32[$3 + 72 >> 2];
          break label$10;
         case 0:
         case 1:
         case 2:
         case 3:
         case 4:
         case 5:
         case 6:
         case 8:
         case 9:
         case 10:
         case 11:
         case 12:
          break label$16;
         case 7:
          break label$17;
         }
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0) != 110) {
         break label$5;
        }
        $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
        $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
        $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
        if (($2 | 0) != 117 | ($4 | 0) != 108 | ($1 | 0) != 108) {
         break label$5;
        }
        HEAP32[$0 >> 2] = 0;
        break label$10;
       }
       $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
       if (($4 | 0) != 123) {
        break label$4;
       }
       while (1) {
        label$20 : {
         label$21 : {
          if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 32) {
           break label$21;
          }
          if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 9) {
           break label$21;
          }
          if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 13) {
           break label$21;
          }
          if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) != 10) {
           break label$20;
          }
         }
         FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
         continue;
        }
        break;
       }
       $5 = operator_20new_28unsigned_20long_29(16);
       HEAP32[$5 + 8 >> 2] = 0;
       HEAP32[$5 + 12 >> 2] = 0;
       HEAP32[$5 >> 2] = 4180;
       HEAP32[$5 + 4 >> 2] = $5 + 8;
       $7 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
       $4 = HEAP32[$1 >> 2];
       if (($7 | 0) != 125) {
        $7 = $5 + 4 | 0;
        $6 = $2 + -1 | 0;
        while (1) {
         if ((FUNCTION_TABLE[HEAP32[$4 >> 2]]($1) | 0) == 44) {
          FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
         }
         while (1) {
          label$26 : {
           label$27 : {
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 32) {
             break label$27;
            }
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 9) {
             break label$27;
            }
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 13) {
             break label$27;
            }
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) != 10) {
             break label$26;
            }
           }
           FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
           continue;
          }
          break;
         }
         neopt__jhelper__ParseString_28neopt__ITextReader__2c_20int_29($3 + 104 | 0, $1, 100);
         $2 = HEAP32[$3 + 104 >> 2];
         FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($3 + 72 | 0, $2);
         $2 = HEAP32[$3 + 104 >> 2];
         HEAP32[$3 + 104 >> 2] = 0;
         if ($2) {
          HEAP32[$2 >> 2] = 4096;
          if (HEAP8[$2 + 27 | 0] <= -1) {
           operator_20delete_28void__29(HEAP32[$2 + 16 >> 2]);
          }
          HEAP32[$2 >> 2] = 4180;
          std____2____tree_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____map_value_compare_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2__less_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20true__2c_20std____2__allocator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___20__20___destroy_28std____2____tree_node_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20void____29($2 + 4 | 0, HEAP32[$2 + 8 >> 2]);
          operator_20delete_28void__29($2);
         }
         while (1) {
          label$31 : {
           label$32 : {
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 32) {
             break label$32;
            }
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 9) {
             break label$32;
            }
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 13) {
             break label$32;
            }
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) != 10) {
             break label$31;
            }
           }
           FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
           continue;
          }
          break;
         }
         if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0) != 58) {
          break label$3;
         }
         neopt__jhelper__Parse_28neopt__ITextReader__2c_20int_29($3 - -64 | 0, $1, $6);
         $2 = HEAP32[$3 + 64 >> 2];
         HEAP32[$3 + 64 >> 2] = 0;
         HEAP32[$3 + 96 >> 2] = $3 + 72;
         std____2__pair_std____2____tree_iterator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____tree_node_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20void____2c_20long__2c_20bool__20std____2____tree_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____map_value_compare_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2__less_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20true__2c_20std____2__allocator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___20__20_____emplace_unique_key_args_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___2c_20std____2__tuple___20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const_____2c_20std____2__tuple_____29($3 + 104 | 0, $7, $3 + 72 | 0, 4520, $3 + 96 | 0, $3 + 88 | 0);
         HEAP32[HEAP32[$3 + 104 >> 2] + 28 >> 2] = $2;
         while (1) {
          label$34 : {
           label$35 : {
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 32) {
             break label$35;
            }
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 9) {
             break label$35;
            }
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 13) {
             break label$35;
            }
            if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) != 10) {
             break label$34;
            }
           }
           FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
           continue;
          }
          break;
         }
         $2 = HEAP32[$3 + 64 >> 2];
         HEAP32[$3 + 64 >> 2] = 0;
         if ($2) {
          HEAP32[$2 >> 2] = 4180;
          std____2____tree_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____map_value_compare_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2__less_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20true__2c_20std____2__allocator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___20__20___destroy_28std____2____tree_node_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20void____29($2 + 4 | 0, HEAP32[$2 + 8 >> 2]);
          operator_20delete_28void__29($2);
         }
         if (HEAP8[$3 + 83 | 0] <= -1) {
          operator_20delete_28void__29(HEAP32[$3 + 72 >> 2]);
         }
         $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
         $4 = HEAP32[$1 >> 2];
         if (($2 | 0) != 125) {
          continue;
         }
         break;
        }
       }
       FUNCTION_TABLE[HEAP32[$4 + 4 >> 2]]($1) | 0;
       HEAP32[$0 >> 2] = $5;
      }
      $0 = $3 + 112 | 0;
      if ($0 >>> 0 < global$2 >>> 0) {
       __handle_stack_overflow();
      }
      global$0 = $0;
      return;
     }
     HEAP32[$3 + 4 >> 2] = 3223;
     HEAP32[$3 >> 2] = 3217;
     iprintf(3084, $3);
     break label$2;
    }
    HEAP32[$3 + 52 >> 2] = 4494;
    HEAP32[$3 + 48 >> 2] = 4484;
    iprintf(3084, $3 + 48 | 0);
    break label$2;
   }
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__endl_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(24288, 3268), $4), 1949));
   HEAP32[$3 + 36 >> 2] = 3286;
   HEAP32[$3 + 32 >> 2] = 3217;
   iprintf(3084, $3 + 32 | 0);
   break label$2;
  }
  HEAP32[$3 + 20 >> 2] = 3327;
  HEAP32[$3 + 16 >> 2] = 3217;
  iprintf(3084, $3 + 16 | 0);
 }
 exit(1);
 abort();
}
function std____2__locale____imp____imp_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 HEAP32[$0 >> 2] = 14128;
 $1 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___vector_28unsigned_20long_29($0 + 16 | 0, 28);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($0 + 176 | 0, 14117);
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___clear_28_29($1);
 std____2__collate_char___20std____2___28anonymous_20namespace_29__make_std____2__collate_char__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__collate_char__20__28std____2__collate_char___29($0, 26704);
 std____2__collate_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__collate_wchar_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__collate_wchar_t__20__28std____2__collate_wchar_t___29($0, 26712);
 std____2__ctype_char___20std____2___28anonymous_20namespace_29__make_std____2__ctype_char__2c_20std__nullptr_t_2c_20bool_2c_20unsigned_20int__28std__nullptr_t_2c_20bool_2c_20unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__ctype_char__20__28std____2__ctype_char___29($0, 26720);
 std____2__ctype_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__ctype_wchar_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__ctype_wchar_t__20__28std____2__ctype_wchar_t___29($0, 26736);
 std____2__codecvt_char_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char_2c_20char_2c_20__mbstate_t___29($0, 26744);
 std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___29($0, 26752);
 std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___29($0, 26768);
 std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___29($0, 26776);
 std____2__numpunct_char___20std____2___28anonymous_20namespace_29__make_std____2__numpunct_char__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__numpunct_char__20__28std____2__numpunct_char___29($0, 26784);
 std____2__numpunct_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__numpunct_wchar_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__numpunct_wchar_t__20__28std____2__numpunct_wchar_t___29($0, 26816);
 std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 26848);
 std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 26856);
 std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 26864);
 std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 26872);
 std____2__moneypunct_char_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20false__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20false__20__28std____2__moneypunct_char_2c_20false___29($0, 26880);
 std____2__moneypunct_char_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20true__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20true__20__28std____2__moneypunct_char_2c_20true___29($0, 26888);
 std____2__moneypunct_wchar_t_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20false__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__moneypunct_wchar_t_2c_20false___29($0, 26896);
 std____2__moneypunct_wchar_t_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20true__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__moneypunct_wchar_t_2c_20true___29($0, 26904);
 std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 26912);
 std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 26920);
 std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 26928);
 std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 26936);
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 26944);
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 26960);
 std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, 26976);
 std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, 26992);
 std____2__messages_char___20std____2___28anonymous_20namespace_29__make_std____2__messages_char__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__messages_char__20__28std____2__messages_char___29($0, 27008);
 std____2__messages_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__messages_wchar_t__2c_20unsigned_20int__28unsigned_20int_29();
 void_20std____2__locale____imp__install_std____2__messages_wchar_t__20__28std____2__messages_wchar_t___29($0, 27016);
 return $0;
}
function __intscan($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $15 = global$0 - 16 | 0;
 $6 = $15;
 if ($15 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if ($1 >>> 0 <= 36) {
        while (1) {
         $5 = HEAP32[$0 + 4 >> 2];
         label$10 : {
          if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $5 + 1;
           $5 = HEAPU8[$5 | 0];
           break label$10;
          }
          $5 = __shgetc($0);
         }
         if (isspace($5)) {
          continue;
         }
         break;
        }
        $6 = $5 + -43 | 0;
        label$12 : {
         if ($6 >>> 0 > 2 | !($6 - 1)) {
          break label$12;
         }
         $16 = ($5 | 0) == 45 ? -1 : 0;
         $5 = HEAP32[$0 + 4 >> 2];
         if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $5 + 1;
          $5 = HEAPU8[$5 | 0];
          break label$12;
         }
         $5 = __shgetc($0);
        }
        label$14 : {
         if (!($1 & -17 | ($5 | 0) != 48)) {
          $5 = HEAP32[$0 + 4 >> 2];
          label$16 : {
           if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $5 + 1;
            $5 = HEAPU8[$5 | 0];
            break label$16;
           }
           $5 = __shgetc($0);
          }
          if (($5 & -33) == 88) {
           $5 = HEAP32[$0 + 4 >> 2];
           label$19 : {
            if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = $5 + 1;
             $5 = HEAPU8[$5 | 0];
             break label$19;
            }
            $5 = __shgetc($0);
           }
           $1 = 16;
           if (HEAPU8[$5 + 6833 | 0] < 16) {
            break label$6;
           }
           if (!HEAP32[$0 + 104 >> 2]) {
            $3 = 0;
            $4 = 0;
            if ($2) {
             break label$2;
            }
            break label$3;
           }
           $5 = HEAP32[$0 + 4 >> 2];
           HEAP32[$0 + 4 >> 2] = $5 + -1;
           if (!$2) {
            break label$3;
           }
           HEAP32[$0 + 4 >> 2] = $5 + -2;
           $3 = 0;
           $4 = 0;
           break label$2;
          }
          if ($1) {
           break label$14;
          }
          $1 = 8;
          break label$6;
         }
         $1 = $1 ? $1 : 10;
         if ($1 >>> 0 > HEAPU8[$5 + 6833 | 0]) {
          break label$14;
         }
         if (HEAP32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
         }
         $3 = 0;
         $4 = 0;
         __shlim($0, 0, 0);
         wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break label$2;
        }
        if (($1 | 0) != 10) {
         break label$6;
        }
        $2 = $5 + -48 | 0;
        if ($2 >>> 0 <= 9) {
         $1 = 0;
         while (1) {
          $1 = Math_imul($1, 10);
          $5 = HEAP32[$0 + 4 >> 2];
          label$25 : {
           if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $5 + 1;
            $5 = HEAPU8[$5 | 0];
            break label$25;
           }
           $5 = __shgetc($0);
          }
          $1 = $1 + $2 | 0;
          $2 = $5 + -48 | 0;
          if ($1 >>> 0 < 429496729 ? $2 >>> 0 <= 9 : 0) {
           continue;
          }
          break;
         }
         $12 = $1;
        }
        if ($2 >>> 0 > 9) {
         break label$7;
        }
        $11 = __wasm_i64_mul($12, 0, 10, 0);
        $14 = $11;
        $7 = i64toi32_i32$HIGH_BITS;
        $1 = $7;
        $11 = $2;
        while (1) {
         $5 = HEAP32[$0 + 4 >> 2];
         label$28 : {
          if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $5 + 1;
           $5 = HEAPU8[$5 | 0];
           break label$28;
          }
          $5 = __shgetc($0);
         }
         $7 = $1;
         $6 = $7;
         $10 = $14;
         $9 = $11;
         $8 = $10 + $9 | 0;
         if ($8 >>> 0 < $9 >>> 0) {
          $6 = $6 + 1 | 0;
         }
         $12 = $8;
         $13 = $6;
         $2 = $5 + -48 | 0;
         if ($2 >>> 0 > 9) {
          break label$7;
         }
         $7 = $12;
         if (($13 | 0) == 429496729 & $7 >>> 0 >= 2576980378 | $13 >>> 0 > 429496729) {
          break label$7;
         }
         $7 = $13;
         $6 = __wasm_i64_mul($12, $7, 10, 0);
         $14 = $6;
         $11 = $2;
         $7 = i64toi32_i32$HIGH_BITS;
         $1 = $7;
         $6 = $7;
         $7 = $14;
         $10 = $2 ^ -1;
         if (($6 | 0) == -1 & $7 >>> 0 <= $10 >>> 0 | $6 >>> 0 < 4294967295) {
          continue;
         }
         break;
        }
        $1 = 10;
        break label$5;
       }
       wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $3 = 0;
       $4 = 0;
       break label$2;
      }
      $1 = 10;
      if ($2 >>> 0 <= 9) {
       break label$5;
      }
      break label$4;
     }
     if ($1 + -1 & $1) {
      $2 = HEAPU8[$5 + 6833 | 0];
      if ($1 >>> 0 > $2 >>> 0) {
       $6 = 0;
       while (1) {
        $6 = Math_imul($1, $6) + $2 | 0;
        $8 = $6 >>> 0 <= 119304646;
        $7 = $1;
        $5 = HEAP32[$0 + 4 >> 2];
        label$33 : {
         if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $5 + 1;
          $5 = HEAPU8[$5 | 0];
          break label$33;
         }
         $5 = __shgetc($0);
        }
        $2 = HEAPU8[$5 + 6833 | 0];
        if ($7 >>> 0 > $2 >>> 0 ? $8 : 0) {
         continue;
        }
        break;
       }
       $12 = $6;
      }
      if ($1 >>> 0 <= $2 >>> 0) {
       break label$5;
      }
      $14 = $1;
      while (1) {
       $7 = $13;
       $6 = __wasm_i64_mul($12, $7, $14, 0);
       $11 = $6;
       $7 = i64toi32_i32$HIGH_BITS;
       $17 = $7;
       $2 = $2 & 255;
       $7 = $2;
       $9 = $7 ^ -1;
       $10 = $17;
       if (($10 | 0) == -1 & $6 >>> 0 > $9 >>> 0 | $10 >>> 0 > 4294967295) {
        break label$5;
       }
       $5 = HEAP32[$0 + 4 >> 2];
       label$36 : {
        if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $5 + 1;
         $5 = HEAPU8[$5 | 0];
         break label$36;
        }
        $5 = __shgetc($0);
       }
       $6 = $17;
       $8 = $6;
       $7 = $2;
       $9 = $11;
       $11 = $7 + $9 | 0;
       if ($11 >>> 0 < $7 >>> 0) {
        $8 = $8 + 1 | 0;
       }
       $12 = $11;
       $13 = $8;
       $2 = HEAPU8[$5 + 6833 | 0];
       if ($1 >>> 0 <= $2 >>> 0) {
        break label$5;
       }
       $6 = $13;
       __multi3($15, $14, 0, 0, 0, $12, $6, 0, 0);
       $9 = $15;
       $7 = HEAP32[$9 + 8 >> 2];
       $6 = HEAP32[$9 + 12 >> 2];
       if (!($7 | $6)) {
        continue;
       }
       break;
      }
      break label$5;
     }
     $14 = HEAP8[(Math_imul($1, 23) >>> 5 & 7) + 7089 | 0];
     $2 = HEAPU8[$5 + 6833 | 0];
     if ($1 >>> 0 > $2 >>> 0) {
      $6 = 0;
      while (1) {
       $6 = $6 << $14 | $2;
       $9 = $6 >>> 0 <= 134217727;
       $8 = $1;
       $5 = HEAP32[$0 + 4 >> 2];
       label$40 : {
        if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $5 + 1;
         $5 = HEAPU8[$5 | 0];
         break label$40;
        }
        $5 = __shgetc($0);
       }
       $2 = HEAPU8[$5 + 6833 | 0];
       if ($8 >>> 0 > $2 >>> 0 ? $9 : 0) {
        continue;
       }
       break;
      }
      $12 = $6;
     }
     $8 = $14;
     $10 = $8 & 31;
     if (32 <= ($8 & 63) >>> 0) {
      $11 = -1 >>> $10 | 0;
     } else {
      $7 = -1 >>> $10 | 0;
      $11 = (1 << $10) - 1 << 32 - $10 | -1 >>> $10;
     }
     $17 = $7;
     $6 = $11;
     $8 = $12;
     if (!$7 & $6 >>> 0 < $8 >>> 0 | $7 >>> 0 < 0 | $1 >>> 0 <= $2 >>> 0) {
      break label$5;
     }
     while (1) {
      $2 = $2 & 255;
      $7 = $13;
      $6 = $12;
      $9 = $14;
      $10 = $9 & 31;
      if (32 <= ($9 & 63) >>> 0) {
       $8 = $6 << $10;
       $9 = 0;
      } else {
       $8 = (1 << $10) - 1 & $6 >>> 32 - $10 | $7 << $10;
       $9 = $6 << $10;
      }
      $6 = $8;
      $7 = $2;
      $12 = $7 | $9;
      $13 = $6;
      $5 = HEAP32[$0 + 4 >> 2];
      label$43 : {
       if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $5 + 1;
        $5 = HEAPU8[$5 | 0];
        break label$43;
       }
       $5 = __shgetc($0);
      }
      $7 = $17;
      $6 = $13;
      $8 = $12;
      $9 = $11;
      if (($7 | 0) == ($6 | 0) & $8 >>> 0 > $9 >>> 0 | $6 >>> 0 > $7 >>> 0) {
       break label$5;
      }
      $2 = HEAPU8[$5 + 6833 | 0];
      if ($1 >>> 0 > $2 >>> 0) {
       continue;
      }
      break;
     }
    }
    if ($1 >>> 0 <= HEAPU8[$5 + 6833 | 0]) {
     break label$4;
    }
    while (1) {
     $2 = $1;
     $5 = HEAP32[$0 + 4 >> 2];
     label$46 : {
      if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $5 + 1;
       $5 = HEAPU8[$5 | 0];
       break label$46;
      }
      $5 = __shgetc($0);
     }
     if ($2 >>> 0 > HEAPU8[$5 + 6833 | 0]) {
      continue;
     }
     break;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $6 = 0;
    $9 = $3;
    $16 = !($6 | $9 & 1) ? $16 : 0;
    $12 = $9;
    $8 = $4;
    $6 = $8;
    $13 = $6;
   }
   if (HEAP32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
   }
   label$49 : {
    $9 = $4;
    $6 = $13;
    $8 = $12;
    $7 = $3;
    if (($9 | 0) == ($6 | 0) & $8 >>> 0 < $7 >>> 0 | $6 >>> 0 < $9 >>> 0) {
     break label$49;
    }
    if (!($16 | $3 & 1)) {
     wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $11 = $4 + -1 | 0;
     $10 = $3 + -1 | 0;
     if ($10 >>> 0 < 4294967295) {
      $11 = $11 + 1 | 0;
     }
     $3 = $10;
     $4 = $11;
     break label$2;
    }
    $7 = $4;
    $8 = $12;
    $9 = $3;
    if (($7 | 0) == ($13 | 0) & $8 >>> 0 <= $9 >>> 0 | $13 >>> 0 < $7 >>> 0) {
     break label$49;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    break label$2;
   }
   $11 = $16;
   $8 = $11 >> 31;
   $3 = $11;
   $4 = $8;
   $11 = $8;
   $8 = $13;
   $11 = $11 ^ $8;
   $7 = $3;
   $9 = $12;
   $8 = $7 ^ $9;
   $6 = $8 - $7 | 0;
   $3 = $6;
   $9 = $4;
   $10 = $9 + ($8 >>> 0 < $7 >>> 0) | 0;
   $10 = $11 - $10 | 0;
   $4 = $10;
   break label$2;
  }
  $3 = 0;
  $4 = 0;
  __shlim($0, 0, 0);
 }
 $0 = $15 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 $10 = $4;
 i64toi32_i32$HIGH_BITS = $10;
 $8 = $3;
 return $8;
}
function myteststr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = global$0 - 112 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  if ($1 >>> 0 < 4294967280) {
   label$4 : {
    label$5 : {
     if ($1 >>> 0 >= 11) {
      $4 = $1 + 16 & -16;
      $3 = operator_20new_28unsigned_20long_29($4);
      HEAP32[$2 + 96 >> 2] = $4 | -2147483648;
      HEAP32[$2 + 88 >> 2] = $3;
      HEAP32[$2 + 92 >> 2] = $1;
      break label$5;
     }
     HEAP8[$2 + 99 | 0] = $1;
     $3 = $2 + 88 | 0;
     if (!$1) {
      break label$4;
     }
    }
    memcpy($3, $0, $1);
   }
   HEAP8[$1 + $3 | 0] = 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($2 + 88 | 0, 88);
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 72 | 0, $2 + 88 | 0);
   $6 = HEAP32[$0 >> 2];
   $7 = HEAP8[$0 + 11 | 0];
   HEAP8[$2 + 58 | 0] = 0;
   HEAP16[$2 + 56 >> 1] = 12337;
   HEAP8[$2 + 67 | 0] = 2;
   HEAP8[$2 + 42 | 0] = 0;
   HEAP16[$2 + 40 >> 1] = 12338;
   HEAP8[$2 + 51 | 0] = 2;
   $4 = $2 + 24 | 0;
   $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 1819, 21), $2 + 56 | 0, 2), 1841, 1), $2 + 40 | 0, 2);
   std____2__ios_base__getloc_28_29_20const($4, $1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0);
   $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 24 | 0, 25448);
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
   std____2__locale___locale_28_29($2 + 24 | 0);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($1, $3);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($1);
   $4 = $2 + 24 | 0;
   $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 1843, 3);
   std____2__ios_base__getloc_28_29_20const($4, $1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0);
   $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 24 | 0, 25448);
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
   std____2__locale___locale_28_29($2 + 24 | 0);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($1, $3);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($1);
   $1 = operator_20new_28unsigned_20long_29(16);
   HEAP32[$2 + 24 >> 2] = $1;
   HEAP32[$2 + 28 >> 2] = 12;
   HEAP32[$2 + 32 >> 2] = -2147483632;
   HEAP8[$1 + 12 | 0] = 0;
   $4 = HEAPU8[1855] | HEAPU8[1856] << 8 | (HEAPU8[1857] << 16 | HEAPU8[1858] << 24);
   HEAP8[$1 + 8 | 0] = $4;
   HEAP8[$1 + 9 | 0] = $4 >>> 8;
   HEAP8[$1 + 10 | 0] = $4 >>> 16;
   HEAP8[$1 + 11 | 0] = $4 >>> 24;
   $4 = HEAPU8[1851] | HEAPU8[1852] << 8 | (HEAPU8[1853] << 16 | HEAPU8[1854] << 24);
   $5 = HEAPU8[1847] | HEAPU8[1848] << 8 | (HEAPU8[1849] << 16 | HEAPU8[1850] << 24);
   HEAP8[$1 | 0] = $5;
   HEAP8[$1 + 1 | 0] = $5 >>> 8;
   HEAP8[$1 + 2 | 0] = $5 >>> 16;
   HEAP8[$1 + 3 | 0] = $5 >>> 24;
   HEAP8[$1 + 4 | 0] = $4;
   HEAP8[$1 + 5 | 0] = $4 >>> 8;
   HEAP8[$1 + 6 | 0] = $4 >>> 16;
   HEAP8[$1 + 7 | 0] = $4 >>> 24;
   $4 = $2 + 8 | 0;
   $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28void_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 1860, 19), $1);
   std____2__ios_base__getloc_28_29_20const($4, $3 + HEAP32[HEAP32[$3 >> 2] + -12 >> 2] | 0);
   $4 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 25448);
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 28 >> 2]]($4, 10) | 0;
   std____2__locale___locale_28_29($2 + 8 | 0);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $4);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
   $4 = bignum_add((HEAP8[$2 + 67 | 0] < 0 ? HEAP32[$2 + 56 >> 2] : $2 + 56 | 0) | 0, (HEAP8[$2 + 51 | 0] < 0 ? HEAP32[$2 + 40 >> 2] : $2 + 40 | 0) | 0, $1 | 0) | 0;
   $5 = $2 + 8 | 0;
   $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28void_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 1880, 19), $1);
   std____2__ios_base__getloc_28_29_20const($5, $3 + HEAP32[HEAP32[$3 >> 2] + -12 >> 2] | 0);
   $5 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 25448);
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($5, 10) | 0;
   std____2__locale___locale_28_29($2 + 8 | 0);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $5);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
   $5 = $2 + 8 | 0;
   $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 1900, 28), $4), 1929, 19), 1949, 1);
   std____2__ios_base__getloc_28_29_20const($5, $3 + HEAP32[HEAP32[$3 >> 2] + -12 >> 2] | 0);
   $4 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 25448);
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 28 >> 2]]($4, 10) | 0;
   std____2__locale___locale_28_29($2 + 8 | 0);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $4);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
   $3 = strlen($1);
   if ($3 >>> 0 >= 4294967280) {
    break label$2;
   }
   label$7 : {
    label$8 : {
     if ($3 >>> 0 >= 11) {
      $5 = $3 + 16 & -16;
      $4 = operator_20new_28unsigned_20long_29($5);
      HEAP32[$2 + 16 >> 2] = $5 | -2147483648;
      HEAP32[$2 + 8 >> 2] = $4;
      HEAP32[$2 + 12 >> 2] = $3;
      $5 = $2 + 8 | 0;
      break label$8;
     }
     HEAP8[$2 + 19 | 0] = $3;
     $5 = $2 + 8 | 0;
     $4 = $5;
     if (!$3) {
      break label$7;
     }
    }
    memcpy($4, $1, $3);
   }
   HEAP8[$3 + $4 | 0] = 0;
   $4 = $2 + 104 | 0;
   $8 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 1951, 7);
   $1 = HEAPU8[$5 + 11 | 0];
   $3 = $1 << 24 >> 24 < 0;
   $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($8, $3 ? HEAP32[$2 + 8 >> 2] : $2 + 8 | 0, $3 ? HEAP32[$2 + 12 >> 2] : $1);
   std____2__ios_base__getloc_28_29_20const($4, $1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0);
   $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 104 | 0, 25448);
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
   std____2__locale___locale_28_29($2 + 104 | 0);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($1, $3);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($1);
   if (HEAP8[$5 + 11 | 0] <= -1) {
    operator_20delete_28void__29(HEAP32[$2 + 8 >> 2]);
   }
   if (HEAP8[$2 + 35 | 0] <= -1) {
    operator_20delete_28void__29(HEAP32[$2 + 24 >> 2]);
   }
   if (HEAP8[$2 + 51 | 0] <= -1) {
    operator_20delete_28void__29(HEAP32[$2 + 40 >> 2]);
   }
   if (HEAP8[$2 + 67 | 0] <= -1) {
    operator_20delete_28void__29(HEAP32[$2 + 56 >> 2]);
   }
   $1 = ($7 | 0) < 0;
   if (HEAP8[$0 + 11 | 0] <= -1) {
    operator_20delete_28void__29(HEAP32[$0 >> 2]);
   }
   $1 = $1 ? $6 : $2 + 72 | 0;
   if (HEAP8[$2 + 99 | 0] <= -1) {
    operator_20delete_28void__29(HEAP32[$2 + 88 >> 2]);
   }
   $0 = $2 + 112 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return $1 | 0;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const($2 + 88 | 0);
  abort();
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($2 + 8 | 0);
 abort();
}
function Neo__Cryptography__ECC__ECPoint__API_FromJsonStr_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $2 = global$0 - 384 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = $2 + 328 | 0;
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 312 | 0, $1);
 neopt__jhelper__Parse_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($3, $1, 100);
 if (HEAP8[$1 + 11 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$1 >> 2]);
 }
 HEAP8[$2 + 291 | 0] = 1;
 HEAP16[$2 + 280 >> 1] = 88;
 $1 = HEAP32[$2 + 328 >> 2];
 HEAP32[$2 + 152 >> 2] = $2 + 280;
 $1 = $1 + 4 | 0;
 std____2__pair_std____2____tree_iterator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____tree_node_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20void____2c_20long__2c_20bool__20std____2____tree_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____map_value_compare_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2__less_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20true__2c_20std____2__allocator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___20__20_____emplace_unique_key_args_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___2c_20std____2__tuple___20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const_____2c_20std____2__tuple_____29($2 + 336 | 0, $1, $2 + 280 | 0, 4520, $2 + 152 | 0, $2 + 56 | 0);
 $4 = HEAP32[HEAP32[$2 + 336 >> 2] + 28 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($2 + 296 | 0, $4);
 if (HEAP8[$2 + 291 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 + 280 >> 2]);
 }
 HEAP8[$2 + 259 | 0] = 1;
 HEAP16[$2 + 248 >> 1] = 89;
 HEAP32[$2 + 152 >> 2] = $2 + 248;
 std____2__pair_std____2____tree_iterator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____tree_node_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20void____2c_20long__2c_20bool__20std____2____tree_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____map_value_compare_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2__less_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20true__2c_20std____2__allocator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___20__20_____emplace_unique_key_args_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___2c_20std____2__tuple___20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const_____2c_20std____2__tuple_____29($2 + 336 | 0, $1, $2 + 248 | 0, 4520, $2 + 152 | 0, $2 + 56 | 0);
 $1 = HEAP32[HEAP32[$2 + 336 >> 2] + 28 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($2 + 264 | 0, $1);
 if (HEAP8[$2 + 259 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 + 248 >> 2]);
 }
 $1 = $2 + 216 | 0;
 $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 200 | 0, $2 + 296 | 0);
 $1 = csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($1, $7, 16);
 $3 = $2 + 152 | 0;
 $4 = Neo__Cryptography__ECC__ECCurve__ECCurve_28Neo__Cryptography__ECC__ECCurve_20const__29($2 + 336 | 0, HEAP32[5496]);
 $9 = Neo__Cryptography__ECC__ECCurve__ECCurve_28Neo__Cryptography__ECC__ECCurve___29($3, $4);
 Neo__Cryptography__ECC__ECCurve___ECCurve_28_29($4);
 $4 = Neo__Cryptography__ECC__ECFieldElement__ECFieldElement_28csbigintegerlib__BigInteger_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($2 + 232 | 0, $1, $9);
 $3 = $2 + 120 | 0;
 $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 104 | 0, $2 + 264 | 0);
 $6 = csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($3, $8, 16);
 $3 = $2 + 56 | 0;
 $5 = Neo__Cryptography__ECC__ECCurve__ECCurve_28Neo__Cryptography__ECC__ECCurve_20const__29($2 + 336 | 0, HEAP32[5496]);
 $10 = Neo__Cryptography__ECC__ECCurve__ECCurve_28Neo__Cryptography__ECC__ECCurve___29($3, $5);
 Neo__Cryptography__ECC__ECCurve___ECCurve_28_29($5);
 $5 = Neo__Cryptography__ECC__ECFieldElement__ECFieldElement_28csbigintegerlib__BigInteger_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($2 + 136 | 0, $6, $10);
 $3 = $2 + 8 | 0;
 $11 = Neo__Cryptography__ECC__ECCurve__ECCurve_28Neo__Cryptography__ECC__ECCurve_20const__29($2 + 336 | 0, HEAP32[5496]);
 $3 = Neo__Cryptography__ECC__ECCurve__ECCurve_28Neo__Cryptography__ECC__ECCurve___29($3, $11);
 Neo__Cryptography__ECC__ECCurve___ECCurve_28_29($11);
 Neo__Cryptography__ECC__ECPoint__ECPoint_28Neo__Cryptography__ECC__ECFieldElement_20const__2c_20Neo__Cryptography__ECC__ECFieldElement_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($0, $4, $5, $3);
 Neo__Cryptography__ECC__ECCurve___ECCurve_28_29($3);
 $3 = HEAP32[$5 >> 2];
 if ($3) {
  HEAP32[$5 + 4 >> 2] = $3;
  operator_20delete_28void__29($3);
 }
 Neo__Cryptography__ECC__ECCurve___ECCurve_28_29($10);
 $5 = HEAP32[$6 >> 2];
 if ($5) {
  HEAP32[$6 + 4 >> 2] = $5;
  operator_20delete_28void__29($5);
 }
 if (HEAP8[$8 + 11 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$8 >> 2]);
 }
 $6 = HEAP32[$4 >> 2];
 if ($6) {
  HEAP32[$4 + 4 >> 2] = $6;
  operator_20delete_28void__29($6);
 }
 Neo__Cryptography__ECC__ECCurve___ECCurve_28_29($9);
 $4 = HEAP32[$1 >> 2];
 if ($4) {
  HEAP32[$1 + 4 >> 2] = $4;
  operator_20delete_28void__29($4);
 }
 if (HEAP8[$7 + 11 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$7 >> 2]);
 }
 if (HEAP8[$2 + 275 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 + 264 >> 2]);
 }
 if (HEAP8[$2 + 307 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 + 296 >> 2]);
 }
 $1 = HEAP32[$2 + 328 >> 2];
 HEAP32[$2 + 328 >> 2] = 0;
 if ($1) {
  HEAP32[$1 >> 2] = 4180;
  std____2____tree_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____map_value_compare_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2__less_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20true__2c_20std____2__allocator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___20__20___destroy_28std____2____tree_node_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20void____29($1 + 4 | 0, HEAP32[$1 + 8 >> 2]);
  operator_20delete_28void__29($1);
 }
 $0 = $2 + 384 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function Neo__Cryptography__ECC__ECCurve__ECCurve_28csbigintegerlib__BigInteger_2c_20csbigintegerlib__BigInteger_2c_20csbigintegerlib__BigInteger_2c_20csbigintegerlib__BigInteger_2c_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $8 = global$0 - 48 | 0;
 $6 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       $7 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0;
       if ($7) {
        if (($7 | 0) <= -1) {
         break label$7;
        }
        $6 = operator_20new_28unsigned_20long_29($7);
        HEAP32[$0 >> 2] = $6;
        HEAP32[$0 + 4 >> 2] = $6;
        HEAP32[$0 + 8 >> 2] = $6 + $7;
        $9 = HEAP32[$1 >> 2];
        $7 = HEAP32[$1 + 4 >> 2] - $9 | 0;
        if (($7 | 0) >= 1) {
         $6 = memcpy($6, $9, $7) + $7 | 0;
        }
        HEAP32[$0 + 4 >> 2] = $6;
       }
       $2 = Neo__Cryptography__ECC__ECFieldElement__ECFieldElement_28csbigintegerlib__BigInteger_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($8 + 24 | 0, $2, $0);
       $6 = operator_20new_28unsigned_20long_29(12);
       HEAP32[$6 + 8 >> 2] = 0;
       HEAP32[$6 >> 2] = 0;
       HEAP32[$6 + 4 >> 2] = 0;
       $7 = HEAP32[$2 >> 2];
       $9 = HEAP32[$2 + 4 >> 2] - $7 | 0;
       if ($9) {
        if (($9 | 0) <= -1) {
         break label$6;
        }
        $10 = operator_20new_28unsigned_20long_29($9);
        HEAP32[$6 >> 2] = $10;
        HEAP32[$6 + 4 >> 2] = $10;
        $11 = $9 + $10 | 0;
        HEAP32[$6 + 8 >> 2] = $11;
        memcpy($10, $7, $9);
        HEAP32[$6 + 4 >> 2] = $11;
       }
       HEAP32[$0 + 12 >> 2] = $6;
       if ($7) {
        HEAP32[$2 + 4 >> 2] = $7;
        operator_20delete_28void__29($7);
       }
       $2 = Neo__Cryptography__ECC__ECFieldElement__ECFieldElement_28csbigintegerlib__BigInteger_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($8 + 24 | 0, $3, $0);
       $6 = operator_20new_28unsigned_20long_29(12);
       HEAP32[$6 + 8 >> 2] = 0;
       HEAP32[$6 >> 2] = 0;
       HEAP32[$6 + 4 >> 2] = 0;
       $7 = HEAP32[$2 >> 2];
       $9 = HEAP32[$2 + 4 >> 2] - $7 | 0;
       if ($9) {
        if (($9 | 0) <= -1) {
         break label$5;
        }
        $10 = operator_20new_28unsigned_20long_29($9);
        HEAP32[$6 >> 2] = $10;
        HEAP32[$6 + 4 >> 2] = $10;
        $3 = $9 + $10 | 0;
        HEAP32[$6 + 8 >> 2] = $3;
        memcpy($10, $7, $9);
        HEAP32[$6 + 4 >> 2] = $3;
       }
       HEAP32[$0 + 16 >> 2] = $6;
       if ($7) {
        HEAP32[$2 + 4 >> 2] = $7;
        operator_20delete_28void__29($7);
       }
       HEAP32[$0 + 20 >> 2] = 0;
       HEAP32[$0 + 24 >> 2] = 0;
       HEAP32[$0 + 28 >> 2] = 0;
       $7 = HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] | 0;
       if ($7) {
        if (($7 | 0) <= -1) {
         break label$4;
        }
        $6 = operator_20new_28unsigned_20long_29($7);
        HEAP32[$0 + 20 >> 2] = $6;
        HEAP32[$0 + 24 >> 2] = $6;
        HEAP32[$0 + 28 >> 2] = $6 + $7;
        $7 = HEAP32[$4 >> 2];
        $4 = HEAP32[$4 + 4 >> 2] - $7 | 0;
        if (($4 | 0) >= 1) {
         $6 = memcpy($6, $7, $4) + $4 | 0;
        }
        HEAP32[$0 + 24 >> 2] = $6;
       }
       $2 = $0 + 32 | 0;
       $6 = Neo__Cryptography__ECC__ECPoint__ECPoint_28Neo__Cryptography__ECC__ECCurve_20const__29($8 + 24 | 0, $0);
       unique_ref__ucref_Neo__Cryptography__ECC__ECPoint___ucref_28Neo__Cryptography__ECC__ECPoint_20const__29($2, $6);
       $4 = HEAP32[$6 + 12 >> 2];
       if ($4) {
        HEAP32[$6 + 16 >> 2] = $4;
        operator_20delete_28void__29($4);
       }
       $4 = HEAP32[$6 >> 2];
       if ($4) {
        HEAP32[$6 + 4 >> 2] = $4;
        operator_20delete_28void__29($4);
       }
       HEAP32[$8 + 16 >> 2] = 0;
       HEAP32[$8 + 8 >> 2] = 0;
       HEAP32[$8 + 12 >> 2] = 0;
       $7 = HEAP32[$5 >> 2];
       $6 = HEAP32[$5 + 4 >> 2] - $7 | 0;
       if ($6) {
        if (($6 | 0) <= -1) {
         break label$3;
        }
        $4 = operator_20new_28unsigned_20long_29($6);
        HEAP32[$8 + 8 >> 2] = $4;
        HEAP32[$8 + 12 >> 2] = $4;
        $2 = $4 + $6 | 0;
        HEAP32[$8 + 16 >> 2] = $2;
        memcpy($4, $7, $6);
        HEAP32[$8 + 12 >> 2] = $2;
       }
       Neo__Cryptography__ECC__ECPoint__DecodePoint_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($8 + 24 | 0, $8 + 8 | 0, $0);
       unique_ref__ucref_Neo__Cryptography__ECC__ECPoint___ucref_28Neo__Cryptography__ECC__ECPoint_20const__29($0 + 36 | 0, $8 + 24 | 0);
       $6 = HEAP32[$8 + 36 >> 2];
       if ($6) {
        HEAP32[$8 + 40 >> 2] = $6;
        operator_20delete_28void__29($6);
       }
       $6 = HEAP32[$8 + 24 >> 2];
       if ($6) {
        HEAP32[$8 + 28 >> 2] = $6;
        operator_20delete_28void__29($6);
       }
       $6 = HEAP32[$8 + 8 >> 2];
       if ($6) {
        HEAP32[$8 + 12 >> 2] = $6;
        operator_20delete_28void__29($6);
       }
       $6 = 0;
       HEAP32[$8 + 32 >> 2] = 0;
       HEAP32[$8 + 24 >> 2] = 0;
       HEAP32[$8 + 28 >> 2] = 0;
       $2 = HEAP32[$1 + 4 >> 2];
       $7 = HEAP32[$1 >> 2];
       $9 = $2 - $7 | 0;
       label$22 : {
        if (!$9) {
         $9 = 0;
         $5 = 0;
         break label$22;
        }
        if (($9 | 0) <= -1) {
         break label$2;
        }
        $6 = operator_20new_28unsigned_20long_29($9);
        HEAP32[$8 + 24 >> 2] = $6;
        $5 = $6 + $9 | 0;
        HEAP32[$8 + 32 >> 2] = $5;
        $10 = memcpy($6, $7, $9);
        HEAP32[$8 + 28 >> 2] = $5;
        $4 = $5 + -1 | 0;
        if ($4 >>> 0 <= $10 >>> 0) {
         break label$22;
        }
        while (1) {
         $7 = HEAPU8[$6 | 0];
         HEAP8[$6 | 0] = HEAPU8[$4 | 0];
         HEAP8[$4 | 0] = $7;
         $6 = $6 + 1 | 0;
         $4 = $4 + -1 | 0;
         if ($6 >>> 0 < $4 >>> 0) {
          continue;
         }
         break;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        $7 = HEAP32[$1 >> 2];
        $9 = $2 - $7 | 0;
        $6 = HEAP32[$8 + 24 >> 2];
        $5 = HEAP32[$8 + 28 >> 2];
       }
       $10 = 0;
       label$25 : {
        label$26 : {
         $4 = HEAP32[5484];
         if ((HEAP32[5485] - $4 | 0) != ($9 | 0)) {
          break label$26;
         }
         if (($2 | 0) != ($7 | 0)) {
          while (1) {
           if (HEAPU8[$7 | 0] != HEAPU8[$4 | 0]) {
            break label$26;
           }
           $4 = $4 + 1 | 0;
           $7 = $7 + 1 | 0;
           if (($7 | 0) != ($2 | 0)) {
            continue;
           }
           break;
          }
         }
         $4 = $6;
         $1 = $5;
         break label$25;
        }
        $10 = csbigintegerlib__BigInteger__operator__28csbigintegerlib__BigInteger_20const__29_20const($1, 21936) ^ 1;
        $4 = HEAP32[$8 + 24 >> 2];
        $1 = HEAP32[$8 + 28 >> 2];
       }
       $7 = $1;
       $1 = $5 - $6 | 0;
       $7 = HEAPU8[$4 + (($4 ^ -1) + $7 | 0) | 0];
       $7 = $10 ? $7 : $7 ^ 255;
       $6 = 8;
       label$29 : {
        if ($7 >>> 0 > 127) {
         break label$29;
        }
        if ($7 >>> 0 <= 7) {
         $6 = ($7 | 0) == 1;
         if ($7 >>> 0 <= 1) {
          break label$29;
         }
         $6 = $7 >>> 0 > 3 ? 3 : 2;
         break label$29;
        }
        $6 = $7 >>> 0 < 16 ? 4 : 5;
        if ($7 >>> 0 <= 31) {
         break label$29;
        }
        $6 = $7 >>> 0 < 64 ? 6 : 7;
       }
       $7 = $1 << 3;
       if ($4) {
        HEAP32[$8 + 28 >> 2] = $4;
        operator_20delete_28void__29($4);
       }
       HEAP32[$0 + 40 >> 2] = (($6 + $7 | 0) + -1 | 0) / 8;
       $1 = $8 + 48 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow();
       }
       global$0 = $1;
       return $0;
      }
      std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
      abort();
     }
     std____2____vector_base_common_true_____throw_length_error_28_29_20const($6);
     abort();
    }
    std____2____vector_base_common_true_____throw_length_error_28_29_20const($6);
    abort();
   }
   std____2____vector_base_common_true_____throw_length_error_28_29_20const($0 + 20 | 0);
   abort();
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($8 + 8 | 0);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($8 + 24 | 0);
 abort();
}
function _GLOBAL__sub_I_neopt_test_cpp() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = global$0 - 208 | 0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 std____2__to_string_28int_29($0 + 160 | 0, 0);
 csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29(21936, $0 + 160 | 0, 10);
 if (HEAP8[$0 + 171 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 160 >> 2]);
 }
 std____2__to_string_28int_29($0 + 160 | 0, 1);
 csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29(21948, $0 + 160 | 0, 10);
 if (HEAP8[$0 + 171 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 160 >> 2]);
 }
 std____2__to_string_28int_29($0 + 160 | 0, -1);
 csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29(21960, $0 + 160 | 0, 10);
 if (HEAP8[$0 + 171 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 160 >> 2]);
 }
 HEAP32[5493] = 0;
 HEAP32[5494] = 0;
 HEAP32[5495] = 0;
 $5 = operator_20new_28unsigned_20long_29(80);
 HEAP32[$0 + 128 >> 2] = $5;
 HEAP32[$0 + 132 >> 2] = 68;
 HEAP32[$0 + 136 >> 2] = -2147483568;
 wasm2js_i32$0 = memcpy($5, 1024, 68), wasm2js_i32$1 = 0, HEAP8[wasm2js_i32$0 + 68 | 0] = wasm2js_i32$1;
 $5 = csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($0 + 144 | 0, $0 + 128 | 0, 16);
 $1 = operator_20new_28unsigned_20long_29(80);
 HEAP32[$0 + 96 >> 2] = $1;
 HEAP32[$0 + 100 >> 2] = 68;
 HEAP32[$0 + 104 >> 2] = -2147483568;
 wasm2js_i32$0 = memcpy($1, 1093, 68), wasm2js_i32$1 = 0, HEAP8[wasm2js_i32$0 + 68 | 0] = wasm2js_i32$1;
 $1 = csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($0 + 112 | 0, $0 + 96 | 0, 16);
 $3 = operator_20new_28unsigned_20long_29(80);
 HEAP32[$0 + 64 >> 2] = $3;
 HEAP32[$0 + 68 >> 2] = 68;
 HEAP32[$0 + 72 >> 2] = -2147483568;
 wasm2js_i32$0 = memcpy($3, 1162, 68), wasm2js_i32$1 = 0, HEAP8[wasm2js_i32$0 + 68 | 0] = wasm2js_i32$1;
 $3 = csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($0 + 80 | 0, $0 - -64 | 0, 16);
 $2 = operator_20new_28unsigned_20long_29(80);
 HEAP32[$0 + 32 >> 2] = $2;
 HEAP32[$0 + 36 >> 2] = 68;
 HEAP32[$0 + 40 >> 2] = -2147483568;
 wasm2js_i32$0 = memcpy($2, 1231, 68), wasm2js_i32$1 = 0, HEAP8[wasm2js_i32$0 + 68 | 0] = wasm2js_i32$1;
 $2 = csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($0 + 48 | 0, $0 + 32 | 0, 16);
 $4 = operator_20new_28unsigned_20long_29(144);
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = 130;
 HEAP32[$0 + 8 >> 2] = -2147483504;
 wasm2js_i32$0 = memcpy($4, 1300, 130), wasm2js_i32$1 = 0, HEAP8[wasm2js_i32$0 + 130 | 0] = wasm2js_i32$1;
 Neo__Helper__HexToBytes_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 16 | 0, $0);
 $4 = Neo__Cryptography__ECC__ECCurve__ECCurve_28csbigintegerlib__BigInteger_2c_20csbigintegerlib__BigInteger_2c_20csbigintegerlib__BigInteger_2c_20csbigintegerlib__BigInteger_2c_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__29($0 + 160 | 0, $5, $1, $3, $2, $0 + 16 | 0);
 $6 = operator_20new_28unsigned_20long_29(44);
 Neo__Cryptography__ECC__ECCurve__ECCurve_28Neo__Cryptography__ECC__ECCurve_20const__29($6, $4);
 HEAP32[5496] = $6;
 Neo__Cryptography__ECC__ECCurve___ECCurve_28_29($4);
 $4 = HEAP32[$0 + 16 >> 2];
 if ($4) {
  HEAP32[$0 + 20 >> 2] = $4;
  operator_20delete_28void__29($4);
 }
 if (HEAP8[$0 + 11 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 >> 2]);
 }
 $4 = HEAP32[$2 >> 2];
 if ($4) {
  HEAP32[$2 + 4 >> 2] = $4;
  operator_20delete_28void__29($4);
 }
 if (HEAP8[$0 + 43 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 32 >> 2]);
 }
 $2 = HEAP32[$3 >> 2];
 if ($2) {
  HEAP32[$3 + 4 >> 2] = $2;
  operator_20delete_28void__29($2);
 }
 if (HEAP8[$0 + 75 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 64 >> 2]);
 }
 $3 = HEAP32[$1 >> 2];
 if ($3) {
  HEAP32[$1 + 4 >> 2] = $3;
  operator_20delete_28void__29($3);
 }
 if (HEAP8[$0 + 107 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 96 >> 2]);
 }
 $1 = HEAP32[$5 >> 2];
 if ($1) {
  HEAP32[$5 + 4 >> 2] = $1;
  operator_20delete_28void__29($1);
 }
 if (HEAP8[$0 + 139 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 128 >> 2]);
 }
 $5 = operator_20new_28unsigned_20long_29(80);
 HEAP32[$0 + 128 >> 2] = $5;
 HEAP32[$0 + 132 >> 2] = 68;
 HEAP32[$0 + 136 >> 2] = -2147483568;
 wasm2js_i32$0 = memcpy($5, 1431, 68), wasm2js_i32$1 = 0, HEAP8[wasm2js_i32$0 + 68 | 0] = wasm2js_i32$1;
 $5 = csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($0 + 144 | 0, $0 + 128 | 0, 16);
 HEAP32[$0 + 120 >> 2] = 0;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP32[$0 + 116 >> 2] = 0;
 label$15 : {
  $2 = HEAP32[5484];
  $1 = HEAP32[5485] - $2 | 0;
  if ($1) {
   if (($1 | 0) <= -1) {
    break label$15;
   }
   $3 = operator_20new_28unsigned_20long_29($1);
   HEAP32[$0 + 112 >> 2] = $3;
   HEAP32[$0 + 116 >> 2] = $3;
   $4 = $1 + $3 | 0;
   HEAP32[$0 + 120 >> 2] = $4;
   memcpy($3, $2, $1);
   HEAP32[$0 + 116 >> 2] = $4;
  }
  std____2__to_string_28int_29($0 + 160 | 0, 7);
  $1 = csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($0 + 96 | 0, $0 + 160 | 0, 10);
  if (HEAP8[$0 + 171 | 0] <= -1) {
   operator_20delete_28void__29(HEAP32[$0 + 160 >> 2]);
  }
  $3 = operator_20new_28unsigned_20long_29(80);
  HEAP32[$0 + 64 >> 2] = $3;
  HEAP32[$0 + 68 >> 2] = 68;
  HEAP32[$0 + 72 >> 2] = -2147483568;
  wasm2js_i32$0 = memcpy($3, 1500, 68), wasm2js_i32$1 = 0, HEAP8[wasm2js_i32$0 + 68 | 0] = wasm2js_i32$1;
  $3 = csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($0 + 80 | 0, $0 - -64 | 0, 16);
  $2 = operator_20new_28unsigned_20long_29(144);
  HEAP32[$0 + 32 >> 2] = $2;
  HEAP32[$0 + 36 >> 2] = 130;
  HEAP32[$0 + 40 >> 2] = -2147483504;
  wasm2js_i32$0 = memcpy($2, 1569, 130), wasm2js_i32$1 = 0, HEAP8[wasm2js_i32$0 + 130 | 0] = wasm2js_i32$1;
  Neo__Helper__HexToBytes_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0 + 48 | 0, $0 + 32 | 0);
  $2 = Neo__Cryptography__ECC__ECCurve__ECCurve_28csbigintegerlib__BigInteger_2c_20csbigintegerlib__BigInteger_2c_20csbigintegerlib__BigInteger_2c_20csbigintegerlib__BigInteger_2c_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__29($0 + 160 | 0, $5, $0 + 112 | 0, $1, $3, $0 + 48 | 0);
  $4 = operator_20new_28unsigned_20long_29(44);
  Neo__Cryptography__ECC__ECCurve__ECCurve_28Neo__Cryptography__ECC__ECCurve_20const__29($4, $2);
  HEAP32[5497] = $4;
  Neo__Cryptography__ECC__ECCurve___ECCurve_28_29($2);
  $2 = HEAP32[$0 + 48 >> 2];
  if ($2) {
   HEAP32[$0 + 52 >> 2] = $2;
   operator_20delete_28void__29($2);
  }
  if (HEAP8[$0 + 43 | 0] <= -1) {
   operator_20delete_28void__29(HEAP32[$0 + 32 >> 2]);
  }
  $2 = HEAP32[$3 >> 2];
  if ($2) {
   HEAP32[$3 + 4 >> 2] = $2;
   operator_20delete_28void__29($2);
  }
  if (HEAP8[$0 + 75 | 0] <= -1) {
   operator_20delete_28void__29(HEAP32[$0 + 64 >> 2]);
  }
  $3 = HEAP32[$1 >> 2];
  if ($3) {
   HEAP32[$1 + 4 >> 2] = $3;
   operator_20delete_28void__29($3);
  }
  $1 = HEAP32[$0 + 112 >> 2];
  if ($1) {
   HEAP32[$0 + 116 >> 2] = $1;
   operator_20delete_28void__29($1);
  }
  $1 = HEAP32[$5 >> 2];
  if ($1) {
   HEAP32[$5 + 4 >> 2] = $1;
   operator_20delete_28void__29($1);
  }
  if (HEAP8[$0 + 139 | 0] <= -1) {
   operator_20delete_28void__29(HEAP32[$0 + 128 >> 2]);
  }
  HEAP32[5499] = 0;
  HEAP32[5500] = 0;
  HEAP32[5498] = 21996;
  _embind_register_function(1959, 2, 5052, 5196, 10, 11);
  $6 = $0 + 208 | 0;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $6;
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($0 + 112 | 0);
 abort();
}
function fmodl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 $15 = global$0 - 128 | 0;
 $10 = $15;
 if ($15 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $10;
 label$2 : {
  label$3 : {
   $12 = $6;
   $11 = $8;
   label$4 : {
    if (!__letf2($5, $12, $7, $11, 0, 0, 0, 0)) {
     break label$4;
    }
    $9 = $6;
    $10 = $8;
    $22 = __fpclassifyl($5, $9, $7, $10);
    $10 = $4;
    $25 = $10 >>> 16 | 0;
    $17 = $25 & 32767;
    if (($17 | 0) == 32767) {
     break label$4;
    }
    if ($22) {
     break label$3;
    }
   }
   $9 = $2;
   $11 = $4;
   $10 = $6;
   $12 = $8;
   __multf3($15 + 16 | 0, $1, $9, $3, $11, $5, $10, $7, $12);
   $11 = $15;
   $12 = HEAP32[$11 + 16 >> 2];
   $7 = $12;
   $10 = HEAP32[$11 + 20 >> 2];
   $8 = $10;
   $12 = HEAP32[$11 + 28 >> 2];
   $4 = $12;
   $10 = HEAP32[$11 + 24 >> 2];
   $3 = $10;
   $12 = $8;
   $10 = $4;
   $11 = $12;
   $9 = $10;
   __divtf3($15, $7, $11, $3, $9, $7, $11, $3, $9);
   $10 = $15;
   $9 = HEAP32[$10 + 8 >> 2];
   $3 = $9;
   $11 = HEAP32[$10 + 12 >> 2];
   $4 = $11;
   $11 = HEAP32[$10 >> 2];
   $7 = $11;
   $9 = HEAP32[$10 + 4 >> 2];
   $8 = $9;
   break label$2;
  }
  $9 = $4;
  $11 = $9 & 65535;
  $9 = $17;
  $10 = $9 << 16;
  $9 = $10;
  $10 = $11;
  $9 = $10 | $9;
  $18 = $9;
  $12 = 0;
  $11 = $3;
  $16 = $12 | $11;
  $9 = $8;
  $11 = $9 & 65535;
  $10 = $11;
  $9 = $7;
  $20 = $8 >>> 16 & 32767;
  $7 = 0 | $9;
  $11 = $20;
  $9 = $11 << 16;
  $11 = $9;
  $9 = $10;
  $11 = $11 | $9;
  $8 = $11;
  $11 = $2;
  $10 = $18;
  $9 = $6;
  $12 = $8;
  if ((__letf2($1, $11, $16, $10, $5, $9, $7, $12) | 0) <= 0) {
   $12 = $2;
   $9 = $18;
   $10 = $6;
   $11 = $8;
   if (__letf2($1, $12, $16, $9, $5, $10, $7, $11)) {
    $7 = $1;
    $11 = $2;
    $8 = $11;
    break label$2;
   }
   $11 = $2;
   $10 = $4;
   __multf3($15 + 112 | 0, $1, $11, $3, $10, 0, 0, 0, 0);
   $10 = $15;
   $12 = HEAP32[$10 + 120 >> 2];
   $3 = $12;
   $9 = HEAP32[$10 + 124 >> 2];
   $4 = $9;
   $9 = HEAP32[$10 + 112 >> 2];
   $7 = $9;
   $12 = HEAP32[$10 + 116 >> 2];
   $8 = $12;
   break label$2;
  }
  $12 = $2;
  $9 = $18;
  __multf3($15 + 96 | 0, $1, $12, $16, $9, 0, 0, 0, 1081540608);
  $11 = $6;
  $10 = $8;
  __multf3($15 + 80 | 0, $5, $11, $7, $10, 0, 0, 0, 1081540608);
  $9 = HEAP32[$15 + 108 >> 2];
  $26 = $9;
  $10 = $15;
  $12 = HEAP32[$10 + 104 >> 2];
  $14 = $17;
  $11 = $14 ? $16 : $12;
  $14 = $11;
  $9 = $18;
  $12 = $26;
  $10 = $17 ? $9 : $12;
  $11 = $10 & 65535;
  $10 = $14;
  $16 = $10;
  $14 = $11 | 65536;
  $18 = $14;
  $10 = HEAP32[$15 + 92 >> 2];
  $27 = $10;
  $11 = $15;
  $14 = HEAP32[$11 + 88 >> 2];
  $29 = $14;
  $12 = $20;
  $9 = $12 ? $7 : $14;
  $12 = $9;
  $10 = $8;
  $14 = $27;
  $11 = $20 ? $10 : $14;
  $9 = $11 & 65535;
  $11 = $12;
  $30 = $11;
  $12 = $9 | 65536;
  $28 = $12;
  $9 = $16;
  $10 = $11;
  $14 = $9 - $10 | 0;
  $12 = $18;
  $11 = $28;
  $13 = $11 + ($9 >>> 0 < $10 >>> 0) | 0;
  $13 = $12 - $13 | 0;
  $19 = $13;
  $9 = HEAP32[$15 + 100 >> 2];
  $8 = $9;
  $12 = $15;
  $13 = HEAP32[$12 + 96 >> 2];
  $11 = $17;
  $10 = $11 ? $1 : $13;
  $7 = $10;
  $9 = $2;
  $13 = $8;
  $12 = $11 ? $9 : $13;
  $8 = $12;
  $10 = HEAP32[$15 + 84 >> 2];
  $21 = $10;
  $11 = $15;
  $12 = HEAP32[$11 + 80 >> 2];
  $13 = $20;
  $9 = $13 ? $5 : $12;
  $23 = $9;
  $10 = $6;
  $12 = $21;
  $11 = $13 ? $10 : $12;
  $24 = $11;
  $11 = $8;
  $9 = $24;
  $10 = $23;
  $9 = ($11 | 0) == ($9 | 0) & $7 >>> 0 < $10 >>> 0 | $11 >>> 0 < $9 >>> 0;
  $10 = $14;
  $12 = $10 - $9 | 0;
  $21 = $12;
  $13 = $19;
  $14 = $10 >>> 0 < $9 >>> 0;
  $14 = $13 - $14 | 0;
  $19 = $14;
  $22 = ($14 | 0) > -1 ? 1 : ($14 | 0) >= -1 ? $12 >>> 0 <= 4294967295 ? 0 : 1 : 0;
  $9 = $7;
  $10 = $23;
  $11 = $9 - $10 | 0;
  $5 = $11;
  $14 = $24;
  $12 = $14 + ($9 >>> 0 < $10 >>> 0) | 0;
  $12 = $8 - $12 | 0;
  $6 = $12;
  $12 = $26;
  $17 = $17 ? $17 : ($12 >>> 16 | 0) + -120 | 0;
  $9 = $27;
  $20 = $20 ? $20 : ($9 >>> 16 | 0) + -120 | 0;
  if (($17 | 0) > ($20 | 0)) {
   while (1) {
    label$9 : {
     if ($22 & 1) {
      $12 = $19;
      $13 = $6;
      $12 = $12 | $13;
      $10 = $21;
      $9 = $5;
      if (!($12 | ($10 | $9))) {
       $12 = $2;
       $9 = $4;
       __multf3($15 + 32 | 0, $1, $12, $3, $9, 0, 0, 0, 0);
       $9 = $15;
       $10 = HEAP32[$9 + 40 >> 2];
       $3 = $10;
       $13 = HEAP32[$9 + 44 >> 2];
       $4 = $13;
       $13 = HEAP32[$9 + 32 >> 2];
       $7 = $13;
       $10 = HEAP32[$9 + 36 >> 2];
       $8 = $10;
       break label$2;
      }
      $9 = $21;
      $21 = $9 << 1;
      $10 = $19;
      $13 = $10 << 1 | $9 >>> 31;
      $19 = $13;
      $13 = $6;
      $16 = $13 >>> 31 | 0;
      $9 = 0;
      $13 = $9;
      $14 = 31;
      break label$9;
     }
     $9 = $8;
     $21 = $9 >>> 31 | 0;
     $10 = 0;
     $19 = $10;
     $5 = $7;
     $6 = $9;
     $9 = $16;
     $16 = $9 << 1;
     $10 = $18;
     $13 = $10 << 1 | $9 >>> 31;
     $14 = 1;
    }
    $9 = $19;
    $9 = $9 | $13;
    $18 = $9;
    $12 = $21;
    $10 = $16;
    $16 = $12 | $10;
    $13 = $16;
    $12 = $30;
    $14 = $13 - $12 | 0;
    $10 = $28;
    $11 = $10 + ($13 >>> 0 < $12 >>> 0) | 0;
    $11 = $9 - $11 | 0;
    $19 = $11;
    $11 = $6;
    $9 = $5;
    $13 = $11 << 1 | $9 >>> 31;
    $7 = $9 << 1;
    $9 = $24;
    $8 = $13;
    $11 = $7;
    $12 = $23;
    $9 = ($9 | 0) == ($8 | 0) & $11 >>> 0 < $12 >>> 0 | $8 >>> 0 < $9 >>> 0;
    $12 = $14;
    $10 = $12 - $9 | 0;
    $21 = $10;
    $11 = $19;
    $14 = $12 >>> 0 < $9 >>> 0;
    $14 = $11 - $14 | 0;
    $19 = $14;
    $22 = ($14 | 0) > -1 ? 1 : ($14 | 0) >= -1 ? $10 >>> 0 <= 4294967295 ? 0 : 1 : 0;
    $9 = $7;
    $12 = $23;
    $13 = $9 - $12 | 0;
    $5 = $13;
    $11 = $8;
    $14 = $24;
    $10 = $14 + ($9 >>> 0 < $12 >>> 0) | 0;
    $10 = $11 - $10 | 0;
    $6 = $10;
    $17 = $17 + -1 | 0;
    if (($17 | 0) > ($20 | 0)) {
     continue;
    }
    break;
   }
   $17 = $20;
  }
  label$12 : {
   if (!$22) {
    break label$12;
   }
   $10 = $6;
   $8 = $10;
   $10 = $19;
   $18 = $10;
   $10 = $8;
   $9 = $18;
   $9 = $10 | $9;
   $16 = $21;
   $12 = $16;
   $7 = $5;
   $11 = $7;
   $10 = $12 | $11;
   if ($10 | $9) {
    break label$12;
   }
   $10 = $2;
   $9 = $4;
   __multf3($15 + 48 | 0, $1, $10, $3, $9, 0, 0, 0, 0);
   $9 = $15;
   $11 = HEAP32[$9 + 56 >> 2];
   $3 = $11;
   $12 = HEAP32[$9 + 60 >> 2];
   $4 = $12;
   $12 = HEAP32[$9 + 48 >> 2];
   $7 = $12;
   $11 = HEAP32[$9 + 52 >> 2];
   $8 = $11;
   break label$2;
  }
  $11 = $18;
  $9 = $16;
  if (($11 | 0) == 65535 & $9 >>> 0 <= 4294967295 | $11 >>> 0 < 65535) {
   while (1) {
    $10 = $7;
    $9 = $8;
    $3 = $9 >>> 31 | 0;
    $11 = 0;
    $4 = $11;
    $17 = $17 + -1 | 0;
    $9 = $10;
    $7 = $9 << 1;
    $11 = $8;
    $10 = $11 << 1 | $9 >>> 31;
    $8 = $10;
    $10 = $18;
    $11 = $16;
    $9 = $10 << 1 | $11 >>> 31;
    $12 = $11 << 1;
    $10 = $3;
    $16 = $12 | $10;
    $11 = $9;
    $9 = $4;
    $11 = $11 | $9;
    $18 = $11;
    $9 = $16;
    if (($11 | 0) == 65536 & $9 >>> 0 < 0 | $11 >>> 0 < 65536) {
     continue;
    }
    break;
   }
  }
  $22 = $25 & 32768;
  if (($17 | 0) <= 0) {
   $9 = $18;
   $11 = $9 & 65535;
   $9 = $17 + 120 | $22;
   $12 = $9 << 16;
   $9 = $12;
   $9 = $11 | $9;
   $1 = $9;
   $9 = $8;
   $11 = $16;
   $10 = 0;
   $2 = $11 | $10;
   $11 = $1;
   __multf3($15 - -64 | 0, $7, $9, $2, $11, 0, 0, 0, 1065811968);
   $11 = $15;
   $10 = HEAP32[$11 + 72 >> 2];
   $3 = $10;
   $12 = HEAP32[$11 + 76 >> 2];
   $4 = $12;
   $12 = HEAP32[$11 + 64 >> 2];
   $7 = $12;
   $10 = HEAP32[$11 + 68 >> 2];
   $8 = $10;
   break label$2;
  }
  $10 = $18;
  $12 = $10 & 65535;
  $1 = $12;
  $10 = $17 | $22;
  $11 = $10 << 16;
  $10 = $11;
  $12 = $16;
  $9 = 0;
  $3 = $12 | $9;
  $11 = $1;
  $10 = $11 | $10;
  $4 = $10;
 }
 $12 = $0;
 HEAP32[$12 >> 2] = $7;
 $10 = $8;
 HEAP32[$12 + 4 >> 2] = $10;
 HEAP32[$12 + 8 >> 2] = $3;
 $10 = $4;
 HEAP32[$12 + 12 >> 2] = $10;
 $0 = $15 + 128 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function dlfree($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 label$1 : {
  label$2 : {
   if (!$0) {
    break label$2;
   }
   $3 = $0 + -8 | 0;
   $1 = HEAP32[$0 + -4 >> 2];
   $0 = $1 & -8;
   $5 = $3 + $0 | 0;
   label$3 : {
    if ($1 & 1) {
     break label$3;
    }
    if (!($1 & 3)) {
     break label$2;
    }
    $1 = HEAP32[$3 >> 2];
    $3 = $3 - $1 | 0;
    $4 = HEAP32[6828];
    if ($3 >>> 0 < $4 >>> 0) {
     break label$2;
    }
    $0 = $0 + $1 | 0;
    if (HEAP32[6829] != ($3 | 0)) {
     if ($1 >>> 0 <= 255) {
      $7 = $1 >>> 3 | 0;
      $1 = ($7 << 3) + 27336 | 0;
      $6 = HEAP32[$3 + 8 >> 2];
      $2 = HEAP32[$3 + 12 >> 2];
      if (($6 | 0) == ($2 | 0)) {
       wasm2js_i32$0 = 27296, wasm2js_i32$1 = HEAP32[6824] & __wasm_rotl_i32(-2, $7), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$3;
      }
      HEAP32[$6 + 12 >> 2] = $2;
      HEAP32[$2 + 8 >> 2] = $6;
      break label$3;
     }
     $7 = HEAP32[$3 + 24 >> 2];
     $2 = HEAP32[$3 + 12 >> 2];
     label$7 : {
      if (($2 | 0) != ($3 | 0)) {
       $1 = HEAP32[$3 + 8 >> 2];
       HEAP32[$1 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $1;
       break label$7;
      }
      label$10 : {
       $1 = $3 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$10;
       }
       $1 = $3 + 16 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$10;
       }
       $2 = 0;
       break label$7;
      }
      while (1) {
       $6 = $1;
       $2 = $4;
       $1 = $2 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        continue;
       }
       $1 = $2 + 16 | 0;
       $4 = HEAP32[$2 + 16 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$3;
     }
     $4 = HEAP32[$3 + 28 >> 2];
     $1 = ($4 << 2) + 27600 | 0;
     label$12 : {
      if (HEAP32[$1 >> 2] == ($3 | 0)) {
       HEAP32[$1 >> 2] = $2;
       if ($2) {
        break label$12;
       }
       wasm2js_i32$0 = 27300, wasm2js_i32$1 = HEAP32[6825] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$3;
      }
      HEAP32[(HEAP32[$7 + 16 >> 2] == ($3 | 0) ? 16 : 20) + $7 >> 2] = $2;
      if (!$2) {
       break label$3;
      }
     }
     HEAP32[$2 + 24 >> 2] = $7;
     $1 = HEAP32[$3 + 16 >> 2];
     if ($1) {
      HEAP32[$2 + 16 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
     }
     $1 = HEAP32[$3 + 20 >> 2];
     if (!$1) {
      break label$3;
     }
     HEAP32[$2 + 20 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $2;
     break label$3;
    }
    $1 = HEAP32[$5 + 4 >> 2];
    if (($1 & 3) != 3) {
     break label$3;
    }
    HEAP32[6826] = $0;
    HEAP32[$5 + 4 >> 2] = $1 & -2;
    break label$1;
   }
   if ($5 >>> 0 <= $3 >>> 0) {
    break label$2;
   }
   $1 = HEAP32[$5 + 4 >> 2];
   if (!($1 & 1)) {
    break label$2;
   }
   label$15 : {
    if (!($1 & 2)) {
     if (HEAP32[6830] == ($5 | 0)) {
      HEAP32[6830] = $3;
      $0 = HEAP32[6827] + $0 | 0;
      HEAP32[6827] = $0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      if (HEAP32[6829] != ($3 | 0)) {
       break label$2;
      }
      HEAP32[6826] = 0;
      HEAP32[6829] = 0;
      return;
     }
     if (HEAP32[6829] == ($5 | 0)) {
      HEAP32[6829] = $3;
      $0 = HEAP32[6826] + $0 | 0;
      HEAP32[6826] = $0;
      break label$1;
     }
     $0 = ($1 & -8) + $0 | 0;
     label$19 : {
      if ($1 >>> 0 <= 255) {
       $4 = HEAP32[$5 + 12 >> 2];
       $2 = HEAP32[$5 + 8 >> 2];
       $5 = $1 >>> 3 | 0;
       if (($2 | 0) == ($4 | 0)) {
        wasm2js_i32$0 = 27296, wasm2js_i32$1 = HEAP32[6824] & __wasm_rotl_i32(-2, $5), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$19;
       }
       HEAP32[$2 + 12 >> 2] = $4;
       HEAP32[$4 + 8 >> 2] = $2;
       break label$19;
      }
      $7 = HEAP32[$5 + 24 >> 2];
      $2 = HEAP32[$5 + 12 >> 2];
      label$24 : {
       if (($5 | 0) != ($2 | 0)) {
        $1 = HEAP32[$5 + 8 >> 2];
        HEAP32[$1 + 12 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = $1;
        break label$24;
       }
       label$27 : {
        $1 = $5 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$27;
        }
        $1 = $5 + 16 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$27;
        }
        $2 = 0;
        break label$24;
       }
       while (1) {
        $6 = $1;
        $2 = $4;
        $1 = $2 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         continue;
        }
        $1 = $2 + 16 | 0;
        $4 = HEAP32[$2 + 16 >> 2];
        if ($4) {
         continue;
        }
        break;
       }
       HEAP32[$6 >> 2] = 0;
      }
      if (!$7) {
       break label$19;
      }
      $4 = HEAP32[$5 + 28 >> 2];
      $1 = ($4 << 2) + 27600 | 0;
      label$29 : {
       if (HEAP32[$1 >> 2] == ($5 | 0)) {
        HEAP32[$1 >> 2] = $2;
        if ($2) {
         break label$29;
        }
        wasm2js_i32$0 = 27300, wasm2js_i32$1 = HEAP32[6825] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$19;
       }
       HEAP32[(HEAP32[$7 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $7 >> 2] = $2;
       if (!$2) {
        break label$19;
       }
      }
      HEAP32[$2 + 24 >> 2] = $7;
      $1 = HEAP32[$5 + 16 >> 2];
      if ($1) {
       HEAP32[$2 + 16 >> 2] = $1;
       HEAP32[$1 + 24 >> 2] = $2;
      }
      $1 = HEAP32[$5 + 20 >> 2];
      if (!$1) {
       break label$19;
      }
      HEAP32[$2 + 20 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
     }
     HEAP32[$3 + 4 >> 2] = $0 | 1;
     HEAP32[$0 + $3 >> 2] = $0;
     if (HEAP32[6829] != ($3 | 0)) {
      break label$15;
     }
     HEAP32[6826] = $0;
     return;
    }
    HEAP32[$5 + 4 >> 2] = $1 & -2;
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
   }
   if ($0 >>> 0 <= 255) {
    $1 = $0 >>> 3 | 0;
    $0 = ($1 << 3) + 27336 | 0;
    $1 = 1 << $1;
    $4 = HEAP32[6824];
    label$33 : {
     if (!($1 & $4)) {
      HEAP32[6824] = $1 | $4;
      $1 = $0;
      break label$33;
     }
     $1 = HEAP32[$0 + 8 >> 2];
    }
    HEAP32[$0 + 8 >> 2] = $3;
    HEAP32[$1 + 12 >> 2] = $3;
    HEAP32[$3 + 12 >> 2] = $0;
    HEAP32[$3 + 8 >> 2] = $1;
    return;
   }
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 20 >> 2] = 0;
   $6 = $3;
   $4 = $0 >>> 8 | 0;
   $1 = 0;
   label$35 : {
    if (!$4) {
     break label$35;
    }
    $1 = 31;
    if ($0 >>> 0 > 16777215) {
     break label$35;
    }
    $1 = $4 + 1048320 >>> 16 & 8;
    $4 = $4 << $1;
    $2 = $4;
    $4 = $4 + 520192 >>> 16 & 4;
    $2 = $2 << $4;
    $5 = $2;
    $2 = $2 + 245760 >>> 16 & 2;
    $1 = ($5 << $2 >>> 15 | 0) - ($1 | $4 | $2) | 0;
    $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$6 + 28 >> 2] = $1;
   $4 = ($1 << 2) + 27600 | 0;
   label$36 : {
    label$37 : {
     $2 = HEAP32[6825];
     $5 = 1 << $1;
     label$38 : {
      if (!($2 & $5)) {
       HEAP32[6825] = $2 | $5;
       HEAP32[$4 >> 2] = $3;
       break label$38;
      }
      $1 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
      $2 = HEAP32[$4 >> 2];
      while (1) {
       $4 = $2;
       if ((HEAP32[$2 + 4 >> 2] & -8) == ($0 | 0)) {
        break label$37;
       }
       $2 = $1 >>> 29 | 0;
       $1 = $1 << 1;
       $6 = ($2 & 4) + $4 | 0;
       $5 = $6 + 16 | 0;
       $2 = HEAP32[$5 >> 2];
       if ($2) {
        continue;
       }
       break;
      }
      HEAP32[$6 + 16 >> 2] = $3;
     }
     HEAP32[$3 + 24 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$36;
    }
    $0 = HEAP32[$4 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$4 + 8 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $4;
    HEAP32[$3 + 8 >> 2] = $0;
   }
   $3 = HEAP32[6832] + -1 | 0;
   HEAP32[6832] = $3;
   if ($3) {
    break label$2;
   }
   $3 = 27752;
   while (1) {
    $0 = HEAP32[$3 >> 2];
    $3 = $0 + 8 | 0;
    if ($0) {
     continue;
    }
    break;
   }
   HEAP32[6832] = -1;
  }
  return;
 }
 HEAP32[$3 + 4 >> 2] = $0 | 1;
 HEAP32[$0 + $3 >> 2] = $0;
}
function std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $20 = global$0 - 16 | 0;
 $16 = $20;
 if ($20 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $16;
 HEAP32[$2 >> 2] = $0;
 $23 = $3 & 512;
 label$2 : {
  while (1) {
   label$4 : {
    if (($22 | 0) == 4) {
     if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($13) >>> 0 > 1) {
      wasm2js_i32$0 = $20, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29_20const($13), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
      wasm2js_i32$0 = $2, wasm2js_i32$1 = wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29(std____2____wrap_iter_wchar_t_20const____operator__28long_29_20const($20 + 8 | 0, 1), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29_20const($13), HEAP32[$2 >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $15 = $3 & 176;
     if (($15 | 0) == 16) {
      break label$2;
     }
     if (($15 | 0) != 32) {
      break label$4;
     }
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
     break label$2;
    }
    $15 = HEAP8[$8 + $22 | 0];
    label$7 : {
     if ($15 >>> 0 > 4) {
      break label$7;
     }
     label$8 : {
      switch ($15 - 1 | 0) {
      default:
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       break label$7;
      case 0:
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       $15 = std____2__ctype_wchar_t___widen_28char_29_20const($6, 32);
       $16 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $16 + 4;
       HEAP32[$16 >> 2] = $15;
       break label$7;
      case 2:
       if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___empty_28_29_20const($13)) {
        break label$7;
       }
       $15 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($13, 0) >> 2];
       $16 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $16 + 4;
       HEAP32[$16 >> 2] = $15;
       break label$7;
      case 1:
       $15 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___empty_28_29_20const($12);
       if ($15 | !$23) {
        break label$7;
       }
       wasm2js_i32$0 = $2, wasm2js_i32$1 = wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29_20const($12), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29_20const($12), HEAP32[$2 >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$7;
      case 3:
       break label$8;
      }
     }
     $24 = HEAP32[$2 >> 2];
     $4 = $7 ? $4 + 4 | 0 : $4;
     $15 = $4;
     while (1) {
      label$14 : {
       if ($15 >>> 0 >= $5 >>> 0) {
        break label$14;
       }
       if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($6, 2048, HEAP32[$15 >> 2])) {
        break label$14;
       }
       $15 = $15 + 4 | 0;
       continue;
      }
      break;
     }
     $16 = $14;
     if (($16 | 0) >= 1) {
      while (1) {
       $17 = ($16 | 0) < 1;
       if (!($17 | $15 >>> 0 <= $4 >>> 0)) {
        $15 = $15 + -4 | 0;
        $17 = HEAP32[$15 >> 2];
        $18 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $18 + 4;
        HEAP32[$18 >> 2] = $17;
        $16 = $16 + -1 | 0;
        continue;
       }
       break;
      }
      if ($17) {
       $19 = 0;
      } else {
       $19 = std____2__ctype_wchar_t___widen_28char_29_20const($6, 48);
      }
      $17 = HEAP32[$2 >> 2];
      while (1) {
       $18 = $17 + 4 | 0;
       if (($16 | 0) >= 1) {
        HEAP32[$17 >> 2] = $19;
        $16 = $16 + -1 | 0;
        $17 = $18;
        continue;
       }
       break;
      }
      HEAP32[$2 >> 2] = $18;
      HEAP32[$17 >> 2] = $9;
     }
     label$22 : {
      if (($4 | 0) == ($15 | 0)) {
       $16 = std____2__ctype_wchar_t___widen_28char_29_20const($6, 48);
       $17 = HEAP32[$2 >> 2];
       $15 = $17 + 4 | 0;
       HEAP32[$2 >> 2] = $15;
       HEAP32[$17 >> 2] = $16;
       break label$22;
      }
      label$24 : {
       if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($11)) {
        $19 = std____2__numeric_limits_unsigned_20int___max_28_29();
        break label$24;
       }
       $19 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, 0) | 0];
      }
      $16 = 0;
      $21 = 0;
      while (1) {
       if (($4 | 0) != ($15 | 0)) {
        label$28 : {
         if (($16 | 0) != ($19 | 0)) {
          $17 = $16;
          break label$28;
         }
         $17 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $17 + 4;
         HEAP32[$17 >> 2] = $10;
         $17 = 0;
         $21 = $21 + 1 | 0;
         if ($21 >>> 0 >= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($11) >>> 0) {
          $19 = $16;
          break label$28;
         }
         if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $21) | 0] == (std____2__numeric_limits_char___max_28_29() & 255)) {
          $19 = std____2__numeric_limits_unsigned_20int___max_28_29();
          break label$28;
         }
         $19 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $21) | 0];
        }
        $15 = $15 + -4 | 0;
        $16 = HEAP32[$15 >> 2];
        $18 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $18 + 4;
        HEAP32[$18 >> 2] = $16;
        $16 = $17 + 1 | 0;
        continue;
       }
       break;
      }
      $15 = HEAP32[$2 >> 2];
     }
     void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29($24, $15);
    }
    $22 = $22 + 1 | 0;
    continue;
   }
   break;
  }
  HEAP32[$1 >> 2] = $0;
 }
 $0 = $20 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function dispose_chunk($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = $0 + $1 | 0;
 label$1 : {
  label$2 : {
   $2 = HEAP32[$0 + 4 >> 2];
   if ($2 & 1) {
    break label$2;
   }
   if (!($2 & 3)) {
    break label$1;
   }
   $2 = HEAP32[$0 >> 2];
   $1 = $2 + $1 | 0;
   $0 = $0 - $2 | 0;
   if (($0 | 0) != HEAP32[6829]) {
    27312;
    if ($2 >>> 0 <= 255) {
     $6 = $2 >>> 3 | 0;
     $2 = ($6 << 3) + 27336 | 0;
     $3 = HEAP32[$0 + 8 >> 2];
     $4 = HEAP32[$0 + 12 >> 2];
     if (($4 | 0) == ($3 | 0)) {
      wasm2js_i32$0 = 27296, wasm2js_i32$1 = HEAP32[6824] & __wasm_rotl_i32(-2, $6), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$2;
     }
     HEAP32[$3 + 12 >> 2] = $4;
     HEAP32[$4 + 8 >> 2] = $3;
     break label$2;
    }
    $6 = HEAP32[$0 + 24 >> 2];
    $3 = HEAP32[$0 + 12 >> 2];
    label$6 : {
     if (($3 | 0) != ($0 | 0)) {
      $2 = HEAP32[$0 + 8 >> 2];
      HEAP32[$2 + 12 >> 2] = $3;
      HEAP32[$3 + 8 >> 2] = $2;
      break label$6;
     }
     label$9 : {
      $2 = $0 + 20 | 0;
      $4 = HEAP32[$2 >> 2];
      if ($4) {
       break label$9;
      }
      $2 = $0 + 16 | 0;
      $4 = HEAP32[$2 >> 2];
      if ($4) {
       break label$9;
      }
      $3 = 0;
      break label$6;
     }
     while (1) {
      $7 = $2;
      $3 = $4;
      $2 = $3 + 20 | 0;
      $4 = HEAP32[$2 >> 2];
      if ($4) {
       continue;
      }
      $2 = $3 + 16 | 0;
      $4 = HEAP32[$3 + 16 >> 2];
      if ($4) {
       continue;
      }
      break;
     }
     HEAP32[$7 >> 2] = 0;
    }
    if (!$6) {
     break label$2;
    }
    $4 = HEAP32[$0 + 28 >> 2];
    $2 = ($4 << 2) + 27600 | 0;
    label$11 : {
     if (HEAP32[$2 >> 2] == ($0 | 0)) {
      HEAP32[$2 >> 2] = $3;
      if ($3) {
       break label$11;
      }
      wasm2js_i32$0 = 27300, wasm2js_i32$1 = HEAP32[6825] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$2;
     }
     HEAP32[(HEAP32[$6 + 16 >> 2] == ($0 | 0) ? 16 : 20) + $6 >> 2] = $3;
     if (!$3) {
      break label$2;
     }
    }
    HEAP32[$3 + 24 >> 2] = $6;
    $2 = HEAP32[$0 + 16 >> 2];
    if ($2) {
     HEAP32[$3 + 16 >> 2] = $2;
     HEAP32[$2 + 24 >> 2] = $3;
    }
    $2 = HEAP32[$0 + 20 >> 2];
    if (!$2) {
     break label$2;
    }
    HEAP32[$3 + 20 >> 2] = $2;
    HEAP32[$2 + 24 >> 2] = $3;
    break label$2;
   }
   $2 = HEAP32[$5 + 4 >> 2];
   if (($2 & 3) != 3) {
    break label$2;
   }
   HEAP32[6826] = $1;
   HEAP32[$5 + 4 >> 2] = $2 & -2;
   HEAP32[$0 + 4 >> 2] = $1 | 1;
   HEAP32[$5 >> 2] = $1;
   return;
  }
  $2 = HEAP32[$5 + 4 >> 2];
  label$14 : {
   if (!($2 & 2)) {
    if (HEAP32[6830] == ($5 | 0)) {
     HEAP32[6830] = $0;
     $1 = HEAP32[6827] + $1 | 0;
     HEAP32[6827] = $1;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     if (HEAP32[6829] != ($0 | 0)) {
      break label$1;
     }
     HEAP32[6826] = 0;
     HEAP32[6829] = 0;
     return;
    }
    if (HEAP32[6829] == ($5 | 0)) {
     HEAP32[6829] = $0;
     $1 = HEAP32[6826] + $1 | 0;
     HEAP32[6826] = $1;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + $1 >> 2] = $1;
     return;
    }
    27312;
    $1 = ($2 & -8) + $1 | 0;
    label$18 : {
     if ($2 >>> 0 <= 255) {
      $4 = HEAP32[$5 + 12 >> 2];
      $3 = HEAP32[$5 + 8 >> 2];
      $5 = $2 >>> 3 | 0;
      if (($3 | 0) == ($4 | 0)) {
       wasm2js_i32$0 = 27296, wasm2js_i32$1 = HEAP32[6824] & __wasm_rotl_i32(-2, $5), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$18;
      }
      HEAP32[$3 + 12 >> 2] = $4;
      HEAP32[$4 + 8 >> 2] = $3;
      break label$18;
     }
     $6 = HEAP32[$5 + 24 >> 2];
     $3 = HEAP32[$5 + 12 >> 2];
     label$21 : {
      if (($5 | 0) != ($3 | 0)) {
       $2 = HEAP32[$5 + 8 >> 2];
       HEAP32[$2 + 12 >> 2] = $3;
       HEAP32[$3 + 8 >> 2] = $2;
       break label$21;
      }
      label$24 : {
       $2 = $5 + 20 | 0;
       $4 = HEAP32[$2 >> 2];
       if ($4) {
        break label$24;
       }
       $2 = $5 + 16 | 0;
       $4 = HEAP32[$2 >> 2];
       if ($4) {
        break label$24;
       }
       $3 = 0;
       break label$21;
      }
      while (1) {
       $7 = $2;
       $3 = $4;
       $2 = $3 + 20 | 0;
       $4 = HEAP32[$2 >> 2];
       if ($4) {
        continue;
       }
       $2 = $3 + 16 | 0;
       $4 = HEAP32[$3 + 16 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      HEAP32[$7 >> 2] = 0;
     }
     if (!$6) {
      break label$18;
     }
     $4 = HEAP32[$5 + 28 >> 2];
     $2 = ($4 << 2) + 27600 | 0;
     label$26 : {
      if (HEAP32[$2 >> 2] == ($5 | 0)) {
       HEAP32[$2 >> 2] = $3;
       if ($3) {
        break label$26;
       }
       wasm2js_i32$0 = 27300, wasm2js_i32$1 = HEAP32[6825] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$18;
      }
      HEAP32[(HEAP32[$6 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $6 >> 2] = $3;
      if (!$3) {
       break label$18;
      }
     }
     HEAP32[$3 + 24 >> 2] = $6;
     $2 = HEAP32[$5 + 16 >> 2];
     if ($2) {
      HEAP32[$3 + 16 >> 2] = $2;
      HEAP32[$2 + 24 >> 2] = $3;
     }
     $2 = HEAP32[$5 + 20 >> 2];
     if (!$2) {
      break label$18;
     }
     HEAP32[$3 + 20 >> 2] = $2;
     HEAP32[$2 + 24 >> 2] = $3;
    }
    HEAP32[$0 + 4 >> 2] = $1 | 1;
    HEAP32[$0 + $1 >> 2] = $1;
    if (HEAP32[6829] != ($0 | 0)) {
     break label$14;
    }
    HEAP32[6826] = $1;
    return;
   }
   HEAP32[$5 + 4 >> 2] = $2 & -2;
   HEAP32[$0 + 4 >> 2] = $1 | 1;
   HEAP32[$0 + $1 >> 2] = $1;
  }
  if ($1 >>> 0 <= 255) {
   $2 = $1 >>> 3 | 0;
   $1 = ($2 << 3) + 27336 | 0;
   $2 = 1 << $2;
   $4 = HEAP32[6824];
   label$30 : {
    if (!($2 & $4)) {
     HEAP32[6824] = $2 | $4;
     $2 = $1;
     break label$30;
    }
    $2 = HEAP32[$1 + 8 >> 2];
   }
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$2 + 12 >> 2] = $0;
   HEAP32[$0 + 12 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = $2;
   return;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $7 = $0;
  $4 = $1 >>> 8 | 0;
  $2 = 0;
  label$32 : {
   if (!$4) {
    break label$32;
   }
   $2 = 31;
   if ($1 >>> 0 > 16777215) {
    break label$32;
   }
   $2 = $4 + 1048320 >>> 16 & 8;
   $4 = $4 << $2;
   $3 = $4;
   $4 = $4 + 520192 >>> 16 & 4;
   $3 = $3 << $4;
   $5 = $3;
   $3 = $3 + 245760 >>> 16 & 2;
   $2 = ($5 << $3 >>> 15 | 0) - ($2 | $4 | $3) | 0;
   $2 = ($2 << 1 | $1 >>> $2 + 21 & 1) + 28 | 0;
  }
  HEAP32[$7 + 28 >> 2] = $2;
  $4 = ($2 << 2) + 27600 | 0;
  label$33 : {
   $3 = HEAP32[6825];
   $5 = 1 << $2;
   label$34 : {
    if (!($3 & $5)) {
     HEAP32[6825] = $3 | $5;
     HEAP32[$4 >> 2] = $0;
     break label$34;
    }
    $2 = $1 << (($2 | 0) == 31 ? 0 : 25 - ($2 >>> 1 | 0) | 0);
    $3 = HEAP32[$4 >> 2];
    while (1) {
     $4 = $3;
     if ((HEAP32[$3 + 4 >> 2] & -8) == ($1 | 0)) {
      break label$33;
     }
     $3 = $2 >>> 29 | 0;
     $2 = $2 << 1;
     $7 = ($3 & 4) + $4 | 0;
     $5 = $7 + 16 | 0;
     $3 = HEAP32[$5 >> 2];
     if ($3) {
      continue;
     }
     break;
    }
    HEAP32[$7 + 16 >> 2] = $0;
   }
   HEAP32[$0 + 24 >> 2] = $4;
   HEAP32[$0 + 12 >> 2] = $0;
   HEAP32[$0 + 8 >> 2] = $0;
   return;
  }
  $1 = HEAP32[$4 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $1;
 }
}
function std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $19 = global$0 - 16 | 0;
 $16 = $19;
 if ($19 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $16;
 HEAP32[$2 >> 2] = $0;
 $23 = $3 & 512;
 while (1) {
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (($22 | 0) == 4) {
       if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1) {
        wasm2js_i32$0 = $19, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29_20const($13), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
        wasm2js_i32$0 = $2, wasm2js_i32$1 = char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29(std____2____wrap_iter_char_20const____operator__28long_29_20const($19 + 8 | 0, 1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29_20const($13), HEAP32[$2 >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       }
       $15 = $3 & 176;
       if (($15 | 0) == 16) {
        break label$5;
       }
       if (($15 | 0) != 32) {
        break label$6;
       }
       HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
       break label$5;
      }
      $15 = HEAP8[$8 + $22 | 0];
      if ($15 >>> 0 > 4) {
       break label$3;
      }
      label$9 : {
       switch ($15 - 1 | 0) {
       default:
        HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
        break label$3;
       case 0:
        HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
        $15 = std____2__ctype_char___widen_28char_29_20const($6, 32);
        $16 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $16 + 1;
        HEAP8[$16 | 0] = $15;
        break label$3;
       case 2:
        if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($13)) {
         break label$3;
        }
        $15 = HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($13, 0) | 0];
        $16 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $16 + 1;
        HEAP8[$16 | 0] = $15;
        break label$3;
       case 1:
        $15 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($12);
        if ($15 | !$23) {
         break label$3;
        }
        wasm2js_i32$0 = $2, wasm2js_i32$1 = char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29_20const($12), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29_20const($12), HEAP32[$2 >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$3;
       case 3:
        break label$9;
       }
      }
      $24 = HEAP32[$2 >> 2];
      $4 = $7 ? $4 + 1 | 0 : $4;
      $15 = $4;
      while (1) {
       label$15 : {
        if ($15 >>> 0 >= $5 >>> 0) {
         break label$15;
        }
        if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($6, 2048, HEAP8[$15 | 0])) {
         break label$15;
        }
        $15 = $15 + 1 | 0;
        continue;
       }
       break;
      }
      $16 = $14;
      if (($16 | 0) >= 1) {
       while (1) {
        $17 = ($16 | 0) < 1;
        if (!($17 | $15 >>> 0 <= $4 >>> 0)) {
         $15 = $15 + -1 | 0;
         $17 = HEAPU8[$15 | 0];
         $18 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $18 + 1;
         HEAP8[$18 | 0] = $17;
         $16 = $16 + -1 | 0;
         continue;
        }
        break;
       }
       if ($17) {
        $18 = 0;
       } else {
        $18 = std____2__ctype_char___widen_28char_29_20const($6, 48);
       }
       while (1) {
        $17 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $17 + 1;
        if (($16 | 0) >= 1) {
         HEAP8[$17 | 0] = $18;
         $16 = $16 + -1 | 0;
         continue;
        }
        break;
       }
       HEAP8[$17 | 0] = $9;
      }
      if (($4 | 0) == ($15 | 0)) {
       $15 = std____2__ctype_char___widen_28char_29_20const($6, 48);
       $16 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $16 + 1;
       HEAP8[$16 | 0] = $15;
       break label$4;
      }
      label$24 : {
       if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($11)) {
        $20 = std____2__numeric_limits_unsigned_20int___max_28_29();
        break label$24;
       }
       $20 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, 0) | 0];
      }
      $16 = 0;
      $21 = 0;
      while (1) {
       if (($4 | 0) == ($15 | 0)) {
        break label$4;
       }
       label$27 : {
        if (($16 | 0) != ($20 | 0)) {
         $17 = $16;
         break label$27;
        }
        $17 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $17 + 1;
        HEAP8[$17 | 0] = $10;
        $17 = 0;
        $21 = $21 + 1 | 0;
        if ($21 >>> 0 >= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($11) >>> 0) {
         $20 = $16;
         break label$27;
        }
        if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $21) | 0] == (std____2__numeric_limits_char___max_28_29() & 255)) {
         $20 = std____2__numeric_limits_unsigned_20int___max_28_29();
         break label$27;
        }
        $20 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $21) | 0];
       }
       $15 = $15 + -1 | 0;
       $16 = HEAPU8[$15 | 0];
       $18 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $18 + 1;
       HEAP8[$18 | 0] = $16;
       $16 = $17 + 1 | 0;
       continue;
      }
     }
     HEAP32[$1 >> 2] = $0;
    }
    $0 = $19 + 16 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow();
    }
    global$0 = $0;
    return;
   }
   void_20std____2__reverse_char___28char__2c_20char__29($24, HEAP32[$2 >> 2]);
  }
  $22 = $22 + 1 | 0;
  continue;
 }
}
function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $0 = global$0 - 1072 | 0;
 $9 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 HEAP32[$0 + 16 >> 2] = $5;
 HEAP32[$0 + 20 >> 2] = $6;
 HEAP32[$0 + 24 >> 2] = $7;
 HEAP32[$0 + 28 >> 2] = $8;
 HEAP32[$0 + 956 >> 2] = $0 + 960;
 $9 = snprintf($0 + 960 | 0, 100, 14111, $0 + 16 | 0);
 HEAP32[$0 + 544 >> 2] = 166;
 $14 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 536 | 0, 0, $0 + 544 | 0);
 HEAP32[$0 + 544 >> 2] = 166;
 $12 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 528 | 0, 0, $0 + 544 | 0);
 $10 = $0 + 544 | 0;
 label$2 : {
  if ($9 >>> 0 >= 100) {
   $9 = std____2____cloc_28_29();
   HEAP32[$0 >> 2] = $5;
   HEAP32[$0 + 4 >> 2] = $6;
   HEAP32[$0 + 8 >> 2] = $7;
   HEAP32[$0 + 12 >> 2] = $8;
   $9 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 956 | 0, $9, 14111, $0);
   $10 = HEAP32[$0 + 956 >> 2];
   if (!$10) {
    break label$2;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($14, $10);
   std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($12, dlmalloc($9 << 2));
   if (bool_20std____2__operator___wchar_t_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($12, 0)) {
    break label$2;
   }
   $10 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($12);
  }
  std____2__ios_base__getloc_28_29_20const($0 + 520 | 0, $3);
  $15 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 520 | 0);
  $6 = HEAP32[$0 + 956 >> 2];
  std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($15, $6, $9 + $6 | 0, $10);
  $13 = $9 ? HEAPU8[HEAP32[$0 + 956 >> 2]] == 45 : $13;
  $5 = $0 + 520 | 0;
  $11 = $0 + 512 | 0;
  $16 = $0 + 508 | 0;
  $17 = $0 + 504 | 0;
  $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 488 | 0);
  $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0 + 472 | 0);
  $7 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0 + 456 | 0);
  std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($2, $13, $5, $11, $16, $17, $8, $6, $7, $0 + 452 | 0);
  HEAP32[$0 + 48 >> 2] = 166;
  $11 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 40 | 0, 0, $0 + 48 | 0);
  $2 = HEAP32[$0 + 452 >> 2];
  label$6 : {
   if (($9 | 0) > ($2 | 0)) {
    $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($7) + ($9 - $2 << 1 | 1) | 0;
    break label$6;
   }
   $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($7) + 2 | 0;
  }
  $2 = $0 + 48 | 0;
  $5 = ($5 + std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($6) | 0) + HEAP32[$0 + 452 >> 2] | 0;
  if ($5 >>> 0 >= 101) {
   std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($11, dlmalloc($5 << 2));
   $2 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($11);
   if (!$2) {
    break label$2;
   }
  }
  std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20int_29($2, $0 + 36 | 0, $0 + 32 | 0, std____2__ios_base__flags_28_29_20const($3), $10, ($9 << 2) + $10 | 0, $15, $13, $0 + 512 | 0, HEAP32[$0 + 508 >> 2], HEAP32[$0 + 504 >> 2], $8, $6, $7, HEAP32[$0 + 452 >> 2]);
  $9 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $2, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2], $3, $4);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($11);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($7);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($6);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($8);
  std____2__locale___locale_28_29($0 + 520 | 0);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($12);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($14);
  $0 = $0 + 1072 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return $9 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}
function csbigintegerlib__BigInteger__operator__28csbigintegerlib__BigInteger_20const__29_20const_2($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $4 = global$0 - 80 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          $9 = HEAP32[5493];
          $6 = HEAP32[5494] - $9 | 0;
          $5 = HEAP32[$1 + 4 >> 2];
          $11 = HEAP32[$1 >> 2];
          $8 = $5 - $11 | 0;
          if (($6 | 0) != ($8 | 0)) {
           break label$10;
          }
          if (($5 | 0) == ($11 | 0)) {
           break label$9;
          }
          $1 = $9;
          $3 = $11;
          while (1) {
           if (HEAPU8[$3 | 0] != HEAPU8[$1 | 0]) {
            break label$10;
           }
           $1 = $1 + 1 | 0;
           $3 = $3 + 1 | 0;
           if (($5 | 0) != ($3 | 0)) {
            continue;
           }
           break;
          }
          break label$9;
         }
         $5 = HEAP32[$2 + 4 >> 2];
         $7 = HEAP32[$2 >> 2];
         $10 = $5 - $7 | 0;
         if (($10 | 0) != ($6 | 0)) {
          break label$8;
         }
         if (($5 | 0) == ($7 | 0)) {
          break label$9;
         }
         $1 = $9;
         $3 = $7;
         while (1) {
          if (HEAPU8[$3 | 0] != HEAPU8[$1 | 0]) {
           break label$8;
          }
          $1 = $1 + 1 | 0;
          $3 = $3 + 1 | 0;
          if (($5 | 0) != ($3 | 0)) {
           continue;
          }
          break;
         }
        }
        HEAP32[$0 + 8 >> 2] = 0;
        HEAP32[$0 >> 2] = 0;
        HEAP32[$0 + 4 >> 2] = 0;
        if (!$6) {
         break label$7;
        }
        if (($6 | 0) <= -1) {
         break label$6;
        }
        $1 = operator_20new_28unsigned_20long_29($6);
        HEAP32[$0 >> 2] = $1;
        HEAP32[$0 + 4 >> 2] = $1;
        $3 = $1 + $6 | 0;
        HEAP32[$0 + 8 >> 2] = $3;
        memcpy($1, $9, $6);
        HEAP32[$0 + 4 >> 2] = $3;
        break label$7;
       }
       HEAP32[$4 + 72 >> 2] = 0;
       HEAP32[$4 + 64 >> 2] = 0;
       HEAP32[$4 + 68 >> 2] = 0;
       $1 = (($5 + $8 | 0) - $7 | 0) + 2 | 0;
       if ($1) {
        if (($1 | 0) <= -1) {
         break label$5;
        }
        $3 = operator_20new_28unsigned_20long_29($1);
        HEAP32[$4 + 64 >> 2] = $3;
        $6 = $1 + $3 | 0;
        HEAP32[$4 + 72 >> 2] = $6;
        memset($3, 0, $1);
        HEAP32[$4 + 68 >> 2] = $6;
       }
       HEAP32[$4 + 56 >> 2] = 0;
       HEAP32[$4 + 48 >> 2] = 0;
       HEAP32[$4 + 52 >> 2] = 0;
       label$14 : {
        if (!$8) {
         break label$14;
        }
        if (($8 | 0) <= -1) {
         break label$4;
        }
        $1 = operator_20new_28unsigned_20long_29($8);
        HEAP32[$4 + 48 >> 2] = $1;
        $3 = $1 + $8 | 0;
        HEAP32[$4 + 56 >> 2] = $3;
        $6 = memcpy($1, $11, $8);
        HEAP32[$4 + 52 >> 2] = $3;
        $3 = $3 + -1 | 0;
        if ($3 >>> 0 <= $6 >>> 0) {
         break label$14;
        }
        while (1) {
         $5 = HEAPU8[$1 | 0];
         HEAP8[$1 | 0] = HEAPU8[$3 | 0];
         HEAP8[$3 | 0] = $5;
         $1 = $1 + 1 | 0;
         $3 = $3 + -1 | 0;
         if ($1 >>> 0 < $3 >>> 0) {
          continue;
         }
         break;
        }
        $5 = HEAP32[$2 + 4 >> 2];
        $7 = HEAP32[$2 >> 2];
        $10 = $5 - $7 | 0;
       }
       HEAP32[$4 + 40 >> 2] = 0;
       HEAP32[$4 + 32 >> 2] = 0;
       HEAP32[$4 + 36 >> 2] = 0;
       label$16 : {
        if (!$10) {
         $5 = 0;
         $3 = 0;
         break label$16;
        }
        if (($10 | 0) <= -1) {
         break label$3;
        }
        $3 = operator_20new_28unsigned_20long_29($10);
        HEAP32[$4 + 32 >> 2] = $3;
        HEAP32[$4 + 36 >> 2] = $3;
        HEAP32[$4 + 40 >> 2] = $3 + $10;
        $1 = $5 - $7 | 0;
        if (($1 | 0) <= 0) {
         HEAP32[$4 + 36 >> 2] = $3;
         $5 = $3;
         break label$16;
        }
        $6 = memcpy($3, $7, $1);
        $5 = $6 + $1 | 0;
        HEAP32[$4 + 36 >> 2] = $5;
        $1 = $5 + -1 | 0;
        if ($1 >>> 0 <= $6 >>> 0) {
         break label$16;
        }
        while (1) {
         $5 = HEAPU8[$3 | 0];
         HEAP8[$3 | 0] = HEAPU8[$1 | 0];
         HEAP8[$1 | 0] = $5;
         $3 = $3 + 1 | 0;
         $1 = $1 + -1 | 0;
         if ($3 >>> 0 < $1 >>> 0) {
          continue;
         }
         break;
        }
        $5 = HEAP32[$4 + 36 >> 2];
        $3 = HEAP32[$4 + 32 >> 2];
       }
       $1 = HEAP32[$4 + 48 >> 2];
       $2 = $1;
       $9 = HEAP32[$4 + 52 >> 2] - $1 | 0;
       $1 = HEAP32[$4 + 64 >> 2];
       $6 = csbiginteger_mod($2 | 0, $9 | 0, $3 | 0, $5 - $3 | 0, $1 | 0, HEAP32[$4 + 68 >> 2] - $1 | 0) | 0;
       HEAP32[$4 + 8 >> 2] = 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       if ($6) {
        if (($6 | 0) <= -1) {
         break label$2;
        }
        $5 = $1 + $6 | 0;
        $3 = operator_20new_28unsigned_20long_29($6);
        HEAP32[$4 >> 2] = $3;
        HEAP32[$4 + 4 >> 2] = $3;
        HEAP32[$4 + 8 >> 2] = $3 + $6;
        while (1) {
         HEAP8[$3 | 0] = HEAPU8[$1 | 0];
         $3 = $3 + 1 | 0;
         $1 = $1 + 1 | 0;
         if (($5 | 0) != ($1 | 0)) {
          continue;
         }
         break;
        }
        HEAP32[$4 + 4 >> 2] = $3;
       }
       $1 = csbigintegerlib__BigInteger__BigInteger_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__2c_20bool_2c_20bool_29($4 + 16 | 0, $4, 0, 0);
       $3 = HEAP32[$4 >> 2];
       if ($3) {
        HEAP32[$4 + 4 >> 2] = $3;
        operator_20delete_28void__29($3);
       }
       HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
       HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
       $1 = HEAP32[$4 + 32 >> 2];
       if ($1) {
        HEAP32[$4 + 36 >> 2] = $1;
        operator_20delete_28void__29($1);
       }
       $1 = HEAP32[$4 + 48 >> 2];
       if ($1) {
        HEAP32[$4 + 52 >> 2] = $1;
        operator_20delete_28void__29($1);
       }
       $1 = HEAP32[$4 + 64 >> 2];
       if (!$1) {
        break label$7;
       }
       HEAP32[$4 + 68 >> 2] = $1;
       operator_20delete_28void__29($1);
      }
      $0 = $4 + 80 | 0;
      if ($0 >>> 0 < global$2 >>> 0) {
       __handle_stack_overflow();
      }
      global$0 = $0;
      return;
     }
     std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
     abort();
    }
    std____2____vector_base_common_true_____throw_length_error_28_29_20const($4 - -64 | 0);
    abort();
   }
   std____2____vector_base_common_true_____throw_length_error_28_29_20const($4 + 48 | 0);
   abort();
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($4 + 32 | 0);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($4);
 abort();
}
function mbsrtowcs($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = HEAP32[$1 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             if (!$3) {
              break label$12;
             }
             $6 = HEAP32[$3 >> 2];
             if (!$6) {
              break label$12;
             }
             if (!$0) {
              $3 = $2;
              break label$10;
             }
             HEAP32[$3 >> 2] = 0;
             $3 = $2;
             break label$11;
            }
            label$14 : {
             if (!HEAP32[HEAP32[__pthread_self_2() + 176 >> 2] >> 2]) {
              if (!$0) {
               break label$14;
              }
              if (!$2) {
               break label$1;
              }
              $6 = $2;
              while (1) {
               $3 = HEAP8[$5 | 0];
               if ($3) {
                HEAP32[$0 >> 2] = $3 & 57343;
                $0 = $0 + 4 | 0;
                $5 = $5 + 1 | 0;
                $6 = $6 + -1 | 0;
                if ($6) {
                 continue;
                }
                break label$1;
               }
               break;
              }
              HEAP32[$0 >> 2] = 0;
              HEAP32[$1 >> 2] = 0;
              return $2 - $6 | 0;
             }
             $3 = $2;
             if (!$0) {
              break label$9;
             }
             break label$7;
            }
            return strlen($5);
           }
           $4 = 1;
           break label$7;
          }
          $4 = 0;
          break label$8;
         }
         $4 = 1;
        }
        while (1) {
         if (!$4) {
          $4 = HEAPU8[$5 | 0] >>> 3 | 0;
          if (($4 + -16 | ($6 >> 26) + $4) >>> 0 > 7) {
           break label$6;
          }
          $4 = $5 + 1 | 0;
          $7 = $4;
          label$20 : {
           if (!($6 & 33554432)) {
            break label$20;
           }
           if ((HEAPU8[$4 | 0] & 192) != 128) {
            break label$6;
           }
           $4 = $5 + 2 | 0;
           $7 = $4;
           if (!($6 & 524288)) {
            break label$20;
           }
           if ((HEAPU8[$4 | 0] & 192) != 128) {
            break label$6;
           }
           $7 = $5 + 3 | 0;
          }
          $5 = $7;
          $3 = $3 + -1 | 0;
          $4 = 1;
          continue;
         }
         while (1) {
          $6 = HEAPU8[$5 | 0];
          label$22 : {
           if ($5 & 3 | $6 + -1 >>> 0 > 126) {
            break label$22;
           }
           $6 = HEAP32[$5 >> 2];
           if (($6 | $6 + -16843009) & -2139062144) {
            break label$22;
           }
           while (1) {
            $3 = $3 + -4 | 0;
            $6 = HEAP32[$5 + 4 >> 2];
            $4 = $5 + 4 | 0;
            $5 = $4;
            if (!(($6 + -16843009 | $6) & -2139062144)) {
             continue;
            }
            break;
           }
           $5 = $4;
          }
          $4 = $6 & 255;
          if ($4 + -1 >>> 0 <= 126) {
           $3 = $3 + -1 | 0;
           $5 = $5 + 1 | 0;
           continue;
          }
          break;
         }
         $4 = $4 + -194 | 0;
         if ($4 >>> 0 > 50) {
          break label$5;
         }
         $5 = $5 + 1 | 0;
         $6 = HEAP32[($4 << 2) + 8752 >> 2];
         $4 = 0;
         continue;
        }
       }
       while (1) {
        if (!$4) {
         if (!$3) {
          break label$1;
         }
         while (1) {
          label$28 : {
           $4 = HEAPU8[$5 | 0];
           $7 = $4 + -1 | 0;
           label$29 : {
            label$30 : {
             if ($7 >>> 0 > 126) {
              $6 = $4;
              break label$30;
             }
             if ($5 & 3 | $3 >>> 0 < 5) {
              break label$29;
             }
             label$32 : {
              while (1) {
               $6 = HEAP32[$5 >> 2];
               if (($6 | $6 + -16843009) & -2139062144) {
                break label$32;
               }
               HEAP32[$0 >> 2] = $6 & 255;
               HEAP32[$0 + 4 >> 2] = HEAPU8[$5 + 1 | 0];
               HEAP32[$0 + 8 >> 2] = HEAPU8[$5 + 2 | 0];
               HEAP32[$0 + 12 >> 2] = HEAPU8[$5 + 3 | 0];
               $0 = $0 + 16 | 0;
               $5 = $5 + 4 | 0;
               $3 = $3 + -4 | 0;
               if ($3 >>> 0 > 4) {
                continue;
               }
               break;
              }
              $6 = HEAPU8[$5 | 0];
             }
             $4 = $6 & 255;
             $7 = $4 + -1 | 0;
            }
            if ($7 >>> 0 > 126) {
             break label$28;
            }
           }
           HEAP32[$0 >> 2] = $4;
           $0 = $0 + 4 | 0;
           $5 = $5 + 1 | 0;
           $3 = $3 + -1 | 0;
           if ($3) {
            continue;
           }
           break label$1;
          }
          break;
         }
         $4 = $4 + -194 | 0;
         if ($4 >>> 0 > 50) {
          break label$5;
         }
         $5 = $5 + 1 | 0;
         $6 = HEAP32[($4 << 2) + 8752 >> 2];
         $4 = 1;
         continue;
        }
        $7 = HEAPU8[$5 | 0];
        $4 = $7 >>> 3 | 0;
        if (($4 + -16 | ($6 >> 26) + $4) >>> 0 > 7) {
         break label$6;
        }
        label$34 : {
         label$35 : {
          $8 = $5 + 1 | 0;
          $4 = $7 + -128 | $6 << 6;
          $7 = $8;
          label$36 : {
           if (($4 | 0) > -1) {
            break label$36;
           }
           $7 = HEAPU8[$8 | 0] + -128 | 0;
           if ($7 >>> 0 > 63) {
            break label$35;
           }
           $8 = $5 + 2 | 0;
           $4 = $4 << 6 | $7;
           $7 = $8;
           if (($4 | 0) > -1) {
            break label$36;
           }
           $7 = HEAPU8[$8 | 0] + -128 | 0;
           if ($7 >>> 0 > 63) {
            break label$35;
           }
           $4 = $4 << 6 | $7;
           $7 = $5 + 3 | 0;
          }
          $5 = $7;
          HEAP32[$0 >> 2] = $4;
          $3 = $3 + -1 | 0;
          $0 = $0 + 4 | 0;
          break label$34;
         }
         wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 25, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         $5 = $5 + -1 | 0;
         break label$3;
        }
        $4 = 0;
        continue;
       }
      }
      $5 = $5 + -1 | 0;
      if ($6) {
       break label$4;
      }
      $6 = HEAPU8[$5 | 0];
     }
     if ($6 & 255) {
      break label$4;
     }
     if ($0) {
      HEAP32[$0 >> 2] = 0;
      HEAP32[$1 >> 2] = 0;
     }
     return $2 - $3 | 0;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 25, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if (!$0) {
     break label$2;
    }
   }
   HEAP32[$1 >> 2] = $5;
  }
  return -1;
 }
 HEAP32[$1 >> 2] = $5;
 return $2;
}
function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $0 = global$0 - 464 | 0;
 $9 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 HEAP32[$0 + 16 >> 2] = $5;
 HEAP32[$0 + 20 >> 2] = $6;
 HEAP32[$0 + 24 >> 2] = $7;
 HEAP32[$0 + 28 >> 2] = $8;
 HEAP32[$0 + 348 >> 2] = $0 + 352;
 $9 = snprintf($0 + 352 | 0, 100, 14111, $0 + 16 | 0);
 HEAP32[$0 + 240 >> 2] = 166;
 $14 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 232 | 0, 0, $0 + 240 | 0);
 HEAP32[$0 + 240 >> 2] = 166;
 $12 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 224 | 0, 0, $0 + 240 | 0);
 $10 = $0 + 240 | 0;
 label$2 : {
  if ($9 >>> 0 >= 100) {
   $9 = std____2____cloc_28_29();
   HEAP32[$0 >> 2] = $5;
   HEAP32[$0 + 4 >> 2] = $6;
   HEAP32[$0 + 8 >> 2] = $7;
   HEAP32[$0 + 12 >> 2] = $8;
   $9 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 348 | 0, $9, 14111, $0);
   $10 = HEAP32[$0 + 348 >> 2];
   if (!$10) {
    break label$2;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($14, $10);
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($12, dlmalloc($9));
   if (bool_20std____2__operator___char_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($12, 0)) {
    break label$2;
   }
   $10 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($12);
  }
  std____2__ios_base__getloc_28_29_20const($0 + 216 | 0, $3);
  $15 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 216 | 0);
  $6 = HEAP32[$0 + 348 >> 2];
  std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($15, $6, $9 + $6 | 0, $10);
  $13 = $9 ? HEAPU8[HEAP32[$0 + 348 >> 2]] == 45 : $13;
  $5 = $0 + 216 | 0;
  $11 = $0 + 208 | 0;
  $16 = $0 + 207 | 0;
  $17 = $0 + 206 | 0;
  $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 176 | 0);
  $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 160 | 0);
  std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($2, $13, $5, $11, $16, $17, $8, $6, $7, $0 + 156 | 0);
  HEAP32[$0 + 48 >> 2] = 166;
  $11 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 40 | 0, 0, $0 + 48 | 0);
  $2 = HEAP32[$0 + 156 >> 2];
  label$6 : {
   if (($9 | 0) > ($2 | 0)) {
    $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7) + ($9 - $2 << 1 | 1) | 0;
    break label$6;
   }
   $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7) + 2 | 0;
  }
  $2 = $0 + 48 | 0;
  $5 = ($5 + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) | 0) + HEAP32[$0 + 156 >> 2] | 0;
  if ($5 >>> 0 >= 101) {
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($11, dlmalloc($5));
   $2 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($11);
   if (!$2) {
    break label$2;
   }
  }
  std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_29($2, $0 + 36 | 0, $0 + 32 | 0, std____2__ios_base__flags_28_29_20const($3), $10, $9 + $10 | 0, $15, $13, $0 + 208 | 0, HEAP8[$0 + 207 | 0], HEAP8[$0 + 206 | 0], $8, $6, $7, HEAP32[$0 + 156 >> 2]);
  $9 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $2, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2], $3, $4);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($11);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($8);
  std____2__locale___locale_28_29($0 + 216 | 0);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($12);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($14);
  $0 = $0 + 464 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return $9 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}
function __floatscan($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 48 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 label$2 : {
  if ($2 >>> 0 <= 2) {
   $5 = $1;
   $2 = $2 << 2;
   $11 = HEAP32[$2 + 9036 >> 2];
   $12 = HEAP32[$2 + 9024 >> 2];
   while (1) {
    $2 = HEAP32[$1 + 4 >> 2];
    label$5 : {
     if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      HEAP32[$5 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$5;
     }
     $2 = __shgetc($1);
    }
    if (isspace($2)) {
     continue;
    }
    break;
   }
   $4 = $2 + -43 | 0;
   label$7 : {
    if ($4 >>> 0 > 2) {
     $7 = 1;
     break label$7;
    }
    $7 = 1;
    if (!($4 - 1)) {
     break label$7;
    }
    $7 = ($2 | 0) == 45 ? -1 : 1;
    $2 = HEAP32[$1 + 4 >> 2];
    if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$5 + 4 >> 2] = $2 + 1;
     $2 = HEAPU8[$2 | 0];
     break label$7;
    }
    $2 = __shgetc($1);
   }
   $4 = 0;
   label$10 : {
    label$11 : {
     while (1) {
      if (HEAP8[$4 + 8956 | 0] == ($2 | 32)) {
       label$14 : {
        if ($4 >>> 0 > 6) {
         break label$14;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
         HEAP32[$5 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break label$14;
        }
        $2 = __shgetc($1);
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) != 8) {
        continue;
       }
       break label$11;
      }
      break;
     }
     if (($4 | 0) != 3) {
      if (($4 | 0) == 8) {
       break label$11;
      }
      if (!$3 | $4 >>> 0 < 4) {
       break label$10;
      }
      if (($4 | 0) == 8) {
       break label$11;
      }
     }
     $1 = HEAP32[$1 + 104 >> 2];
     if ($1) {
      HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + -1;
     }
     if (!$3 | $4 >>> 0 < 4) {
      break label$11;
     }
     while (1) {
      if ($1) {
       HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + -1;
      }
      $4 = $4 + -1 | 0;
      if ($4 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    __extendsftf2($6, Math_fround(Math_fround($7 | 0) * Math_fround(infinity)));
    $8 = HEAP32[$6 + 8 >> 2];
    $1 = HEAP32[$6 + 12 >> 2];
    $7 = $1;
    $1 = HEAP32[$6 >> 2];
    $9 = $1;
    $10 = HEAP32[$6 + 4 >> 2];
    break label$2;
   }
   label$20 : {
    label$21 : {
     label$22 : {
      if ($4) {
       break label$22;
      }
      $4 = 0;
      while (1) {
       if (HEAP8[$4 + 8965 | 0] != ($2 | 32)) {
        break label$22;
       }
       label$24 : {
        if ($4 >>> 0 > 1) {
         break label$24;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
         HEAP32[$5 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break label$24;
        }
        $2 = __shgetc($1);
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) != 3) {
        continue;
       }
       break;
      }
      break label$21;
     }
     label$26 : {
      label$27 : {
       if ($4 >>> 0 > 3) {
        break label$27;
       }
       switch ($4 - 1 | 0) {
       case 2:
        break label$21;
       case 0:
       case 1:
        break label$27;
       default:
        break label$26;
       }
      }
      if (HEAP32[$1 + 104 >> 2]) {
       HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + -1;
      }
      break label$20;
     }
     label$29 : {
      if (($2 | 0) != 48) {
       break label$29;
      }
      $4 = HEAP32[$1 + 4 >> 2];
      label$30 : {
       if ($4 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
        HEAP32[$5 + 4 >> 2] = $4 + 1;
        $4 = HEAPU8[$4 | 0];
        break label$30;
       }
       $4 = __shgetc($1);
      }
      if (($4 & -33) == 88) {
       hexfloat($6 + 16 | 0, $1, $12, $11, $7, $3);
       $8 = HEAP32[$6 + 24 >> 2];
       $1 = HEAP32[$6 + 28 >> 2];
       $7 = $1;
       $1 = HEAP32[$6 + 16 >> 2];
       $9 = $1;
       $10 = HEAP32[$6 + 20 >> 2];
       break label$2;
      }
      if (!HEAP32[$1 + 104 >> 2]) {
       break label$29;
      }
      HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + -1;
     }
     decfloat($6 + 32 | 0, $1, $2, $12, $11, $7, $3);
     $8 = HEAP32[$6 + 40 >> 2];
     $1 = HEAP32[$6 + 44 >> 2];
     $7 = $1;
     $1 = HEAP32[$6 + 32 >> 2];
     $9 = $1;
     $10 = HEAP32[$6 + 36 >> 2];
     break label$2;
    }
    label$33 : {
     $2 = HEAP32[$1 + 4 >> 2];
     label$34 : {
      if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
       HEAP32[$5 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$34;
      }
      $2 = __shgetc($1);
     }
     if (($2 | 0) == 40) {
      $4 = 1;
      break label$33;
     }
     $7 = 2147450880;
     if (!HEAP32[$1 + 104 >> 2]) {
      break label$2;
     }
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + -1;
     break label$2;
    }
    while (1) {
     $2 = HEAP32[$1 + 4 >> 2];
     label$38 : {
      if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
       HEAP32[$5 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$38;
      }
      $2 = __shgetc($1);
     }
     $7 = $2 + -65 | 0;
     label$40 : {
      label$41 : {
       if ($2 + -48 >>> 0 < 10 | $7 >>> 0 < 26) {
        break label$41;
       }
       $7 = $2 + -97 | 0;
       if (($2 | 0) == 95) {
        break label$41;
       }
       if ($7 >>> 0 >= 26) {
        break label$40;
       }
      }
      $4 = $4 + 1 | 0;
      continue;
     }
     break;
    }
    $7 = 2147450880;
    if (($2 | 0) == 41) {
     break label$2;
    }
    $2 = HEAP32[$1 + 104 >> 2];
    if ($2) {
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + -1;
    }
    if ($3) {
     if (!$4) {
      break label$2;
     }
     while (1) {
      $4 = $4 + -1 | 0;
      if ($2) {
       HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + -1;
      }
      if ($4) {
       continue;
      }
      break;
     }
     break label$2;
    }
   }
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   __shlim($1, 0, 0);
  }
  $7 = 0;
 }
 $1 = $0;
 HEAP32[$1 >> 2] = $9;
 HEAP32[$1 + 4 >> 2] = $10;
 HEAP32[$1 + 8 >> 2] = $8;
 HEAP32[$1 + 12 >> 2] = $7;
 $0 = $6 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}



function neopt__jhelper__ParseArray_28neopt__ITextReader__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $4 = global$0 - 32 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 label$2 : {
  label$3 : {
   label$4 : {
    if (($2 | 0) > -1) {
     while (1) {
      label$7 : {
       label$8 : {
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 32) {
         break label$8;
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 9) {
         break label$8;
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 13) {
         break label$8;
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) != 10) {
         break label$7;
        }
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
       continue;
      }
      break;
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0) != 91) {
      break label$4;
     }
     while (1) {
      label$10 : {
       label$11 : {
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 32) {
         break label$11;
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 9) {
         break label$11;
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 13) {
         break label$11;
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) != 10) {
         break label$10;
        }
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
       continue;
      }
      break;
     }
     $3 = operator_20new_28unsigned_20long_29(28);
     HEAP32[$3 + 8 >> 2] = 0;
     HEAP32[$3 + 12 >> 2] = 0;
     HEAP32[$3 + 24 >> 2] = 0;
     HEAP32[$3 + 16 >> 2] = 0;
     HEAP32[$3 + 20 >> 2] = 0;
     HEAP32[$3 >> 2] = 4268;
     HEAP32[$3 + 4 >> 2] = $3 + 8;
     HEAP32[$0 >> 2] = $3;
     $6 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
     $0 = HEAP32[$1 >> 2];
     if (($6 | 0) != 93) {
      $9 = $3 + 16 | 0;
      $11 = $2 + -1 | 0;
      while (1) {
       if ((FUNCTION_TABLE[HEAP32[$0 >> 2]]($1) | 0) == 44) {
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
       }
       neopt__jhelper__Parse_28neopt__ITextReader__2c_20int_29($4 + 24 | 0, $1, $11);
       $6 = HEAP32[$4 + 24 >> 2];
       HEAP32[$4 + 24 >> 2] = 0;
       $0 = HEAP32[$3 + 20 >> 2];
       $5 = HEAP32[$3 + 24 >> 2];
       label$15 : {
        if ($0 >>> 0 < $5 >>> 0) {
         HEAP32[$0 >> 2] = $6;
         HEAP32[$3 + 20 >> 2] = $0 + 4;
         break label$15;
        }
        $2 = HEAP32[$9 >> 2];
        $8 = $0 - $2 | 0;
        $7 = $8 >> 2;
        $0 = $7 + 1 | 0;
        if ($0 >>> 0 >= 1073741824) {
         break label$3;
        }
        $5 = $5 - $2 | 0;
        $10 = $5 >> 1;
        $5 = $5 >> 2 >>> 0 < 536870911 ? $10 >>> 0 < $0 >>> 0 ? $0 : $10 : 1073741823;
        $0 = 0;
        label$17 : {
         if (!$5) {
          break label$17;
         }
         if ($5 >>> 0 >= 1073741824) {
          break label$2;
         }
         $0 = operator_20new_28unsigned_20long_29($5 << 2);
        }
        $7 = $0 + ($7 << 2) | 0;
        HEAP32[$7 >> 2] = $6;
        $6 = ($5 << 2) + $0 | 0;
        $5 = $7 + 4 | 0;
        if (($8 | 0) >= 1) {
         memcpy($0, $2, $8);
        }
        HEAP32[$3 + 24 >> 2] = $6;
        HEAP32[$3 + 20 >> 2] = $5;
        HEAP32[$3 + 16 >> 2] = $0;
        if (!$2) {
         break label$15;
        }
        operator_20delete_28void__29($2);
       }
       while (1) {
        label$20 : {
         label$21 : {
          if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 32) {
           break label$21;
          }
          if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 9) {
           break label$21;
          }
          if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 13) {
           break label$21;
          }
          if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) != 10) {
           break label$20;
          }
         }
         FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
         continue;
        }
        break;
       }
       $0 = HEAP32[$4 + 24 >> 2];
       HEAP32[$4 + 24 >> 2] = 0;
       if ($0) {
        HEAP32[$0 >> 2] = 4180;
        std____2____tree_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____map_value_compare_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2__less_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20true__2c_20std____2__allocator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___20__20___destroy_28std____2____tree_node_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20void____29($0 + 4 | 0, HEAP32[$0 + 8 >> 2]);
        operator_20delete_28void__29($0);
       }
       $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
       $0 = HEAP32[$1 >> 2];
       if (($2 | 0) != 93) {
        continue;
       }
       break;
      }
     }
     FUNCTION_TABLE[HEAP32[$0 + 4 >> 2]]($1) | 0;
     $0 = $4 + 32 | 0;
     if ($0 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow();
     }
     global$0 = $0;
     return;
    }
    HEAP32[$4 + 4 >> 2] = 4234;
    HEAP32[$4 >> 2] = 4223;
    iprintf(3084, $4);
    exit(1);
    abort();
   }
   HEAP32[$4 + 20 >> 2] = 4234;
   HEAP32[$4 + 16 >> 2] = 4223;
   iprintf(3084, $4 + 16 | 0);
   exit(1);
   abort();
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($9);
  abort();
 }
 std____2____throw_length_error_28char_20const__29(2014);
 abort();
}
function std____2____money_get_wchar_t_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $10 = global$0 - 16 | 0;
 $11 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 label$2 : {
  if ($0) {
   $0 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($1);
   std____2__moneypunct_wchar_t_2c_20true___neg_format_28_29_20const($10, $0);
   $1 = HEAP32[$10 >> 2];
   HEAP8[$2 | 0] = $1;
   HEAP8[$2 + 1 | 0] = $1 >>> 8;
   HEAP8[$2 + 2 | 0] = $1 >>> 16;
   HEAP8[$2 + 3 | 0] = $1 >>> 24;
   std____2__moneypunct_wchar_t_2c_20true___negative_sign_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
   std____2__moneypunct_wchar_t_2c_20true___positive_sign_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
   wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__moneypunct_wchar_t_2c_20true___decimal_point_28_29_20const($0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__moneypunct_wchar_t_2c_20true___thousands_sep_28_29_20const($0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   std____2__moneypunct_wchar_t_2c_20true___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__moneypunct_wchar_t_2c_20true___curr_symbol_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($6, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_wchar_t_2c_20true___frac_digits_28_29_20const($0);
   break label$2;
  }
  $0 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($1);
  std____2__moneypunct_wchar_t_2c_20false___neg_format_28_29_20const($10, $0);
  $1 = HEAP32[$10 >> 2];
  HEAP8[$2 | 0] = $1;
  HEAP8[$2 + 1 | 0] = $1 >>> 8;
  HEAP8[$2 + 2 | 0] = $1 >>> 16;
  HEAP8[$2 + 3 | 0] = $1 >>> 24;
  std____2__moneypunct_wchar_t_2c_20false___negative_sign_28_29_20const($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
  std____2__moneypunct_wchar_t_2c_20false___positive_sign_28_29_20const($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
  wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__moneypunct_wchar_t_2c_20false___decimal_point_28_29_20const($0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__moneypunct_wchar_t_2c_20false___thousands_sep_28_29_20const($0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  std____2__moneypunct_wchar_t_2c_20false___grouping_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  std____2__moneypunct_wchar_t_2c_20false___curr_symbol_28_29_20const($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($6, $10);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
  $0 = std____2__moneypunct_wchar_t_2c_20false___frac_digits_28_29_20const($0);
 }
 HEAP32[$9 >> 2] = $0;
 $0 = $10 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $9 = global$0 - 128 | 0;
 $8 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 HEAP32[$9 + 120 >> 2] = $1;
 $10 = std____2__iterator_traits_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const____difference_type_20std____2__distance_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const___28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29($2, $3);
 HEAP32[$9 + 16 >> 2] = 166;
 $15 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($9 + 8 | 0, 0, $9 + 16 | 0);
 $8 = $9 + 16 | 0;
 label$2 : {
  if ($10 >>> 0 >= 101) {
   $8 = dlmalloc($10);
   if (!$8) {
    break label$2;
   }
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($15, $8);
  }
  $7 = $8;
  $1 = $2;
  while (1) {
   if (($1 | 0) == ($3 | 0)) {
    label$6 : while (1) {
     label$7 : {
      $1 = bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $9 + 120 | 0);
      if (!($1 ? $10 : 0)) {
       if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $9 + 120 | 0)) {
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
       }
       break label$7;
      }
      $12 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
      if (!$6) {
       $12 = std____2__ctype_wchar_t___toupper_28wchar_t_29_20const($4, $12);
      }
      $13 = $16 + 1 | 0;
      $17 = 0;
      $7 = $8;
      $1 = $2;
      while (1) {
       if (($1 | 0) == ($3 | 0)) {
        $16 = $13;
        if (!$17) {
         continue label$6;
        }
        std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
        $7 = $8;
        $1 = $2;
        if ($10 + $11 >>> 0 < 2) {
         continue label$6;
        }
        while (1) {
         if (($1 | 0) == ($3 | 0)) {
          continue label$6;
         }
         label$15 : {
          if (HEAPU8[$7 | 0] != 2) {
           break label$15;
          }
          if ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($1) | 0) == ($13 | 0)) {
           break label$15;
          }
          HEAP8[$7 | 0] = 0;
          $11 = $11 + -1 | 0;
         }
         $7 = $7 + 1 | 0;
         $1 = $1 + 12 | 0;
         continue;
        }
       }
       label$16 : {
        if (HEAPU8[$7 | 0] != 1) {
         break label$16;
        }
        $14 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($1, $16) >> 2];
        if (!$6) {
         $14 = std____2__ctype_wchar_t___toupper_28wchar_t_29_20const($4, $14);
        }
        label$17 : {
         if (($12 | 0) == ($14 | 0)) {
          $17 = 1;
          if ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($1) | 0) != ($13 | 0)) {
           break label$16;
          }
          HEAP8[$7 | 0] = 2;
          $11 = $11 + 1 | 0;
          break label$17;
         }
         HEAP8[$7 | 0] = 0;
        }
        $10 = $10 + -1 | 0;
       }
       $7 = $7 + 1 | 0;
       $1 = $1 + 12 | 0;
       continue;
      }
     }
     break;
    }
    label$21 : {
     label$22 : {
      while (1) {
       if (($2 | 0) == ($3 | 0)) {
        break label$22;
       }
       if (HEAPU8[$8 | 0] != 2) {
        $8 = $8 + 1 | 0;
        $2 = $2 + 12 | 0;
        continue;
       }
       break;
      }
      $3 = $2;
      break label$21;
     }
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    }
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
    $0 = $9 + 128 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow();
    }
    global$0 = $0;
    return $3;
   }
   label$26 : {
    if (!std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___empty_28_29_20const($1)) {
     HEAP8[$7 | 0] = 1;
     break label$26;
    }
    HEAP8[$7 | 0] = 2;
    $11 = $11 + 1 | 0;
    $10 = $10 + -1 | 0;
   }
   $7 = $7 + 1 | 0;
   $1 = $1 + 12 | 0;
   continue;
  }
 }
 std____throw_bad_alloc_28_29();
 abort();
}
function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $0 = global$0 - 496 | 0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 std____2__ios_base__getloc_28_29_20const($0 + 488 | 0, $3);
 $11 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 488 | 0);
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($5)) {
  $12 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($5, 0) >> 2] == (std____2__ctype_wchar_t___widen_28char_29_20const($11, 45) | 0);
 }
 $6 = $0 + 488 | 0;
 $7 = $0 + 480 | 0;
 $13 = $0 + 476 | 0;
 $14 = $0 + 472 | 0;
 $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 456 | 0);
 $9 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0 + 440 | 0);
 $8 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0 + 424 | 0);
 std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($2, $12, $6, $7, $13, $14, $10, $9, $8, $0 + 420 | 0);
 HEAP32[$0 + 16 >> 2] = 166;
 $7 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
 label$4 : {
  if ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($5) | 0) > HEAP32[$0 + 420 >> 2]) {
   $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($5);
   $6 = HEAP32[$0 + 420 >> 2];
   $6 = (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($8) + ($2 - $6 << 1) | 0) + 1 | 0;
   break label$4;
  }
  $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($8) + 2 | 0;
 }
 $2 = $0 + 16 | 0;
 $6 = ($6 + std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($9) | 0) + HEAP32[$0 + 420 >> 2] | 0;
 label$6 : {
  if ($6 >>> 0 < 101) {
   break label$6;
  }
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($7, dlmalloc($6 << 2));
  $2 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($7);
  if ($2) {
   break label$6;
  }
  std____throw_bad_alloc_28_29();
  abort();
 }
 std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20int_29($2, $0 + 4 | 0, $0, std____2__ios_base__flags_28_29_20const($3), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($5), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($5) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($5) << 2) | 0, $11, $12, $0 + 480 | 0, HEAP32[$0 + 476 >> 2], HEAP32[$0 + 472 >> 2], $10, $9, $8, HEAP32[$0 + 420 >> 2]);
 $5 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $2, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3, $4);
 std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($8);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($9);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
 std____2__locale___locale_28_29($0 + 488 | 0);
 $0 = $0 + 496 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $9 = global$0 - 128 | 0;
 $8 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 HEAP32[$9 + 120 >> 2] = $1;
 $10 = std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____difference_type_20std____2__distance_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2, $3);
 HEAP32[$9 + 16 >> 2] = 166;
 $15 = std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($9 + 8 | 0, 0, $9 + 16 | 0);
 $8 = $9 + 16 | 0;
 label$2 : {
  if ($10 >>> 0 >= 101) {
   $8 = dlmalloc($10);
   if (!$8) {
    break label$2;
   }
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($15, $8);
  }
  $7 = $8;
  $1 = $2;
  while (1) {
   if (($1 | 0) == ($3 | 0)) {
    label$6 : while (1) {
     label$7 : {
      $1 = bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $9 + 120 | 0);
      if (!($1 ? $10 : 0)) {
       if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $9 + 120 | 0)) {
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
       }
       break label$7;
      }
      $12 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
      if (!$6) {
       $12 = std____2__ctype_char___toupper_28char_29_20const($4, $12);
      }
      $13 = $16 + 1 | 0;
      $17 = 0;
      $7 = $8;
      $1 = $2;
      while (1) {
       if (($1 | 0) == ($3 | 0)) {
        $16 = $13;
        if (!$17) {
         continue label$6;
        }
        std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
        $7 = $8;
        $1 = $2;
        if ($10 + $11 >>> 0 < 2) {
         continue label$6;
        }
        while (1) {
         if (($1 | 0) == ($3 | 0)) {
          continue label$6;
         }
         label$15 : {
          if (HEAPU8[$7 | 0] != 2) {
           break label$15;
          }
          if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0) == ($13 | 0)) {
           break label$15;
          }
          HEAP8[$7 | 0] = 0;
          $11 = $11 + -1 | 0;
         }
         $7 = $7 + 1 | 0;
         $1 = $1 + 12 | 0;
         continue;
        }
       }
       label$16 : {
        if (HEAPU8[$7 | 0] != 1) {
         break label$16;
        }
        $14 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, $16) | 0];
        if (!$6) {
         $14 = std____2__ctype_char___toupper_28char_29_20const($4, $14 << 24 >> 24);
        }
        label$17 : {
         if (($12 & 255) == ($14 & 255)) {
          $17 = 1;
          if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0) != ($13 | 0)) {
           break label$16;
          }
          HEAP8[$7 | 0] = 2;
          $11 = $11 + 1 | 0;
          break label$17;
         }
         HEAP8[$7 | 0] = 0;
        }
        $10 = $10 + -1 | 0;
       }
       $7 = $7 + 1 | 0;
       $1 = $1 + 12 | 0;
       continue;
      }
     }
     break;
    }
    label$21 : {
     label$22 : {
      while (1) {
       if (($2 | 0) == ($3 | 0)) {
        break label$22;
       }
       if (HEAPU8[$8 | 0] != 2) {
        $8 = $8 + 1 | 0;
        $2 = $2 + 12 | 0;
        continue;
       }
       break;
      }
      $3 = $2;
      break label$21;
     }
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    }
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
    $0 = $9 + 128 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow();
    }
    global$0 = $0;
    return $3;
   }
   label$26 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($1)) {
     HEAP8[$7 | 0] = 1;
     break label$26;
    }
    HEAP8[$7 | 0] = 2;
    $11 = $11 + 1 | 0;
    $10 = $10 + -1 | 0;
   }
   $7 = $7 + 1 | 0;
   $1 = $1 + 12 | 0;
   continue;
  }
 }
 std____throw_bad_alloc_28_29();
 abort();
}
function std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $10 = global$0 - 16 | 0;
 $11 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 label$2 : {
  if ($0) {
   $0 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($2);
   label$4 : {
    if ($1) {
     std____2__moneypunct_wchar_t_2c_20true___neg_format_28_29_20const($10, $0);
     $1 = HEAP32[$10 >> 2];
     HEAP8[$3 | 0] = $1;
     HEAP8[$3 + 1 | 0] = $1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1 >>> 24;
     std____2__moneypunct_wchar_t_2c_20true___negative_sign_28_29_20const($10, $0);
     break label$4;
    }
    std____2__moneypunct_wchar_t_2c_20true___pos_format_28_29_20const($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1 >>> 24;
    std____2__moneypunct_wchar_t_2c_20true___positive_sign_28_29_20const($10, $0);
   }
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
   wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__moneypunct_wchar_t_2c_20true___decimal_point_28_29_20const($0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__moneypunct_wchar_t_2c_20true___thousands_sep_28_29_20const($0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   std____2__moneypunct_wchar_t_2c_20true___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__moneypunct_wchar_t_2c_20true___curr_symbol_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_wchar_t_2c_20true___frac_digits_28_29_20const($0);
   break label$2;
  }
  $0 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($2);
  label$6 : {
   if ($1) {
    std____2__moneypunct_wchar_t_2c_20false___neg_format_28_29_20const($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1 >>> 24;
    std____2__moneypunct_wchar_t_2c_20false___negative_sign_28_29_20const($10, $0);
    break label$6;
   }
   std____2__moneypunct_wchar_t_2c_20false___pos_format_28_29_20const($10, $0);
   $1 = HEAP32[$10 >> 2];
   HEAP8[$3 | 0] = $1;
   HEAP8[$3 + 1 | 0] = $1 >>> 8;
   HEAP8[$3 + 2 | 0] = $1 >>> 16;
   HEAP8[$3 + 3 | 0] = $1 >>> 24;
   std____2__moneypunct_wchar_t_2c_20false___positive_sign_28_29_20const($10, $0);
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
  wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__moneypunct_wchar_t_2c_20false___decimal_point_28_29_20const($0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__moneypunct_wchar_t_2c_20false___thousands_sep_28_29_20const($0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  std____2__moneypunct_wchar_t_2c_20false___grouping_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  std____2__moneypunct_wchar_t_2c_20false___curr_symbol_28_29_20const($10, $0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($10);
  $0 = std____2__moneypunct_wchar_t_2c_20false___frac_digits_28_29_20const($0);
 }
 HEAP32[$9 >> 2] = $0;
 $0 = $10 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____money_get_char_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $10 = global$0 - 16 | 0;
 $11 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 label$2 : {
  if ($0) {
   $0 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($1);
   std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
   $1 = HEAP32[$10 >> 2];
   HEAP8[$2 | 0] = $1;
   HEAP8[$2 + 1 | 0] = $1 >>> 8;
   HEAP8[$2 + 2 | 0] = $1 >>> 16;
   HEAP8[$2 + 3 | 0] = $1 >>> 24;
   std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__moneypunct_char_2c_20true___positive_sign_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__moneypunct_char_2c_20true___decimal_point_28_29_20const($0), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__moneypunct_char_2c_20true___thousands_sep_28_29_20const($0), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   std____2__moneypunct_char_2c_20true___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__moneypunct_char_2c_20true___curr_symbol_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
   break label$2;
  }
  $0 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($1);
  std____2__moneypunct_char_2c_20false___neg_format_28_29_20const($10, $0);
  $1 = HEAP32[$10 >> 2];
  HEAP8[$2 | 0] = $1;
  HEAP8[$2 + 1 | 0] = $1 >>> 8;
  HEAP8[$2 + 2 | 0] = $1 >>> 16;
  HEAP8[$2 + 3 | 0] = $1 >>> 24;
  std____2__moneypunct_char_2c_20false___negative_sign_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  std____2__moneypunct_char_2c_20false___positive_sign_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__moneypunct_char_2c_20false___decimal_point_28_29_20const($0), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__moneypunct_char_2c_20false___thousands_sep_28_29_20const($0), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  std____2__moneypunct_char_2c_20false___grouping_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  std____2__moneypunct_char_2c_20false___curr_symbol_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  $0 = std____2__moneypunct_char_2c_20false___frac_digits_28_29_20const($0);
 }
 HEAP32[$9 >> 2] = $0;
 $0 = $10 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $0 = global$0 - 192 | 0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 std____2__ios_base__getloc_28_29_20const($0 + 184 | 0, $3);
 $11 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 184 | 0);
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5)) {
  $12 = HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($5, 0) | 0] == (std____2__ctype_char___widen_28char_29_20const($11, 45) & 255);
 }
 $6 = $0 + 184 | 0;
 $7 = $0 + 176 | 0;
 $13 = $0 + 175 | 0;
 $14 = $0 + 174 | 0;
 $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 160 | 0);
 $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 144 | 0);
 $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 128 | 0);
 std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($2, $12, $6, $7, $13, $14, $10, $9, $8, $0 + 124 | 0);
 HEAP32[$0 + 16 >> 2] = 166;
 $7 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
 label$4 : {
  if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) | 0) > HEAP32[$0 + 124 >> 2]) {
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5);
   $6 = HEAP32[$0 + 124 >> 2];
   $6 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($8) + ($2 - $6 << 1) | 0) + 1 | 0;
   break label$4;
  }
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($8) + 2 | 0;
 }
 $2 = $0 + 16 | 0;
 $6 = ($6 + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($9) | 0) + HEAP32[$0 + 124 >> 2] | 0;
 label$6 : {
  if ($6 >>> 0 < 101) {
   break label$6;
  }
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($7, dlmalloc($6));
  $2 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($7);
  if ($2) {
   break label$6;
  }
  std____throw_bad_alloc_28_29();
  abort();
 }
 std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_29($2, $0 + 4 | 0, $0, std____2__ios_base__flags_28_29_20const($3), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($5), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($5) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) | 0, $11, $12, $0 + 176 | 0, HEAP8[$0 + 175 | 0], HEAP8[$0 + 174 | 0], $10, $9, $8, HEAP32[$0 + 124 >> 2]);
 $5 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $2, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3, $4);
 std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($8);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($9);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
 std____2__locale___locale_28_29($0 + 184 | 0);
 $0 = $0 + 192 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function neopt__jhelper__ParseString_28neopt__ITextReader__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $2 = global$0 - 192 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 while (1) {
  label$3 : {
   label$4 : {
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 32) {
     break label$4;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 9) {
     break label$4;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 13) {
     break label$4;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) != 10) {
     break label$3;
    }
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
   continue;
  }
  break;
 }
 $5 = operator_20new_5b_5d_28unsigned_20long_29(4);
 label$5 : {
  label$6 : {
   $6 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
   $3 = ($6 & 255) + -34 | 0;
   if ($3 >>> 0 > 5) {
    break label$6;
   }
   switch ($3 - 1 | 0) {
   case 0:
   case 1:
   case 2:
   case 3:
    break label$6;
   default:
    break label$5;
   }
  }
  HEAP32[$2 + 4 >> 2] = 3380;
  HEAP32[$2 >> 2] = 3368;
  iprintf(3084, $2);
  exit(1);
  abort();
 }
 HEAP32[$2 + 112 >> 2] = 2532;
 HEAP32[$2 + 48 >> 2] = 2512;
 HEAP32[$2 + 56 >> 2] = 2372;
 HEAP32[$2 + 52 >> 2] = 0;
 $8 = $2 + 112 | 0;
 $7 = $2 + 60 | 0;
 std____2__ios_base__init_28void__29($8, $7);
 HEAP32[$2 + 184 >> 2] = 0;
 HEAP32[$2 + 188 >> 2] = -1;
 HEAP32[$2 + 112 >> 2] = 2392;
 HEAP32[$2 + 48 >> 2] = 2352;
 HEAP32[$2 + 56 >> 2] = 2372;
 $10 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($7);
 HEAP32[$2 + 92 >> 2] = 0;
 HEAP32[$2 + 96 >> 2] = 0;
 HEAP32[$2 + 100 >> 2] = 0;
 HEAP32[$2 + 104 >> 2] = 0;
 HEAP32[$2 + 108 >> 2] = 24;
 HEAP32[$2 + 60 >> 2] = 2672;
 label$7 : {
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
  if (($6 | 0) != ($3 | 0)) {
   $11 = $2 + 56 | 0;
   while (1) {
    label$10 : {
     if (($3 & 255) != 92) {
      break label$10;
     }
     $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
     $4 = $3 + -110 | 0;
     if ($4 >>> 0 > 7) {
      break label$10;
     }
     label$11 : {
      switch ($4 - 1 | 0) {
      case 6:
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $5, 0, 4) | 0;
       $3 = strlen($5);
       if ($3 >>> 0 >= 4294967280) {
        break label$7;
       }
       label$14 : {
        label$15 : {
         if ($3 >>> 0 >= 11) {
          $9 = $3 + 16 & -16;
          $4 = operator_20new_28unsigned_20long_29($9);
          HEAP32[$2 + 40 >> 2] = $9 | -2147483648;
          HEAP32[$2 + 32 >> 2] = $4;
          HEAP32[$2 + 36 >> 2] = $3;
          break label$15;
         }
         HEAP8[$2 + 43 | 0] = $3;
         $4 = $2 + 32 | 0;
         if (!$3) {
          break label$14;
         }
        }
        memcpy($4, $5, $3);
       }
       HEAP8[$3 + $4 | 0] = 0;
       $3 = neopt__shelper__ParseHexToShort_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 32 | 0);
       if (HEAP8[$2 + 43 | 0] > -1) {
        break label$10;
       }
       operator_20delete_28void__29(HEAP32[$2 + 32 >> 2]);
       break label$10;
      case 3:
       $3 = 13;
       break label$10;
      case 0:
      case 1:
      case 2:
      case 4:
      case 5:
       break label$10;
      default:
       break label$11;
      }
     }
     $3 = 10;
    }
    HEAP8[$2 + 32 | 0] = $3;
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($11, $2 + 32 | 0, 1);
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
    if (($6 | 0) != ($3 | 0)) {
     continue;
    }
    break;
   }
  }
  operator_20delete_5b_5d_28void__29($5);
  std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($2 + 32 | 0, $7);
  $1 = operator_20new_28unsigned_20long_29(28);
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 16 | 0, $2 + 32 | 0);
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = $1 + 8;
  HEAP32[$1 >> 2] = 4096;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($1 + 16 | 0, $3);
  HEAP32[$0 >> 2] = $1;
  if (HEAP8[$3 + 11 | 0] <= -1) {
   operator_20delete_28void__29(HEAP32[$3 >> 2]);
  }
  if (HEAP8[$2 + 43 | 0] <= -1) {
   operator_20delete_28void__29(HEAP32[$2 + 32 >> 2]);
  }
  HEAP32[$2 + 112 >> 2] = 2392;
  HEAP32[$2 + 48 >> 2] = 2352;
  HEAP32[$2 + 60 >> 2] = 2672;
  HEAP32[$2 + 56 >> 2] = 2372;
  if (HEAP8[$2 + 103 | 0] <= -1) {
   operator_20delete_28void__29(HEAP32[$2 + 92 >> 2]);
  }
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($10);
  std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($2 + 48 | 0, 2404);
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($8);
  $0 = $2 + 192 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($2 + 32 | 0);
 abort();
}
function std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $10 = global$0 - 16 | 0;
 $11 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 label$2 : {
  if ($0) {
   $0 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($2);
   label$4 : {
    if ($1) {
     std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
     $1 = HEAP32[$10 >> 2];
     HEAP8[$3 | 0] = $1;
     HEAP8[$3 + 1 | 0] = $1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1 >>> 24;
     std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
     break label$4;
    }
    std____2__moneypunct_char_2c_20true___pos_format_28_29_20const($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1 >>> 24;
    std____2__moneypunct_char_2c_20true___positive_sign_28_29_20const($10, $0);
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__moneypunct_char_2c_20true___decimal_point_28_29_20const($0), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__moneypunct_char_2c_20true___thousands_sep_28_29_20const($0), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   std____2__moneypunct_char_2c_20true___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__moneypunct_char_2c_20true___curr_symbol_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
   break label$2;
  }
  $0 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($2);
  label$6 : {
   if ($1) {
    std____2__moneypunct_char_2c_20false___neg_format_28_29_20const($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1 >>> 24;
    std____2__moneypunct_char_2c_20false___negative_sign_28_29_20const($10, $0);
    break label$6;
   }
   std____2__moneypunct_char_2c_20false___pos_format_28_29_20const($10, $0);
   $1 = HEAP32[$10 >> 2];
   HEAP8[$3 | 0] = $1;
   HEAP8[$3 + 1 | 0] = $1 >>> 8;
   HEAP8[$3 + 2 | 0] = $1 >>> 16;
   HEAP8[$3 + 3 | 0] = $1 >>> 24;
   std____2__moneypunct_char_2c_20false___positive_sign_28_29_20const($10, $0);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__moneypunct_char_2c_20false___decimal_point_28_29_20const($0), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__moneypunct_char_2c_20false___thousands_sep_28_29_20const($0), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  std____2__moneypunct_char_2c_20false___grouping_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  std____2__moneypunct_char_2c_20false___curr_symbol_28_29_20const($10, $0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  $0 = std____2__moneypunct_char_2c_20false___frac_digits_28_29_20const($0);
 }
 HEAP32[$9 >> 2] = $0;
 $0 = $10 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function neopt__JObject__ToString_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $2 = global$0 - 160 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 80 >> 2] = 2532;
 HEAP32[$2 + 16 >> 2] = 2512;
 HEAP32[$2 + 24 >> 2] = 2372;
 HEAP32[$2 + 20 >> 2] = 0;
 $8 = $2 + 80 | 0;
 $7 = $2 + 28 | 0;
 std____2__ios_base__init_28void__29($8, $7);
 HEAP32[$2 + 152 >> 2] = 0;
 HEAP32[$2 + 156 >> 2] = -1;
 HEAP32[$2 + 80 >> 2] = 2392;
 HEAP32[$2 + 16 >> 2] = 2352;
 HEAP32[$2 + 24 >> 2] = 2372;
 $10 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($7);
 HEAP32[$2 + 60 >> 2] = 0;
 HEAP32[$2 + 64 >> 2] = 0;
 HEAP32[$2 + 68 >> 2] = 0;
 HEAP32[$2 + 72 >> 2] = 0;
 HEAP32[$2 + 76 >> 2] = 24;
 HEAP32[$2 + 28 >> 2] = 2672;
 HEAP8[$2 | 0] = 123;
 $6 = $2 + 24 | 0;
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($6, $2, 1);
 $4 = HEAP32[$1 + 4 >> 2];
 $9 = $1 + 8 | 0;
 if (($4 | 0) != ($9 | 0)) {
  while (1) {
   HEAP8[$2 | 0] = 34;
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($6, $2, 1);
   $5 = $4;
   $3 = HEAPU8[$5 + 27 | 0];
   $4 = $3 << 24 >> 24 < 0;
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($6, $4 ? HEAP32[$5 + 16 >> 2] : $5 + 16 | 0, $4 ? HEAP32[$5 + 20 >> 2] : $3);
   HEAP8[$2 | 0] = 34;
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($6, $2, 1);
   HEAP8[$2 | 0] = 58;
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($6, $2, 1);
   $3 = HEAP32[$5 + 28 >> 2];
   label$4 : {
    if (!$3) {
     std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($6, 4200, 4);
     break label$4;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($2, $3);
    $3 = HEAPU8[$2 + 11 | 0];
    $4 = $3 << 24 >> 24 < 0;
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($6, $4 ? HEAP32[$2 >> 2] : $2, $4 ? HEAP32[$2 + 4 >> 2] : $3);
    if (HEAP8[$2 + 11 | 0] > -1) {
     break label$4;
    }
    operator_20delete_28void__29(HEAP32[$2 >> 2]);
   }
   HEAP8[$2 | 0] = 44;
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($6, $2, 1);
   $3 = HEAP32[$5 + 4 >> 2];
   label$6 : {
    if (!$3) {
     $4 = HEAP32[$5 + 8 >> 2];
     if (HEAP32[$4 >> 2] == ($5 | 0)) {
      break label$6;
     }
     $5 = $5 + 8 | 0;
     while (1) {
      $3 = HEAP32[$5 >> 2];
      $5 = $3 + 8 | 0;
      $4 = HEAP32[$3 + 8 >> 2];
      if (HEAP32[$4 >> 2] != ($3 | 0)) {
       continue;
      }
      break;
     }
     break label$6;
    }
    while (1) {
     $4 = $3;
     $3 = HEAP32[$3 >> 2];
     if ($3) {
      continue;
     }
     break;
    }
   }
   if (($4 | 0) != ($9 | 0)) {
    continue;
   }
   break;
  }
 }
 std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($0, $7);
 label$10 : {
  if (!HEAP32[$1 + 12 >> 2]) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($0, 4205);
   break label$10;
  }
  $3 = HEAPU8[$0 + 11 | 0];
  $1 = $3;
  $3 = $3 << 24 >> 24 < 0;
  HEAP8[(($3 ? HEAP32[$0 + 4 >> 2] : $1) + ($3 ? HEAP32[$0 >> 2] : $0) | 0) + -1 | 0] = 125;
 }
 HEAP32[$2 + 80 >> 2] = 2392;
 HEAP32[$2 + 16 >> 2] = 2352;
 HEAP32[$2 + 28 >> 2] = 2672;
 HEAP32[$2 + 24 >> 2] = 2372;
 if (HEAP8[$2 + 71 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 + 60 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($10);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($2 + 16 | 0, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($8);
 $0 = $2 + 160 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function Neo__Cryptography__ECC__ECPoint__EncodePoint_28bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = global$0 - 32 | 0;
 $6 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 label$2 : {
  $5 = HEAP32[$1 + 4 >> 2];
  $6 = HEAP32[$1 >> 2];
  label$3 : {
   if (!(($5 | 0) != ($6 | 0) | HEAP32[$1 + 16 >> 2] != HEAP32[$1 + 12 >> 2])) {
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $3 = operator_20new_28unsigned_20long_29(1);
    HEAP32[$0 >> 2] = $3;
    $5 = $3 + 1 | 0;
    HEAP32[$0 + 8 >> 2] = $5;
    HEAP8[$3 | 0] = 0;
    HEAP32[$0 + 4 >> 2] = $5;
    break label$3;
   }
   HEAP32[$4 + 24 >> 2] = 0;
   HEAP32[$4 + 16 >> 2] = 0;
   HEAP32[$4 + 20 >> 2] = 0;
   label$5 : {
    if ($2) {
     $3 = operator_20new_28unsigned_20long_29(33);
     HEAP8[$3 | 0] = 0;
     HEAP8[$3 + 1 | 0] = 0;
     HEAP8[$3 + 2 | 0] = 0;
     HEAP8[$3 + 3 | 0] = 0;
     HEAP8[$3 + 4 | 0] = 0;
     HEAP8[$3 + 5 | 0] = 0;
     HEAP8[$3 + 6 | 0] = 0;
     HEAP8[$3 + 7 | 0] = 0;
     HEAP8[$3 + 32 | 0] = 0;
     HEAP8[$3 + 24 | 0] = 0;
     HEAP8[$3 + 25 | 0] = 0;
     HEAP8[$3 + 26 | 0] = 0;
     HEAP8[$3 + 27 | 0] = 0;
     HEAP8[$3 + 28 | 0] = 0;
     HEAP8[$3 + 29 | 0] = 0;
     HEAP8[$3 + 30 | 0] = 0;
     HEAP8[$3 + 31 | 0] = 0;
     HEAP8[$3 + 16 | 0] = 0;
     HEAP8[$3 + 17 | 0] = 0;
     HEAP8[$3 + 18 | 0] = 0;
     HEAP8[$3 + 19 | 0] = 0;
     HEAP8[$3 + 20 | 0] = 0;
     HEAP8[$3 + 21 | 0] = 0;
     HEAP8[$3 + 22 | 0] = 0;
     HEAP8[$3 + 23 | 0] = 0;
     HEAP8[$3 + 8 | 0] = 0;
     HEAP8[$3 + 9 | 0] = 0;
     HEAP8[$3 + 10 | 0] = 0;
     HEAP8[$3 + 11 | 0] = 0;
     HEAP8[$3 + 12 | 0] = 0;
     HEAP8[$3 + 13 | 0] = 0;
     HEAP8[$3 + 14 | 0] = 0;
     HEAP8[$3 + 15 | 0] = 0;
     $7 = $3 + 33 | 0;
     HEAP32[$4 + 24 >> 2] = $7;
     HEAP32[$4 + 20 >> 2] = $7;
     HEAP32[$4 + 16 >> 2] = $3;
     break label$5;
    }
    $3 = memset(operator_20new_28unsigned_20long_29(65), 0, 65);
    $5 = HEAP32[$1 + 16 >> 2];
    $6 = HEAP32[$1 + 12 >> 2];
    $7 = $3 + 65 | 0;
    HEAP32[$4 + 24 >> 2] = $7;
    HEAP32[$4 + 20 >> 2] = $7;
    HEAP32[$4 + 16 >> 2] = $3;
    HEAP32[$4 + 8 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $5 = $5 - $6 | 0;
    label$7 : {
     if (!$5) {
      $3 = 0;
      break label$7;
     }
     if (($5 | 0) <= -1) {
      break label$2;
     }
     $8 = operator_20new_28unsigned_20long_29($5);
     HEAP32[$4 >> 2] = $8;
     $3 = $5 + $8 | 0;
     HEAP32[$4 + 8 >> 2] = $3;
     $7 = memcpy($8, $6, $5);
     HEAP32[$4 + 4 >> 2] = $3;
     if (HEAPU8[$7 | 0]) {
      break label$7;
     }
     $5 = $7 + 1 | 0;
     while (1) {
      $3 = $3 - $5 | 0;
      if (!$3) {
       HEAP32[$4 + 4 >> 2] = $3 + $7;
       $3 = $7;
       break label$7;
      }
      $6 = memmove($7, $5, $3);
      $3 = $6 + $3 | 0;
      HEAP32[$4 + 4 >> 2] = $3;
      if (!HEAPU8[$6 | 0]) {
       continue;
      }
      break;
     }
    }
    $3 = $3 - $8 | 0;
    neopt__Buffer__BlockCopy_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__2c_20int_2c_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_2c_20int_29($4, 0, $4 + 16 | 0, 65 - $3 | 0, $3);
    $3 = HEAP32[$4 >> 2];
    if ($3) {
     HEAP32[$4 + 4 >> 2] = $3;
     operator_20delete_28void__29($3);
    }
    $6 = HEAP32[$1 >> 2];
    $5 = HEAP32[$1 + 4 >> 2];
   }
   $8 = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $3 = $5 - $6 | 0;
   label$12 : {
    if (!$3) {
     $6 = 0;
     break label$12;
    }
    if (($3 | 0) <= -1) {
     break label$2;
    }
    $8 = operator_20new_28unsigned_20long_29($3);
    HEAP32[$4 >> 2] = $8;
    HEAP32[$4 + 4 >> 2] = $8;
    $5 = $3 + $8 | 0;
    HEAP32[$4 + 8 >> 2] = $5;
    $3 = memcpy($8, $6, $3);
    HEAP32[$4 + 4 >> 2] = $5;
    $6 = $3;
    while (1) {
     if (HEAPU8[$3 | 0]) {
      $6 = $5;
      break label$12;
     }
     $7 = $3 + 1 | 0;
     $5 = $5 - $7 | 0;
     if ($5) {
      memmove($3, $7, $5);
      $8 = HEAP32[$4 >> 2];
      $6 = $8;
     }
     $5 = $3 + $5 | 0;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $6;
     if (($5 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = $6 - $8 | 0;
   neopt__Buffer__BlockCopy_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__2c_20int_2c_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_2c_20int_29($4, 0, $4 + 16 | 0, 33 - $3 | 0, $3);
   $3 = 4;
   if ($2) {
    $3 = csbigintegerlib__BigInteger__IsEven_28_29_20const($1 + 12 | 0) ? 2 : 3;
   }
   HEAP8[HEAP32[$4 + 16 >> 2]] = $3;
   HEAP32[$0 >> 2] = HEAP32[$4 + 16 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$4 + 20 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 24 >> 2] = 0;
   HEAP32[$4 + 16 >> 2] = 0;
   HEAP32[$4 + 20 >> 2] = 0;
   $3 = HEAP32[$4 >> 2];
   if (!$3) {
    break label$3;
   }
   HEAP32[$4 + 4 >> 2] = $3;
   operator_20delete_28void__29($3);
   $3 = HEAP32[$4 + 16 >> 2];
   if (!$3) {
    break label$3;
   }
   HEAP32[$4 + 20 >> 2] = $3;
   operator_20delete_28void__29($3);
  }
  $0 = $4 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($4);
 abort();
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 384 | 0;
 $0 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 HEAP32[$6 + 368 >> 2] = $2;
 HEAP32[$6 + 376 >> 2] = $1;
 std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($6 + 216 | 0, $3, $6 + 240 | 0, $6 + 236 | 0, $6 + 232 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 200 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 196 >> 2] = $1;
 HEAP32[$6 + 28 >> 2] = $6 + 32;
 HEAP32[$6 + 24 >> 2] = 0;
 HEAP8[$6 + 23 | 0] = 1;
 HEAP8[$6 + 22 | 0] = 69;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 376 | 0, $6 + 368 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 196 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 196 >> 2] = $2 + $1;
   }
   if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 376 | 0), $6 + 23 | 0, $6 + 22 | 0, $1, $6 + 196 | 0, HEAP32[$6 + 236 >> 2], HEAP32[$6 + 232 >> 2], $6 + 216 | 0, $6 + 32 | 0, $6 + 28 | 0, $6 + 24 | 0, $6 + 240 | 0)) {
    break label$3;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 376 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 216 | 0) | !HEAPU8[$6 + 23 | 0]) {
   break label$5;
  }
  $2 = HEAP32[$6 + 28 >> 2];
  if (($2 - ($6 + 32 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 28 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 24 >> 2];
 }
 long_20double_20std____2____num_get_float_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($6, $1, HEAP32[$6 + 196 >> 2], $4);
 $0 = HEAP32[$6 + 4 >> 2];
 $1 = HEAP32[$6 >> 2];
 HEAP32[$5 >> 2] = $1;
 HEAP32[$5 + 4 >> 2] = $0;
 $1 = HEAP32[$6 + 12 >> 2];
 $0 = HEAP32[$6 + 8 >> 2];
 HEAP32[$5 + 8 >> 2] = $0;
 HEAP32[$5 + 12 >> 2] = $1;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 216 | 0, $6 + 32 | 0, HEAP32[$6 + 28 >> 2], $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 376 | 0, $6 + 368 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $1 = HEAP32[$6 + 376 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 216 | 0);
 $0 = $6 + 384 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 352 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 336 >> 2] = $2;
 HEAP32[$6 + 344 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP32[$6 + 332 >> 2], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20long_20long_20std____2____num_get_unsigned_integral_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 HEAP32[$5 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 352 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 352 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 336 >> 2] = $2;
 HEAP32[$6 + 344 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP32[$6 + 332 >> 2], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = long_20long_20std____2____num_get_signed_integral_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 HEAP32[$5 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 352 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 352 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 336 >> 2] = $2;
 HEAP32[$6 + 344 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP32[$6 + 332 >> 2], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20short_20std____2____num_get_unsigned_integral_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 352 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 352 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 336 >> 2] = $2;
 HEAP32[$6 + 344 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP32[$6 + 332 >> 2], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20long_20std____2____num_get_unsigned_integral_unsigned_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 352 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 352 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 336 >> 2] = $2;
 HEAP32[$6 + 344 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP32[$6 + 332 >> 2], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 352 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = global$0 - 288 | 0;
 $0 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 HEAP32[$6 + 272 >> 2] = $2;
 HEAP32[$6 + 280 >> 2] = $1;
 std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($6 + 224 | 0, $3, $6 + 240 | 0, $6 + 239 | 0, $6 + 238 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 208 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 204 >> 2] = $1;
 HEAP32[$6 + 28 >> 2] = $6 + 32;
 HEAP32[$6 + 24 >> 2] = 0;
 HEAP8[$6 + 23 | 0] = 1;
 HEAP8[$6 + 22 | 0] = 69;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 280 | 0, $6 + 272 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 204 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 204 >> 2] = $2 + $1;
   }
   if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 280 | 0), $6 + 23 | 0, $6 + 22 | 0, $1, $6 + 204 | 0, HEAP8[$6 + 239 | 0], HEAP8[$6 + 238 | 0], $6 + 224 | 0, $6 + 32 | 0, $6 + 28 | 0, $6 + 24 | 0, $6 + 240 | 0)) {
    break label$3;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 280 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 224 | 0) | !HEAPU8[$6 + 23 | 0]) {
   break label$5;
  }
  $2 = HEAP32[$6 + 28 >> 2];
  if (($2 - ($6 + 32 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 28 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 24 >> 2];
 }
 long_20double_20std____2____num_get_float_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($6, $1, HEAP32[$6 + 204 >> 2], $4);
 $0 = HEAP32[$6 + 4 >> 2];
 $1 = HEAP32[$6 >> 2];
 HEAP32[$5 >> 2] = $1;
 HEAP32[$5 + 4 >> 2] = $0;
 $1 = HEAP32[$6 + 12 >> 2];
 $0 = HEAP32[$6 + 8 >> 2];
 HEAP32[$5 + 8 >> 2] = $0;
 HEAP32[$5 + 12 >> 2] = $1;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 224 | 0, $6 + 32 | 0, HEAP32[$6 + 28 >> 2], $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 280 | 0, $6 + 272 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $1 = HEAP32[$6 + 280 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 224 | 0);
 $0 = $6 + 288 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 272 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 256 >> 2] = $2;
 HEAP32[$6 + 264 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP8[$6 + 255 | 0], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20long_20long_20std____2____num_get_unsigned_integral_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 HEAP32[$5 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 272 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $0 = global$0 - 368 | 0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$0 + 352 >> 2] = $2;
 HEAP32[$0 + 360 >> 2] = $1;
 std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0 + 200 | 0, $3, $0 + 224 | 0, $0 + 220 | 0, $0 + 216 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 184 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$0 + 180 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $0 + 16;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 69;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0 + 360 | 0, $0 + 352 | 0)) {
    break label$3;
   }
   if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$0 + 180 >> 2] = $2 + $1;
   }
   if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0 + 360 | 0), $0 + 7 | 0, $0 + 6 | 0, $1, $0 + 180 | 0, HEAP32[$0 + 220 >> 2], HEAP32[$0 + 216 >> 2], $0 + 200 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0)) {
    break label$3;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0 + 360 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 200 | 0) | !HEAPU8[$0 + 7 | 0]) {
   break label$5;
  }
  $2 = HEAP32[$0 + 12 >> 2];
  if (($2 - ($0 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$0 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_f32$0 = float_20std____2____num_get_float_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, HEAP32[$0 + 180 >> 2], $4), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 200 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 360 | 0, $0 + 352 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $1 = HEAP32[$0 + 360 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 200 | 0);
 $0 = $0 + 368 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 352 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 336 >> 2] = $2;
 HEAP32[$6 + 344 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($6 + 208 | 0, $3, $6 + 332 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($6 + 344 | 0, $6 + 336 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($6 + 344 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP32[$6 + 332 >> 2], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($6 + 344 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = long_20std____2____num_get_signed_integral_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($6 + 344 | 0, $6 + 336 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 352 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
 $0 = global$0 - 368 | 0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$0 + 352 >> 2] = $2;
 HEAP32[$0 + 360 >> 2] = $1;
 std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0 + 200 | 0, $3, $0 + 224 | 0, $0 + 220 | 0, $0 + 216 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 184 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$0 + 180 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $0 + 16;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 69;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0 + 360 | 0, $0 + 352 | 0)) {
    break label$3;
   }
   if (HEAP32[$0 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$0 + 180 >> 2] = $2 + $1;
   }
   if (std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0 + 360 | 0), $0 + 7 | 0, $0 + 6 | 0, $1, $0 + 180 | 0, HEAP32[$0 + 220 >> 2], HEAP32[$0 + 216 >> 2], $0 + 200 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0)) {
    break label$3;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0 + 360 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 200 | 0) | !HEAPU8[$0 + 7 | 0]) {
   break label$5;
  }
  $2 = HEAP32[$0 + 12 >> 2];
  if (($2 - ($0 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$0 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_f64$0 = double_20std____2____num_get_float_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, HEAP32[$0 + 180 >> 2], $4), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 200 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 360 | 0, $0 + 352 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $1 = HEAP32[$0 + 360 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 200 | 0);
 $0 = $0 + 368 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 272 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 256 >> 2] = $2;
 HEAP32[$6 + 264 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP8[$6 + 255 | 0], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = long_20long_20std____2____num_get_signed_integral_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 HEAP32[$5 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 272 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 272 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 256 >> 2] = $2;
 HEAP32[$6 + 264 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP8[$6 + 255 | 0], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20short_20std____2____num_get_unsigned_integral_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 272 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 272 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 256 >> 2] = $2;
 HEAP32[$6 + 264 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP8[$6 + 255 | 0], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20long_20std____2____num_get_unsigned_integral_unsigned_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 272 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 272 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 256 >> 2] = $2;
 HEAP32[$6 + 264 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP8[$6 + 255 | 0], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 272 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 $0 = global$0 - 272 | 0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$0 + 256 >> 2] = $2;
 HEAP32[$0 + 264 >> 2] = $1;
 std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0 + 208 | 0, $3, $0 + 224 | 0, $0 + 223 | 0, $0 + 222 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$0 + 188 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $0 + 16;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 69;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0 + 264 | 0, $0 + 256 | 0)) {
    break label$3;
   }
   if (HEAP32[$0 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$0 + 188 >> 2] = $2 + $1;
   }
   if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0 + 264 | 0), $0 + 7 | 0, $0 + 6 | 0, $1, $0 + 188 | 0, HEAP8[$0 + 223 | 0], HEAP8[$0 + 222 | 0], $0 + 208 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0)) {
    break label$3;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0 + 264 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 208 | 0) | !HEAPU8[$0 + 7 | 0]) {
   break label$5;
  }
  $2 = HEAP32[$0 + 12 >> 2];
  if (($2 - ($0 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$0 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_f32$0 = float_20std____2____num_get_float_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, HEAP32[$0 + 188 >> 2], $4), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 208 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 264 | 0, $0 + 256 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $1 = HEAP32[$0 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 208 | 0);
 $0 = $0 + 272 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 272 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 256 >> 2] = $2;
 HEAP32[$6 + 264 >> 2] = $1;
 $1 = std____2____num_get_base____get_base_28std____2__ios_base__29($3);
 $2 = std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $3, $6 + 224 | 0);
 std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($6 + 208 | 0, $3, $6 + 255 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($6 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$6 + 188 >> 2] = $0;
 HEAP32[$6 + 12 >> 2] = $6 + 16;
 HEAP32[$6 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($6 + 264 | 0, $6 + 256 | 0)) {
    break label$3;
   }
   if (HEAP32[$6 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $0 | 0)) {
    $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$6 + 188 >> 2] = $7 + $0;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($6 + 264 | 0), $1, $0, $6 + 188 | 0, $6 + 8 | 0, HEAP8[$6 + 255 | 0], $6 + 208 | 0, $6 + 16 | 0, $6 + 12 | 0, $2)) {
    break label$3;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($6 + 264 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6 + 208 | 0)) {
   break label$5;
  }
  $2 = HEAP32[$6 + 12 >> 2];
  if (($2 - ($6 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$6 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$6 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_i32$1 = long_20std____2____num_get_signed_integral_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, HEAP32[$6 + 188 >> 2], $4, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($6 + 208 | 0, $6 + 16 | 0, HEAP32[$6 + 12 >> 2], $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($6 + 264 | 0, $6 + 256 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $0 = HEAP32[$6 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 208 | 0);
 $1 = $6 + 272 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
 $0 = global$0 - 272 | 0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$0 + 256 >> 2] = $2;
 HEAP32[$0 + 264 >> 2] = $1;
 std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0 + 208 | 0, $3, $0 + 224 | 0, $0 + 223 | 0, $0 + 222 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$0 + 188 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $0 + 16;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$0 + 7 | 0] = 1;
 HEAP8[$0 + 6 | 0] = 69;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0 + 264 | 0, $0 + 256 | 0)) {
    break label$3;
   }
   if (HEAP32[$0 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$0 + 188 >> 2] = $2 + $1;
   }
   if (std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0 + 264 | 0), $0 + 7 | 0, $0 + 6 | 0, $1, $0 + 188 | 0, HEAP8[$0 + 223 | 0], HEAP8[$0 + 222 | 0], $0 + 208 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 8 | 0, $0 + 224 | 0)) {
    break label$3;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0 + 264 | 0);
   continue;
  }
  break;
 }
 label$5 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 208 | 0) | !HEAPU8[$0 + 7 | 0]) {
   break label$5;
  }
  $2 = HEAP32[$0 + 12 >> 2];
  if (($2 - ($0 + 16 | 0) | 0) > 159) {
   break label$5;
  }
  HEAP32[$0 + 12 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 wasm2js_i32$0 = $5, wasm2js_f64$0 = double_20std____2____num_get_float_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($1, HEAP32[$0 + 188 >> 2], $4), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
 std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0 + 208 | 0, $0 + 16 | 0, HEAP32[$0 + 12 >> 2], $4);
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 264 | 0, $0 + 256 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $1 = HEAP32[$0 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 208 | 0);
 $0 = $0 + 272 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = global$0 - 624 | 0;
 $7 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$0 + 608 >> 2] = $2;
 HEAP32[$0 + 616 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = 167;
 $1 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 200 | 0, $0 + 208 | 0, $0 + 16 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 192 | 0, $4);
 $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 192 | 0);
 HEAP8[$0 + 191 | 0] = 0;
 label$2 : {
  if (!std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0 + 616 | 0, $2, $3, $0 + 192 | 0, std____2__ios_base__flags_28_29_20const($4), $5, $0 + 191 | 0, $7, $1, $0 + 196 | 0, $0 + 608 | 0)) {
   break label$2;
  }
  $2 = HEAPU8[14107] | HEAPU8[14108] << 8 | (HEAPU8[14109] << 16 | HEAPU8[14110] << 24);
  HEAP8[$0 + 183 | 0] = $2;
  HEAP8[$0 + 184 | 0] = $2 >>> 8;
  HEAP8[$0 + 185 | 0] = $2 >>> 16;
  HEAP8[$0 + 186 | 0] = $2 >>> 24;
  $2 = HEAPU8[14104] | HEAPU8[14105] << 8 | (HEAPU8[14106] << 16 | HEAPU8[14107] << 24);
  HEAP32[$0 + 176 >> 2] = HEAPU8[14100] | HEAPU8[14101] << 8 | (HEAPU8[14102] << 16 | HEAPU8[14103] << 24);
  HEAP32[$0 + 180 >> 2] = $2;
  std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($7, $0 + 176 | 0, $0 + 186 | 0, $0 + 128 | 0);
  HEAP32[$0 + 16 >> 2] = 166;
  $7 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
  $2 = $0 + 16 | 0;
  label$3 : {
   if ((HEAP32[$0 + 196 >> 2] - std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($1) | 0) >= 393) {
    std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($7, dlmalloc((HEAP32[$0 + 196 >> 2] - std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($1) >> 2) + 2 | 0));
    if (!std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($7)) {
     break label$3;
    }
    $2 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($7);
   }
   if (HEAPU8[$0 + 191 | 0]) {
    HEAP8[$2 | 0] = 45;
    $2 = $2 + 1 | 0;
   }
   $4 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($1);
   while (1) {
    label$7 : {
     if ($4 >>> 0 >= HEAPU32[$0 + 196 >> 2]) {
      HEAP8[$2 | 0] = 0;
      HEAP32[$0 >> 2] = $6;
      if ((sscanf($0 + 16 | 0, 14096, $0) | 0) != 1) {
       break label$7;
      }
      std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
      break label$2;
     }
     wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAPU8[($0 + 176 | 0) + (wchar_t__20std____2__find_wchar_t__2c_20wchar_t__28wchar_t__2c_20wchar_t__2c_20wchar_t_20const__29($0 + 128 | 0, wchar_t__20std____2__end_wchar_t_2c_2010ul__28wchar_t_20_28__29_20_5b10ul_5d_29($0 + 128 | 0), $4) - ($0 + 128 | 0) >> 2) | 0], HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
     $2 = $2 + 1 | 0;
     $4 = $4 + 4 | 0;
     continue;
    }
    break;
   }
   std____2____throw_runtime_error_28char_20const__29($0);
   abort();
  }
  std____throw_bad_alloc_28_29();
  abort();
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 616 | 0, $0 + 608 | 0)) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 }
 $4 = HEAP32[$0 + 616 >> 2];
 std____2__locale___locale_28_29($0 + 192 | 0);
 std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
 $0 = $0 + 624 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $0 = global$0 - 352 | 0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$0 + 336 >> 2] = $2;
 HEAP32[$0 + 344 >> 2] = $1;
 $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 208 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $3);
 std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const(std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 16 | 0), 13840, 13866, $0 + 224 | 0);
 std____2__locale___locale_28_29($0 + 16 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$0 + 188 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $0 + 16;
 HEAP32[$0 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0 + 344 | 0, $0 + 336 | 0)) {
    break label$3;
   }
   if (HEAP32[$0 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$0 + 188 >> 2] = $6 + $1;
   }
   if (std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0 + 344 | 0), 16, $1, $0 + 188 | 0, $0 + 8 | 0, 0, $2, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0)) {
    break label$3;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0 + 344 | 0);
   continue;
  }
  break;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, HEAP32[$0 + 188 >> 2] - $1 | 0);
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($3);
 $6 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $5;
 if ((std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($1, $6, 13873, $0) | 0) != 1) {
  HEAP32[$4 >> 2] = 4;
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 344 | 0, $0 + 336 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $1 = HEAP32[$0 + 344 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
 $0 = $0 + 352 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$11 : {
           $9 = $1;
           $7 = $9;
           if ($7) {
            $5 = $2;
            if (!$5) {
             break label$11;
            }
            $4 = $3;
            if (!$4) {
             break label$9;
            }
            $7 = Math_clz32($4) - Math_clz32($7) | 0;
            if ($7 >>> 0 <= 31) {
             break label$8;
            }
            break label$2;
           }
           $6 = $3;
           $10 = $2;
           if (($6 | 0) == 1 & $10 >>> 0 >= 0 | $6 >>> 0 > 1) {
            break label$2;
           }
           $7 = $0;
           $5 = $2;
           $7 = ($7 >>> 0) / ($5 >>> 0) | 0;
           legalfunc$wasm2js_scratch_store_i64($0 - Math_imul($7, $5) | 0, 0);
           i64toi32_i32$HIGH_BITS = 0;
           $6 = $7;
           return $6;
          }
          $6 = $3;
          $5 = $6;
          if (!$0) {
           break label$7;
          }
          if (!$5) {
           break label$6;
          }
          $4 = $5 + -1 | 0;
          if ($4 & $5) {
           break label$6;
          }
          $6 = $7 & $4;
          $1 = $6;
          $10 = $0;
          $9 = $10;
          $4 = 0;
          $6 = 0;
          $10 = $6;
          $6 = $1;
          $10 = $10 | $6;
          legalfunc$wasm2js_scratch_store_i64($9 | $4, $10);
          $4 = $7 >>> (__wasm_ctz_i32($5) & 31) | 0;
          i64toi32_i32$HIGH_BITS = 0;
          return $4;
         }
         $4 = $5 + -1 | 0;
         if (!($4 & $5)) {
          break label$5;
         }
         $7 = (Math_clz32($5) + 33 | 0) - Math_clz32($7) | 0;
         $5 = 0 - $7 | 0;
         break label$3;
        }
        $5 = 63 - $7 | 0;
        $7 = $7 + 1 | 0;
        break label$3;
       }
       $4 = ($7 >>> 0) / ($5 >>> 0) | 0;
       $6 = $7 - Math_imul($4, $5) | 0;
       legalfunc$wasm2js_scratch_store_i64(0, $6);
       i64toi32_i32$HIGH_BITS = 0;
       $6 = $4;
       return $6;
      }
      $7 = Math_clz32($5) - Math_clz32($7) | 0;
      if ($7 >>> 0 < 31) {
       break label$4;
      }
      break label$2;
     }
     legalfunc$wasm2js_scratch_store_i64($0 & $4, 0);
     if (($5 | 0) == 1) {
      break label$1;
     }
     $6 = $1;
     $9 = __wasm_ctz_i32($5);
     $4 = $0;
     $10 = 0;
     $8 = $9 & 31;
     if (32 <= ($9 & 63) >>> 0) {
      $4 = $6 >>> $8 | 0;
     } else {
      $10 = $6 >>> $8 | 0;
      $4 = ((1 << $8) - 1 & $6) << 32 - $8 | $4 >>> $8;
     }
     i64toi32_i32$HIGH_BITS = $10;
     return $4;
    }
    $5 = 63 - $7 | 0;
    $7 = $7 + 1 | 0;
   }
   $4 = $1;
   $6 = $0;
   $10 = 0;
   $9 = $7 & 63;
   $8 = $9 & 31;
   if (32 <= ($9 & 63) >>> 0) {
    $11 = $4 >>> $8 | 0;
   } else {
    $10 = $4 >>> $8 | 0;
    $11 = ((1 << $8) - 1 & $4) << 32 - $8 | $6 >>> $8;
   }
   $12 = $10;
   $10 = $1;
   $4 = $0;
   $9 = $5 & 63;
   $8 = $9 & 31;
   if (32 <= ($9 & 63) >>> 0) {
    $6 = $4 << $8;
    $0 = 0;
   } else {
    $6 = (1 << $8) - 1 & $4 >>> 32 - $8 | $10 << $8;
    $0 = $4 << $8;
   }
   $1 = $6;
   if ($7) {
    $6 = $3;
    $5 = $6 + -1 | 0;
    $10 = $2;
    $8 = $10 + -1 | 0;
    if ($8 >>> 0 < 4294967295) {
     $5 = $5 + 1 | 0;
    }
    $15 = $8;
    $16 = $5;
    while (1) {
     $6 = $11;
     $4 = $6 << 1;
     $5 = $12;
     $10 = $5 << 1 | $6 >>> 31;
     $6 = 0;
     $5 = $6;
     $6 = $10;
     $5 = $6 | $5;
     $12 = $5;
     $10 = $1;
     $9 = $10 >>> 31 | 0;
     $10 = $4;
     $11 = $9 | $10;
     $6 = $15;
     $9 = $11;
     $4 = $6 - $9 | 0;
     $5 = $16;
     $10 = $12;
     $8 = $10 + ($6 >>> 0 < $9 >>> 0) | 0;
     $8 = $5 - $8 | 0;
     $13 = $8 >> 31;
     $6 = $8 >> 31;
     $14 = $6;
     $5 = $3;
     $5 = $6 & $5;
     $4 = $5;
     $6 = $9;
     $9 = $2;
     $8 = $13;
     $9 = $9 & $8;
     $10 = $6 - $9 | 0;
     $11 = $10;
     $5 = $12;
     $8 = $4;
     $4 = $8 + ($6 >>> 0 < $9 >>> 0) | 0;
     $4 = $5 - $4 | 0;
     $12 = $4;
     $4 = $1;
     $5 = $0;
     $6 = $4 << 1 | $5 >>> 31;
     $9 = $17;
     $4 = $5 << 1;
     $0 = $9 | $4;
     $5 = $18;
     $5 = $5 | $6;
     $1 = $5;
     $6 = $13;
     $13 = $6 & 1;
     $4 = 0;
     $14 = $4;
     $17 = $13;
     $7 = $7 + -1 | 0;
     if ($7) {
      continue;
     }
     break;
    }
   }
   $4 = $12;
   legalfunc$wasm2js_scratch_store_i64($11, $4);
   $5 = $0;
   $0 = $5 << 1;
   $4 = $1;
   $6 = $4 << 1 | $5 >>> 31;
   $5 = $14;
   $5 = $6 | $5;
   i64toi32_i32$HIGH_BITS = $5;
   $9 = $13;
   $4 = $0;
   $4 = $9 | $4;
   return $4;
  }
  $4 = $1;
  legalfunc$wasm2js_scratch_store_i64($0, $4);
  $0 = 0;
  $1 = 0;
 }
 $4 = $1;
 i64toi32_i32$HIGH_BITS = $4;
 $5 = $0;
 return $5;
}
function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = global$0 - 288 | 0;
 $7 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$0 + 272 >> 2] = $2;
 HEAP32[$0 + 280 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = 167;
 $1 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 152 | 0, $0 + 160 | 0, $0 + 16 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 144 | 0, $4);
 $7 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 144 | 0);
 HEAP8[$0 + 143 | 0] = 0;
 label$2 : {
  if (!std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0 + 280 | 0, $2, $3, $0 + 144 | 0, std____2__ios_base__flags_28_29_20const($4), $5, $0 + 143 | 0, $7, $1, $0 + 148 | 0, $0 + 260 | 0)) {
   break label$2;
  }
  $2 = HEAPU8[14107] | HEAPU8[14108] << 8 | (HEAPU8[14109] << 16 | HEAPU8[14110] << 24);
  HEAP8[$0 + 135 | 0] = $2;
  HEAP8[$0 + 136 | 0] = $2 >>> 8;
  HEAP8[$0 + 137 | 0] = $2 >>> 16;
  HEAP8[$0 + 138 | 0] = $2 >>> 24;
  $2 = HEAPU8[14104] | HEAPU8[14105] << 8 | (HEAPU8[14106] << 16 | HEAPU8[14107] << 24);
  HEAP32[$0 + 128 >> 2] = HEAPU8[14100] | HEAPU8[14101] << 8 | (HEAPU8[14102] << 16 | HEAPU8[14103] << 24);
  HEAP32[$0 + 132 >> 2] = $2;
  std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($7, $0 + 128 | 0, $0 + 138 | 0, $0 + 118 | 0);
  HEAP32[$0 + 16 >> 2] = 166;
  $7 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 16 | 0);
  $2 = $0 + 16 | 0;
  label$3 : {
   if ((HEAP32[$0 + 148 >> 2] - std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($1) | 0) >= 99) {
    std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($7, dlmalloc((HEAP32[$0 + 148 >> 2] - std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($1) | 0) + 2 | 0));
    if (!std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($7)) {
     break label$3;
    }
    $2 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($7);
   }
   if (HEAPU8[$0 + 143 | 0]) {
    HEAP8[$2 | 0] = 45;
    $2 = $2 + 1 | 0;
   }
   $4 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($1);
   while (1) {
    label$7 : {
     if ($4 >>> 0 >= HEAPU32[$0 + 148 >> 2]) {
      HEAP8[$2 | 0] = 0;
      HEAP32[$0 >> 2] = $6;
      if ((sscanf($0 + 16 | 0, 14096, $0) | 0) != 1) {
       break label$7;
      }
      std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
      break label$2;
     }
     wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAPU8[((char__20std____2__find_char__2c_20char__28char__2c_20char__2c_20char_20const__29($0 + 118 | 0, char__20std____2__end_char_2c_2010ul__28char_20_28__29_20_5b10ul_5d_29($0 + 118 | 0), $4) - $0 | 0) + $0 | 0) + 10 | 0], HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
     $2 = $2 + 1 | 0;
     $4 = $4 + 1 | 0;
     continue;
    }
    break;
   }
   std____2____throw_runtime_error_28char_20const__29($0);
   abort();
  }
  std____throw_bad_alloc_28_29();
  abort();
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 280 | 0, $0 + 272 | 0)) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 }
 $4 = HEAP32[$0 + 280 >> 2];
 std____2__locale___locale_28_29($0 + 144 | 0);
 std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
 $0 = $0 + 288 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $0 = global$0 - 272 | 0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$0 + 256 >> 2] = $2;
 HEAP32[$0 + 264 >> 2] = $1;
 $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 208 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $3);
 std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const(std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 16 | 0), 13840, 13866, $0 + 224 | 0);
 std____2__locale___locale_28_29($0 + 16 | 0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
 HEAP32[$0 + 188 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $0 + 16;
 HEAP32[$0 + 8 >> 2] = 0;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0 + 264 | 0, $0 + 256 | 0)) {
    break label$3;
   }
   if (HEAP32[$0 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) + $1 | 0)) {
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3) << 1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($3));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($3, 0);
    HEAP32[$0 + 188 >> 2] = $6 + $1;
   }
   if (std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0 + 264 | 0), 16, $1, $0 + 188 | 0, $0 + 8 | 0, 0, $2, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0)) {
    break label$3;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0 + 264 | 0);
   continue;
  }
  break;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($3, HEAP32[$0 + 188 >> 2] - $1 | 0);
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($3);
 $6 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $5;
 if ((std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($1, $6, 13873, $0) | 0) != 1) {
  HEAP32[$4 >> 2] = 4;
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 264 | 0, $0 + 256 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $1 = HEAP32[$0 + 264 >> 2];
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
 $0 = $0 + 272 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $0 = global$0 - 432 | 0;
 $10 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $10;
 HEAP32[$0 + 424 >> 2] = 37;
 HEAP32[$0 + 428 >> 2] = 0;
 $9 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0 + 424 | 1, 13882, std____2__ios_base__flags_28_29_20const($2));
 HEAP32[$0 + 380 >> 2] = $0 + 384;
 $8 = std____2____cloc_28_29();
 label$2 : {
  if ($9) {
   $11 = std____2__ios_base__precision_28_29_20const($2);
   HEAP32[$0 + 72 >> 2] = $6;
   HEAP32[$0 + 76 >> 2] = $7;
   $10 = $0 - -64 | 0;
   HEAP32[$10 >> 2] = $4;
   HEAP32[$10 + 4 >> 2] = $5;
   HEAP32[$0 + 48 >> 2] = $11;
   $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 384 | 0, 30, $8, $0 + 424 | 0, $0 + 48 | 0);
   break label$2;
  }
  HEAP32[$0 + 80 >> 2] = $4;
  HEAP32[$0 + 84 >> 2] = $5;
  HEAP32[$0 + 88 >> 2] = $6;
  HEAP32[$0 + 92 >> 2] = $7;
  $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 384 | 0, 30, $8, $0 + 424 | 0, $0 + 80 | 0);
 }
 HEAP32[$0 + 128 >> 2] = 166;
 $11 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 368 | 0, 0, $0 + 128 | 0);
 label$4 : {
  if (($8 | 0) >= 30) {
   $8 = std____2____cloc_28_29();
   label$6 : {
    if ($9) {
     $9 = std____2__ios_base__precision_28_29_20const($2);
     HEAP32[$0 + 24 >> 2] = $6;
     HEAP32[$0 + 28 >> 2] = $7;
     HEAP32[$0 + 16 >> 2] = $4;
     HEAP32[$0 + 20 >> 2] = $5;
     HEAP32[$0 >> 2] = $9;
     $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 380 | 0, $8, $0 + 424 | 0, $0);
     break label$6;
    }
    HEAP32[$0 + 32 >> 2] = $4;
    HEAP32[$0 + 36 >> 2] = $5;
    HEAP32[$0 + 40 >> 2] = $6;
    HEAP32[$0 + 44 >> 2] = $7;
    $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 380 | 0, $8, $0 + 424 | 0, $0 + 32 | 0);
   }
   $9 = HEAP32[$0 + 380 >> 2];
   if (!$9) {
    break label$4;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($11, $9);
  }
  $9 = HEAP32[$0 + 380 >> 2];
  $4 = $9 + $8 | 0;
  $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($9, $4, $2);
  HEAP32[$0 + 128 >> 2] = 166;
  $9 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 120 | 0, 0, $0 + 128 | 0);
  label$8 : {
   if (HEAP32[$0 + 380 >> 2] == ($0 + 384 | 0)) {
    $8 = $0 + 128 | 0;
    $5 = $0 + 384 | 0;
    break label$8;
   }
   $8 = dlmalloc($8 << 3);
   if (!$8) {
    break label$4;
   }
   std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($9, $8);
   $5 = HEAP32[$0 + 380 >> 2];
  }
  std____2__ios_base__getloc_28_29_20const($0 + 104 | 0, $2);
  std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($5, $6, $4, $8, $0 + 116 | 0, $0 + 112 | 0, $0 + 104 | 0);
  std____2__locale___locale_28_29($0 + 104 | 0);
  $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $8, HEAP32[$0 + 116 >> 2], HEAP32[$0 + 112 >> 2], $2, $3);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($9);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($11);
  $0 = $0 + 432 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return $2 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $0 = global$0 - 256 | 0;
 $10 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $10;
 HEAP32[$0 + 248 >> 2] = 37;
 HEAP32[$0 + 252 >> 2] = 0;
 $9 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0 + 248 | 1, 13882, std____2__ios_base__flags_28_29_20const($2));
 HEAP32[$0 + 204 >> 2] = $0 + 208;
 $8 = std____2____cloc_28_29();
 label$2 : {
  if ($9) {
   $11 = std____2__ios_base__precision_28_29_20const($2);
   HEAP32[$0 + 72 >> 2] = $6;
   HEAP32[$0 + 76 >> 2] = $7;
   $10 = $0 - -64 | 0;
   HEAP32[$10 >> 2] = $4;
   HEAP32[$10 + 4 >> 2] = $5;
   HEAP32[$0 + 48 >> 2] = $11;
   $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 208 | 0, 30, $8, $0 + 248 | 0, $0 + 48 | 0);
   break label$2;
  }
  HEAP32[$0 + 80 >> 2] = $4;
  HEAP32[$0 + 84 >> 2] = $5;
  HEAP32[$0 + 88 >> 2] = $6;
  HEAP32[$0 + 92 >> 2] = $7;
  $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 208 | 0, 30, $8, $0 + 248 | 0, $0 + 80 | 0);
 }
 HEAP32[$0 + 128 >> 2] = 166;
 $11 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 192 | 0, 0, $0 + 128 | 0);
 label$4 : {
  if (($8 | 0) >= 30) {
   $8 = std____2____cloc_28_29();
   label$6 : {
    if ($9) {
     $9 = std____2__ios_base__precision_28_29_20const($2);
     HEAP32[$0 + 24 >> 2] = $6;
     HEAP32[$0 + 28 >> 2] = $7;
     HEAP32[$0 + 16 >> 2] = $4;
     HEAP32[$0 + 20 >> 2] = $5;
     HEAP32[$0 >> 2] = $9;
     $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 204 | 0, $8, $0 + 248 | 0, $0);
     break label$6;
    }
    HEAP32[$0 + 32 >> 2] = $4;
    HEAP32[$0 + 36 >> 2] = $5;
    HEAP32[$0 + 40 >> 2] = $6;
    HEAP32[$0 + 44 >> 2] = $7;
    $8 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 204 | 0, $8, $0 + 248 | 0, $0 + 32 | 0);
   }
   $9 = HEAP32[$0 + 204 >> 2];
   if (!$9) {
    break label$4;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($11, $9);
  }
  $9 = HEAP32[$0 + 204 >> 2];
  $4 = $9 + $8 | 0;
  $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($9, $4, $2);
  HEAP32[$0 + 128 >> 2] = 166;
  $9 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 120 | 0, 0, $0 + 128 | 0);
  label$8 : {
   if (HEAP32[$0 + 204 >> 2] == ($0 + 208 | 0)) {
    $8 = $0 + 128 | 0;
    $5 = $0 + 208 | 0;
    break label$8;
   }
   $8 = dlmalloc($8 << 1);
   if (!$8) {
    break label$4;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($9, $8);
   $5 = HEAP32[$0 + 204 >> 2];
  }
  std____2__ios_base__getloc_28_29_20const($0 + 104 | 0, $2);
  std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($5, $6, $4, $8, $0 + 116 | 0, $0 + 112 | 0, $0 + 104 | 0);
  std____2__locale___locale_28_29($0 + 104 | 0);
  $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $8, HEAP32[$0 + 116 >> 2], HEAP32[$0 + 112 >> 2], $2, $3);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($9);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($11);
  $0 = $0 + 256 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return $2 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}
function mytest($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 $1 = $2 + 8 | 0;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 1700, 9), $0);
 std____2__ios_base__getloc_28_29_20const($1, $3 + HEAP32[HEAP32[$3 >> 2] + -12 >> 2] | 0);
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 25448);
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 std____2__locale___locale_28_29($2 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $1);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
 $3 = mycrypto($0 | 0) | 0;
 $1 = $2 + 8 | 0;
 $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 1710, 17);
 $3 = $0 + $3 | 0;
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($4, $3), 1728, 21), $0 << 1 | 1), 1750, 7), $0);
 std____2__ios_base__getloc_28_29_20const($1, $0 + HEAP32[HEAP32[$0 >> 2] + -12 >> 2] | 0);
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 25448);
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 std____2__locale___locale_28_29($2 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $1);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
 $1 = $2 + 8 | 0;
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 1758, 38), 10);
 std____2__ios_base__getloc_28_29_20const($1, $0 + HEAP32[HEAP32[$0 >> 2] + -12 >> 2] | 0);
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 25448);
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 std____2__locale___locale_28_29($2 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $1);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
 $1 = $2 + 8 | 0;
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 1797, 21);
 $3 = Math_imul($3, $3);
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($0, $3);
 std____2__ios_base__getloc_28_29_20const($1, $0 + HEAP32[HEAP32[$0 >> 2] + -12 >> 2] | 0);
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 25448);
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 std____2__locale___locale_28_29($2 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $1);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3 | 0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $8 = global$0 - 32 | 0;
 $9 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 HEAP32[$8 + 16 >> 2] = $2;
 HEAP32[$8 + 24 >> 2] = $1;
 std____2__ios_base__getloc_28_29_20const($8 + 8 | 0, $3);
 $1 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($8 + 8 | 0);
 std____2__locale___locale_28_29($8 + 8 | 0);
 HEAP32[$4 >> 2] = 0;
 $2 = 0;
 label$2 : {
  while (1) {
   if ($2 | ($6 | 0) == ($7 | 0)) {
    break label$2;
   }
   label$4 : {
    if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
     break label$4;
    }
    label$5 : {
     if ((std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($1, HEAP32[$6 >> 2], 0) | 0) == 37) {
      $2 = $6 + 4 | 0;
      if (($7 | 0) == ($2 | 0)) {
       break label$4;
      }
      $10 = 0;
      $9 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($1, HEAP32[$2 >> 2], 0);
      label$7 : {
       if (!(($9 | 0) == 69 | ($9 & 255) == 48)) {
        $11 = $9;
        $2 = $6;
        break label$7;
       }
       $10 = $6;
       $6 = $6 + 8 | 0;
       if (($7 | 0) == ($6 | 0)) {
        break label$4;
       }
       $11 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($1, HEAP32[$10 + 8 >> 2], 0);
       $10 = $9;
      }
      wasm2js_i32$0 = $8, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$8 + 24 >> 2], HEAP32[$8 + 16 >> 2], $3, $4, $5, $11, $10) | 0, HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
      $6 = $2 + 8 | 0;
      break label$5;
     }
     if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($1, 8192, HEAP32[$6 >> 2])) {
      while (1) {
       label$11 : {
        $6 = $6 + 4 | 0;
        if (($7 | 0) == ($6 | 0)) {
         $6 = $7;
         break label$11;
        }
        if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($1, 8192, HEAP32[$6 >> 2])) {
         continue;
        }
       }
       break;
      }
      while (1) {
       if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($8 + 24 | 0, $8 + 16 | 0)) {
        break label$5;
       }
       if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($1, 8192, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($8 + 24 | 0))) {
        break label$5;
       }
       std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($8 + 24 | 0);
       continue;
      }
     }
     if ((std____2__ctype_wchar_t___toupper_28wchar_t_29_20const($1, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($8 + 24 | 0)) | 0) == (std____2__ctype_wchar_t___toupper_28wchar_t_29_20const($1, HEAP32[$6 >> 2]) | 0)) {
      $6 = $6 + 4 | 0;
      std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($8 + 24 | 0);
      break label$5;
     }
     HEAP32[$4 >> 2] = 4;
    }
    $2 = HEAP32[$4 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$4 >> 2] = 4;
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $6 = HEAP32[$8 + 24 >> 2];
 $0 = $8 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $6;
}
function std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $10 = global$0 - 16 | 0;
 $8 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 $11 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 $13 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($6);
 std____2__numpunct_wchar_t___grouping_28_29_20const($10, $13);
 HEAP32[$5 >> 2] = $3;
 label$3 : {
  $8 = $0;
  $7 = HEAPU8[$8 | 0];
  $6 = $7 + -43 | 0;
  if (!($6 >>> 0 > 2 | !($6 - 1))) {
   $6 = std____2__ctype_wchar_t___widen_28char_29_20const($11, $7 << 24 >> 24);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 4;
   HEAP32[$7 >> 2] = $6;
   $8 = $0 + 1 | 0;
  }
  $6 = $8;
  if (!(HEAPU8[$6 | 0] != 48 | ($2 - $6 | 0) <= 1 | (HEAPU8[$6 + 1 | 0] | 32) != 120)) {
   $6 = std____2__ctype_wchar_t___widen_28char_29_20const($11, 48);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 4;
   HEAP32[$7 >> 2] = $6;
   $6 = std____2__ctype_wchar_t___widen_28char_29_20const($11, HEAP8[$8 + 1 | 0]);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 4;
   HEAP32[$7 >> 2] = $6;
   $8 = $8 + 2 | 0;
   $6 = $8;
   while (1) {
    if ($6 >>> 0 >= $2 >>> 0) {
     break label$3;
    }
    if (!__isxdigit_l(HEAP8[$6 | 0], std____2____cloc_28_29())) {
     break label$3;
    }
    $6 = $6 + 1 | 0;
    continue;
   }
  }
  while (1) {
   if ($6 >>> 0 >= $2 >>> 0) {
    break label$3;
   }
   if (!__isdigit_l(HEAP8[$6 | 0], std____2____cloc_28_29())) {
    break label$3;
   }
   $6 = $6 + 1 | 0;
   continue;
  }
 }
 label$7 : {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($10)) {
   std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($11, $8, $6, HEAP32[$5 >> 2]);
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + ($6 - $8 << 2);
   break label$7;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($8, $6);
  $15 = std____2__numpunct_wchar_t___thousands_sep_28_29_20const($13);
  $7 = $8;
  while (1) {
   if ($7 >>> 0 >= $6 >>> 0) {
    void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29(($8 - $0 << 2) + $3 | 0, HEAP32[$5 >> 2]);
    break label$7;
   }
   label$11 : {
    if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $12) | 0] < 1) {
     break label$11;
    }
    if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $12) | 0] != ($9 | 0)) {
     break label$11;
    }
    $9 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $9 + 4;
    HEAP32[$9 >> 2] = $15;
    $12 = ($12 >>> 0 < std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) + -1 >>> 0) + $12 | 0;
    $9 = 0;
   }
   $16 = std____2__ctype_wchar_t___widen_28char_29_20const($11, HEAP8[$7 | 0]);
   $14 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $14 + 4;
   HEAP32[$14 >> 2] = $16;
   $7 = $7 + 1 | 0;
   $9 = $9 + 1 | 0;
   continue;
  }
 }
 label$12 : {
  label$13 : {
   while (1) {
    if ($6 >>> 0 >= $2 >>> 0) {
     break label$13;
    }
    $7 = HEAPU8[$6 | 0];
    if (($7 | 0) != 46) {
     $7 = std____2__ctype_wchar_t___widen_28char_29_20const($11, $7 << 24 >> 24);
     $9 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $9 + 4;
     HEAP32[$9 >> 2] = $7;
     $6 = $6 + 1 | 0;
     continue;
    }
    break;
   }
   $9 = std____2__numpunct_wchar_t___decimal_point_28_29_20const($13);
   $12 = HEAP32[$5 >> 2];
   $7 = $12 + 4 | 0;
   HEAP32[$5 >> 2] = $7;
   HEAP32[$12 >> 2] = $9;
   $6 = $6 + 1 | 0;
   break label$12;
  }
  $7 = HEAP32[$5 >> 2];
 }
 std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($11, $6, $2, $7);
 $6 = HEAP32[$5 >> 2] + ($2 - $6 << 2) | 0;
 HEAP32[$5 >> 2] = $6;
 HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 << 2) + $3 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
 $0 = $10 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $10 = global$0 - 16 | 0;
 $8 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 $11 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 $13 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($6);
 std____2__numpunct_char___grouping_28_29_20const($10, $13);
 HEAP32[$5 >> 2] = $3;
 label$3 : {
  $8 = $0;
  $7 = HEAPU8[$8 | 0];
  $6 = $7 + -43 | 0;
  if (!($6 >>> 0 > 2 | !($6 - 1))) {
   $6 = std____2__ctype_char___widen_28char_29_20const($11, $7 << 24 >> 24);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 1;
   HEAP8[$7 | 0] = $6;
   $8 = $0 + 1 | 0;
  }
  $6 = $8;
  if (!(HEAPU8[$6 | 0] != 48 | ($2 - $6 | 0) <= 1 | (HEAPU8[$6 + 1 | 0] | 32) != 120)) {
   $6 = std____2__ctype_char___widen_28char_29_20const($11, 48);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 1;
   HEAP8[$7 | 0] = $6;
   $6 = std____2__ctype_char___widen_28char_29_20const($11, HEAP8[$8 + 1 | 0]);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 1;
   HEAP8[$7 | 0] = $6;
   $8 = $8 + 2 | 0;
   $6 = $8;
   while (1) {
    if ($6 >>> 0 >= $2 >>> 0) {
     break label$3;
    }
    if (!__isxdigit_l(HEAP8[$6 | 0], std____2____cloc_28_29())) {
     break label$3;
    }
    $6 = $6 + 1 | 0;
    continue;
   }
  }
  while (1) {
   if ($6 >>> 0 >= $2 >>> 0) {
    break label$3;
   }
   if (!__isdigit_l(HEAP8[$6 | 0], std____2____cloc_28_29())) {
    break label$3;
   }
   $6 = $6 + 1 | 0;
   continue;
  }
 }
 label$7 : {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($10)) {
   std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($11, $8, $6, HEAP32[$5 >> 2]);
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + ($6 - $8 | 0);
   break label$7;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($8, $6);
  $15 = std____2__numpunct_char___thousands_sep_28_29_20const($13);
  $7 = $8;
  while (1) {
   if ($7 >>> 0 >= $6 >>> 0) {
    void_20std____2__reverse_char___28char__2c_20char__29(($8 - $0 | 0) + $3 | 0, HEAP32[$5 >> 2]);
    break label$7;
   }
   label$11 : {
    if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $12) | 0] < 1) {
     break label$11;
    }
    if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $12) | 0] != ($9 | 0)) {
     break label$11;
    }
    $9 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $9 + 1;
    HEAP8[$9 | 0] = $15;
    $12 = ($12 >>> 0 < std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) + -1 >>> 0) + $12 | 0;
    $9 = 0;
   }
   $16 = std____2__ctype_char___widen_28char_29_20const($11, HEAP8[$7 | 0]);
   $14 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $14 + 1;
   HEAP8[$14 | 0] = $16;
   $7 = $7 + 1 | 0;
   $9 = $9 + 1 | 0;
   continue;
  }
 }
 while (1) {
  label$13 : {
   $8 = $11;
   if ($6 >>> 0 < $2 >>> 0) {
    $7 = HEAPU8[$6 | 0];
    if (($7 | 0) != 46) {
     break label$13;
    }
    $7 = std____2__numpunct_char___decimal_point_28_29_20const($13);
    $9 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $9 + 1;
    HEAP8[$9 | 0] = $7;
    $6 = $6 + 1 | 0;
   }
   std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($8, $6, $2, HEAP32[$5 >> 2]);
   $6 = HEAP32[$5 >> 2] + ($2 - $6 | 0) | 0;
   HEAP32[$5 >> 2] = $6;
   HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 | 0) + $3 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = $10 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return;
  }
  $7 = std____2__ctype_char___widen_28char_29_20const($11, $7 << 24 >> 24);
  $9 = HEAP32[$5 >> 2];
  HEAP32[$5 >> 2] = $9 + 1;
  HEAP8[$9 | 0] = $7;
  $6 = $6 + 1 | 0;
  continue;
 }
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $8 = global$0 - 32 | 0;
 $9 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 HEAP32[$8 + 16 >> 2] = $2;
 HEAP32[$8 + 24 >> 2] = $1;
 std____2__ios_base__getloc_28_29_20const($8 + 8 | 0, $3);
 $1 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($8 + 8 | 0);
 std____2__locale___locale_28_29($8 + 8 | 0);
 HEAP32[$4 >> 2] = 0;
 $2 = 0;
 label$2 : {
  while (1) {
   if ($2 | ($6 | 0) == ($7 | 0)) {
    break label$2;
   }
   label$4 : {
    if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
     break label$4;
    }
    label$5 : {
     if ((std____2__ctype_char___narrow_28char_2c_20char_29_20const($1, HEAP8[$6 | 0], 0) | 0) == 37) {
      $2 = $6 + 1 | 0;
      if (($7 | 0) == ($2 | 0)) {
       break label$4;
      }
      $10 = 0;
      $9 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($1, HEAP8[$2 | 0], 0);
      label$7 : {
       if (!(($9 | 0) == 69 | ($9 & 255) == 48)) {
        $11 = $9;
        $2 = $6;
        break label$7;
       }
       $10 = $6;
       $6 = $6 + 2 | 0;
       if (($7 | 0) == ($6 | 0)) {
        break label$4;
       }
       $11 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($1, HEAP8[$10 + 2 | 0], 0);
       $10 = $9;
      }
      wasm2js_i32$0 = $8, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$8 + 24 >> 2], HEAP32[$8 + 16 >> 2], $3, $4, $5, $11, $10) | 0, HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
      $6 = $2 + 2 | 0;
      break label$5;
     }
     if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($1, 8192, HEAP8[$6 | 0])) {
      while (1) {
       label$11 : {
        $6 = $6 + 1 | 0;
        if (($7 | 0) == ($6 | 0)) {
         $6 = $7;
         break label$11;
        }
        if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($1, 8192, HEAP8[$6 | 0])) {
         continue;
        }
       }
       break;
      }
      while (1) {
       if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($8 + 24 | 0, $8 + 16 | 0)) {
        break label$5;
       }
       if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($1, 8192, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($8 + 24 | 0))) {
        break label$5;
       }
       std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($8 + 24 | 0);
       continue;
      }
     }
     if ((std____2__ctype_char___toupper_28char_29_20const($1, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($8 + 24 | 0)) | 0) == (std____2__ctype_char___toupper_28char_29_20const($1, HEAP8[$6 | 0]) | 0)) {
      $6 = $6 + 1 | 0;
      std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($8 + 24 | 0);
      break label$5;
     }
     HEAP32[$4 >> 2] = 4;
    }
    $2 = HEAP32[$4 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$4 >> 2] = 4;
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 }
 $6 = HEAP32[$8 + 24 >> 2];
 $0 = $8 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $6;
}
function std____2__pair_std____2____tree_iterator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____tree_node_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20void____2c_20long__2c_20bool__20std____2____tree_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____map_value_compare_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2__less_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20true__2c_20std____2__allocator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___20__20_____emplace_unique_key_args_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___2c_20std____2__tuple___20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const_____2c_20std____2__tuple_____29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $3 = HEAP32[$1 + 4 >> 2];
 label$1 : {
  label$2 : {
   if ($3) {
    $6 = HEAPU8[$2 + 11 | 0];
    $5 = $6 << 24 >> 24 < 0;
    $10 = $5 ? HEAP32[$2 >> 2] : $2;
    $2 = $5 ? HEAP32[$2 + 4 >> 2] : $6;
    $5 = $1 + 4 | 0;
    while (1) {
     $6 = HEAPU8[$3 + 27 | 0];
     $7 = $6 << 24 >> 24 < 0;
     $6 = $7 ? HEAP32[$3 + 20 >> 2] : $6;
     $11 = $6 >>> 0 < $2 >>> 0;
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          $9 = $11 ? $6 : $2;
          label$10 : {
           if ($9) {
            $8 = $3 + 16 | 0;
            $8 = $7 ? HEAP32[$8 >> 2] : $8;
            $7 = memcmp($10, $8, $9);
            if (!$7) {
             if ($2 >>> 0 < $6 >>> 0) {
              break label$10;
             }
             break label$9;
            }
            if (($7 | 0) > -1) {
             break label$9;
            }
            break label$10;
           }
           if ($2 >>> 0 >= $6 >>> 0) {
            break label$8;
           }
          }
          $6 = HEAP32[$3 >> 2];
          if ($6) {
           break label$5;
          }
          break label$2;
         }
         $6 = memcmp($8, $10, $9);
         if ($6) {
          break label$7;
         }
        }
        if ($11) {
         break label$6;
        }
        break label$1;
       }
       if (($6 | 0) > -1) {
        break label$1;
       }
      }
      $5 = $3 + 4 | 0;
      $6 = HEAP32[$3 + 4 >> 2];
      if (!$6) {
       break label$1;
      }
      $3 = $5;
     }
     $5 = $3;
     $3 = $6;
     continue;
    }
   }
   $3 = $1 + 4 | 0;
  }
  $5 = $3;
 }
 $6 = 0;
 $2 = HEAP32[$5 >> 2];
 if (!$2) {
  $2 = operator_20new_28unsigned_20long_29(32);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 16 | 0, HEAP32[$4 >> 2]);
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAP32[$5 >> 2] = $2;
  $3 = HEAP32[HEAP32[$1 >> 2] >> 2];
  $4 = $2;
  label$14 : {
   if (!$3) {
    break label$14;
   }
   HEAP32[$1 >> 2] = $3;
   $4 = HEAP32[$5 >> 2];
  }
  $3 = $4;
  void_20std____2____tree_balance_after_insert_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29(HEAP32[$1 + 4 >> 2], $3);
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
  $6 = 1;
 }
 HEAP8[$0 + 4 | 0] = $6;
 HEAP32[$0 >> 2] = $2;
}
function try_realloc_chunk($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 $3 = $6 & 3;
 $5 = $6 & -8;
 $2 = $5 + $0 | 0;
 27312;
 label$2 : {
  if (!$3) {
   $3 = 0;
   if ($1 >>> 0 < 256) {
    break label$2;
   }
   if ($5 >>> 0 >= $1 + 4 >>> 0) {
    $3 = $0;
    if ($5 - $1 >>> 0 <= HEAP32[6944] << 1 >>> 0) {
     break label$2;
    }
   }
   return 0;
  }
  label$5 : {
   if ($5 >>> 0 >= $1 >>> 0) {
    $3 = $5 - $1 | 0;
    if ($3 >>> 0 < 16) {
     break label$5;
    }
    HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
    $1 = $0 + $1 | 0;
    HEAP32[$1 + 4 >> 2] = $3 | 3;
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
    dispose_chunk($1, $3);
    break label$5;
   }
   $3 = 0;
   if (HEAP32[6830] == ($2 | 0)) {
    $2 = HEAP32[6827] + $5 | 0;
    if ($2 >>> 0 <= $1 >>> 0) {
     break label$2;
    }
    HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
    $3 = $0 + $1 | 0;
    $1 = $2 - $1 | 0;
    HEAP32[$3 + 4 >> 2] = $1 | 1;
    HEAP32[6827] = $1;
    HEAP32[6830] = $3;
    break label$5;
   }
   if (HEAP32[6829] == ($2 | 0)) {
    $2 = HEAP32[6826] + $5 | 0;
    if ($2 >>> 0 < $1 >>> 0) {
     break label$2;
    }
    $3 = $2 - $1 | 0;
    label$9 : {
     if ($3 >>> 0 >= 16) {
      HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
      $1 = $0 + $1 | 0;
      HEAP32[$1 + 4 >> 2] = $3 | 1;
      $2 = $0 + $2 | 0;
      HEAP32[$2 >> 2] = $3;
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
      break label$9;
     }
     HEAP32[$0 + 4 >> 2] = $6 & 1 | $2 | 2;
     $1 = $0 + $2 | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
     $3 = 0;
     $1 = 0;
    }
    HEAP32[6829] = $1;
    HEAP32[6826] = $3;
    break label$5;
   }
   $4 = HEAP32[$2 + 4 >> 2];
   if ($4 & 2) {
    break label$2;
   }
   $7 = ($4 & -8) + $5 | 0;
   if ($7 >>> 0 < $1 >>> 0) {
    break label$2;
   }
   $9 = $7 - $1 | 0;
   label$11 : {
    if ($4 >>> 0 <= 255) {
     $3 = HEAP32[$2 + 12 >> 2];
     $2 = HEAP32[$2 + 8 >> 2];
     $4 = $4 >>> 3 | 0;
     $5 = ($4 << 3) + 27336 | 0;
     if (($2 | 0) == ($3 | 0)) {
      wasm2js_i32$0 = 27296, wasm2js_i32$1 = HEAP32[6824] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$11;
     }
     HEAP32[$2 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $2;
     break label$11;
    }
    $8 = HEAP32[$2 + 24 >> 2];
    $4 = HEAP32[$2 + 12 >> 2];
    label$14 : {
     if (($4 | 0) != ($2 | 0)) {
      $3 = HEAP32[$2 + 8 >> 2];
      HEAP32[$3 + 12 >> 2] = $4;
      HEAP32[$4 + 8 >> 2] = $3;
      break label$14;
     }
     label$17 : {
      $3 = $2 + 20 | 0;
      $5 = HEAP32[$3 >> 2];
      if ($5) {
       break label$17;
      }
      $3 = $2 + 16 | 0;
      $5 = HEAP32[$3 >> 2];
      if ($5) {
       break label$17;
      }
      $4 = 0;
      break label$14;
     }
     while (1) {
      $10 = $3;
      $4 = $5;
      $3 = $4 + 20 | 0;
      $5 = HEAP32[$3 >> 2];
      if ($5) {
       continue;
      }
      $3 = $4 + 16 | 0;
      $5 = HEAP32[$4 + 16 >> 2];
      if ($5) {
       continue;
      }
      break;
     }
     HEAP32[$10 >> 2] = 0;
    }
    if (!$8) {
     break label$11;
    }
    $5 = HEAP32[$2 + 28 >> 2];
    $3 = ($5 << 2) + 27600 | 0;
    label$19 : {
     if (HEAP32[$3 >> 2] == ($2 | 0)) {
      HEAP32[$3 >> 2] = $4;
      if ($4) {
       break label$19;
      }
      wasm2js_i32$0 = 27300, wasm2js_i32$1 = HEAP32[6825] & __wasm_rotl_i32(-2, $5), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$11;
     }
     HEAP32[(HEAP32[$8 + 16 >> 2] == ($2 | 0) ? 16 : 20) + $8 >> 2] = $4;
     if (!$4) {
      break label$11;
     }
    }
    HEAP32[$4 + 24 >> 2] = $8;
    $3 = HEAP32[$2 + 16 >> 2];
    if ($3) {
     HEAP32[$4 + 16 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $4;
    }
    $2 = HEAP32[$2 + 20 >> 2];
    if (!$2) {
     break label$11;
    }
    HEAP32[$4 + 20 >> 2] = $2;
    HEAP32[$2 + 24 >> 2] = $4;
   }
   if ($9 >>> 0 <= 15) {
    HEAP32[$0 + 4 >> 2] = $6 & 1 | $7 | 2;
    $1 = $0 + $7 | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
    break label$5;
   }
   HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
   $1 = $0 + $1 | 0;
   HEAP32[$1 + 4 >> 2] = $9 | 3;
   $2 = $0 + $7 | 0;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
   dispose_chunk($1, $9);
  }
  $3 = $0;
 }
 return $3;
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = global$0 - 384 | 0;
 $0 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 HEAP32[$5 + 376 >> 2] = 37;
 HEAP32[$5 + 380 >> 2] = 0;
 $6 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($5 + 376 | 1, 13881, std____2__ios_base__flags_28_29_20const($2));
 HEAP32[$5 + 332 >> 2] = $5 + 336;
 $0 = std____2____cloc_28_29();
 label$2 : {
  if ($6) {
   $7 = std____2__ios_base__precision_28_29_20const($2);
   HEAPF64[$5 + 40 >> 3] = $4;
   HEAP32[$5 + 32 >> 2] = $7;
   $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 336 | 0, 30, $0, $5 + 376 | 0, $5 + 32 | 0);
   break label$2;
  }
  HEAPF64[$5 + 48 >> 3] = $4;
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 336 | 0, 30, $0, $5 + 376 | 0, $5 + 48 | 0);
 }
 HEAP32[$5 + 80 >> 2] = 166;
 $7 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 320 | 0, 0, $5 + 80 | 0);
 label$4 : {
  if (($0 | 0) >= 30) {
   $0 = std____2____cloc_28_29();
   label$6 : {
    if ($6) {
     $6 = std____2__ios_base__precision_28_29_20const($2);
     HEAPF64[$5 + 8 >> 3] = $4;
     HEAP32[$5 >> 2] = $6;
     $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 332 | 0, $0, $5 + 376 | 0, $5);
     break label$6;
    }
    HEAPF64[$5 + 16 >> 3] = $4;
    $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 332 | 0, $0, $5 + 376 | 0, $5 + 16 | 0);
   }
   $6 = HEAP32[$5 + 332 >> 2];
   if (!$6) {
    break label$4;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($7, $6);
  }
  $6 = HEAP32[$5 + 332 >> 2];
  $8 = $6 + $0 | 0;
  $10 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $8, $2);
  HEAP32[$5 + 80 >> 2] = 166;
  $6 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 72 | 0, 0, $5 + 80 | 0);
  label$8 : {
   if (HEAP32[$5 + 332 >> 2] == ($5 + 336 | 0)) {
    $0 = $5 + 80 | 0;
    $9 = $5 + 336 | 0;
    break label$8;
   }
   $0 = dlmalloc($0 << 3);
   if (!$0) {
    break label$4;
   }
   std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($6, $0);
   $9 = HEAP32[$5 + 332 >> 2];
  }
  std____2__ios_base__getloc_28_29_20const($5 + 56 | 0, $2);
  std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($9, $10, $8, $0, $5 + 68 | 0, $5 - -64 | 0, $5 + 56 | 0);
  std____2__locale___locale_28_29($5 + 56 | 0);
  $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $0, HEAP32[$5 + 68 >> 2], HEAP32[$5 + 64 >> 2], $2, $3);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($6);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
  $0 = $5 + 384 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return $2 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}
function Neo__SmartContract__Contract__CreateSignatureRedeemScript_28Neo__Cryptography__ECC__ECPoint__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 96 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP8[$2 + 72 | 0] = 0;
 HEAP32[$2 + 68 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 4532;
 HEAP32[$2 + 56 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = 0;
 HEAP32[$2 - -64 >> 2] = $2 + 48;
 Neo__Cryptography__ECC__ECPoint__EncodePoint_28bool_29($2 + 32 | 0, $1, 1);
 Neo__VM__ScriptBuilder__EmitPush_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__29($2 + 48 | 0, $2 + 32 | 0);
 $1 = HEAP32[$2 + 32 >> 2];
 if ($1) {
  HEAP32[$2 + 36 >> 2] = $1;
  operator_20delete_28void__29($1);
 }
 neopt__BinaryWriter__Write_28unsigned_20char_29($2 + 60 | 0, 11);
 $1 = operator_20new_28unsigned_20long_29(48);
 HEAP32[$2 + 80 >> 2] = $1;
 HEAP32[$2 + 84 >> 2] = 33;
 HEAP32[$2 + 88 >> 2] = -2147483600;
 HEAP8[$1 + 33 | 0] = 0;
 HEAP8[$1 + 32 | 0] = HEAPU8[5048];
 $3 = HEAPU8[5044] | HEAPU8[5045] << 8 | (HEAPU8[5046] << 16 | HEAPU8[5047] << 24);
 $4 = HEAPU8[5040] | HEAPU8[5041] << 8 | (HEAPU8[5042] << 16 | HEAPU8[5043] << 24);
 HEAP8[$1 + 24 | 0] = $4;
 HEAP8[$1 + 25 | 0] = $4 >>> 8;
 HEAP8[$1 + 26 | 0] = $4 >>> 16;
 HEAP8[$1 + 27 | 0] = $4 >>> 24;
 HEAP8[$1 + 28 | 0] = $3;
 HEAP8[$1 + 29 | 0] = $3 >>> 8;
 HEAP8[$1 + 30 | 0] = $3 >>> 16;
 HEAP8[$1 + 31 | 0] = $3 >>> 24;
 $4 = HEAPU8[5036] | HEAPU8[5037] << 8 | (HEAPU8[5038] << 16 | HEAPU8[5039] << 24);
 $3 = HEAPU8[5032] | HEAPU8[5033] << 8 | (HEAPU8[5034] << 16 | HEAPU8[5035] << 24);
 HEAP8[$1 + 16 | 0] = $3;
 HEAP8[$1 + 17 | 0] = $3 >>> 8;
 HEAP8[$1 + 18 | 0] = $3 >>> 16;
 HEAP8[$1 + 19 | 0] = $3 >>> 24;
 HEAP8[$1 + 20 | 0] = $4;
 HEAP8[$1 + 21 | 0] = $4 >>> 8;
 HEAP8[$1 + 22 | 0] = $4 >>> 16;
 HEAP8[$1 + 23 | 0] = $4 >>> 24;
 $3 = HEAPU8[5028] | HEAPU8[5029] << 8 | (HEAPU8[5030] << 16 | HEAPU8[5031] << 24);
 $4 = HEAPU8[5024] | HEAPU8[5025] << 8 | (HEAPU8[5026] << 16 | HEAPU8[5027] << 24);
 HEAP8[$1 + 8 | 0] = $4;
 HEAP8[$1 + 9 | 0] = $4 >>> 8;
 HEAP8[$1 + 10 | 0] = $4 >>> 16;
 HEAP8[$1 + 11 | 0] = $4 >>> 24;
 HEAP8[$1 + 12 | 0] = $3;
 HEAP8[$1 + 13 | 0] = $3 >>> 8;
 HEAP8[$1 + 14 | 0] = $3 >>> 16;
 HEAP8[$1 + 15 | 0] = $3 >>> 24;
 $4 = HEAPU8[5020] | HEAPU8[5021] << 8 | (HEAPU8[5022] << 16 | HEAPU8[5023] << 24);
 $3 = HEAPU8[5016] | HEAPU8[5017] << 8 | (HEAPU8[5018] << 16 | HEAPU8[5019] << 24);
 HEAP8[$1 | 0] = $3;
 HEAP8[$1 + 1 | 0] = $3 >>> 8;
 HEAP8[$1 + 2 | 0] = $3 >>> 16;
 HEAP8[$1 + 3 | 0] = $3 >>> 24;
 HEAP8[$1 + 4 | 0] = $4;
 HEAP8[$1 + 5 | 0] = $4 >>> 8;
 HEAP8[$1 + 6 | 0] = $4 >>> 16;
 HEAP8[$1 + 7 | 0] = $4 >>> 24;
 $1 = Neo__SmartContract__InteropService__Register_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20bool_20_28__29_28ApplicationEngine__29_2c_20long_2c_20Neo__SmartContract__TriggerType_2c_20Neo__SmartContract__CallFlags_29($2 + 80 | 0, 1, 262144, 97, 0);
 if (HEAP8[$2 + 91 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 + 80 >> 2]);
 }
 Neo__VM__ScriptBuilder__EmitSysCall_28unsigned_20int_29($2, $2 + 48 | 0, HEAP32[$1 + 12 >> 2]);
 HEAP32[$2 + 12 >> 2] = 4532;
 label$4 : {
  if (!HEAPU8[$2 + 24 | 0]) {
   break label$4;
  }
  $1 = HEAP32[$2 + 20 >> 2];
  if (!$1) {
   break label$4;
  }
  $3 = HEAP32[$1 >> 2];
  if ($3) {
   HEAP32[$1 + 4 >> 2] = $3;
   operator_20delete_28void__29($3);
  }
  operator_20delete_28void__29($1);
 }
 HEAP32[$2 + 20 >> 2] = 0;
 $1 = HEAP32[$2 >> 2];
 if ($1) {
  HEAP32[$2 + 4 >> 2] = $1;
  operator_20delete_28void__29($1);
 }
 Neo__VM__ScriptBuilder__ToArray_28_29($0, $2 + 48 | 0);
 HEAP32[$2 + 60 >> 2] = 4532;
 label$7 : {
  if (!HEAPU8[$2 + 72 | 0]) {
   break label$7;
  }
  $1 = HEAP32[$2 + 68 >> 2];
  if (!$1) {
   break label$7;
  }
  $0 = HEAP32[$1 >> 2];
  if ($0) {
   HEAP32[$1 + 4 >> 2] = $0;
   operator_20delete_28void__29($0);
  }
  operator_20delete_28void__29($1);
 }
 HEAP32[$2 + 68 >> 2] = 0;
 $1 = HEAP32[$2 + 48 >> 2];
 if ($1) {
  HEAP32[$2 + 52 >> 2] = $1;
  operator_20delete_28void__29($1);
 }
 $0 = $2 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = global$0 - 208 | 0;
 $0 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 HEAP32[$5 + 200 >> 2] = 37;
 HEAP32[$5 + 204 >> 2] = 0;
 $6 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($5 + 200 | 1, 13881, std____2__ios_base__flags_28_29_20const($2));
 HEAP32[$5 + 156 >> 2] = $5 + 160;
 $0 = std____2____cloc_28_29();
 label$2 : {
  if ($6) {
   $7 = std____2__ios_base__precision_28_29_20const($2);
   HEAPF64[$5 + 40 >> 3] = $4;
   HEAP32[$5 + 32 >> 2] = $7;
   $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 160 | 0, 30, $0, $5 + 200 | 0, $5 + 32 | 0);
   break label$2;
  }
  HEAPF64[$5 + 48 >> 3] = $4;
  $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 160 | 0, 30, $0, $5 + 200 | 0, $5 + 48 | 0);
 }
 HEAP32[$5 + 80 >> 2] = 166;
 $7 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 144 | 0, 0, $5 + 80 | 0);
 label$4 : {
  if (($0 | 0) >= 30) {
   $0 = std____2____cloc_28_29();
   label$6 : {
    if ($6) {
     $6 = std____2__ios_base__precision_28_29_20const($2);
     HEAPF64[$5 + 8 >> 3] = $4;
     HEAP32[$5 >> 2] = $6;
     $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 156 | 0, $0, $5 + 200 | 0, $5);
     break label$6;
    }
    HEAPF64[$5 + 16 >> 3] = $4;
    $0 = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 156 | 0, $0, $5 + 200 | 0, $5 + 16 | 0);
   }
   $6 = HEAP32[$5 + 156 >> 2];
   if (!$6) {
    break label$4;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($7, $6);
  }
  $6 = HEAP32[$5 + 156 >> 2];
  $8 = $6 + $0 | 0;
  $10 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $8, $2);
  HEAP32[$5 + 80 >> 2] = 166;
  $6 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($5 + 72 | 0, 0, $5 + 80 | 0);
  label$8 : {
   if (HEAP32[$5 + 156 >> 2] == ($5 + 160 | 0)) {
    $0 = $5 + 80 | 0;
    $9 = $5 + 160 | 0;
    break label$8;
   }
   $0 = dlmalloc($0 << 1);
   if (!$0) {
    break label$4;
   }
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($6, $0);
   $9 = HEAP32[$5 + 156 >> 2];
  }
  std____2__ios_base__getloc_28_29_20const($5 + 56 | 0, $2);
  std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($9, $10, $8, $0, $5 + 68 | 0, $5 - -64 | 0, $5 + 56 | 0);
  std____2__locale___locale_28_29($5 + 56 | 0);
  $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $0, HEAP32[$5 + 68 >> 2], HEAP32[$5 + 64 >> 2], $2, $3);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($6);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
  $0 = $5 + 208 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return $2 | 0;
 }
 std____throw_bad_alloc_28_29();
 abort();
}
function std____2__init_wmonths_28_29() {
 var $0 = 0;
 label$1 : {
  if (HEAP8[26624] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26624)) {
   break label$1;
  }
  $0 = 26336;
  while (1) {
   $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 26624) {
    continue;
   }
   break;
  }
  __cxa_guard_release(26624);
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26336, 19368);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26348, 19400);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26360, 19436);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26372, 19460);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26384, 19484);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26396, 19500);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26408, 19520);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26420, 19540);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26432, 19568);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26444, 19608);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26456, 19640);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26468, 19676);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26480, 19712);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26492, 19728);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26504, 19744);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26516, 19760);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26528, 19484);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26540, 19776);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26552, 19792);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26564, 19808);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26576, 19824);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26588, 19840);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26600, 19856);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26612, 19872);
}
function __trunctfdf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $13 = global$0 - 32 | 0;
 $4 = $13;
 if ($13 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $7 = $2;
 $9 = $7;
 $5 = $3;
 $8 = $5 & 2147483647;
 $10 = $8;
 $4 = $8 + -1006698496 | 0;
 $5 = $9;
 $6 = $5;
 if ($6 >>> 0 < 0) {
  $4 = $4 + 1 | 0;
 }
 $11 = $6;
 $5 = $4;
 $4 = $10;
 $6 = $4 + -1140785152 | 0;
 $8 = $9;
 $7 = $8;
 if ($7 >>> 0 < 0) {
  $6 = $6 + 1 | 0;
 }
 $8 = $6;
 $6 = $5;
 $4 = $11;
 label$2 : {
  if (($8 | 0) == ($6 | 0) & $4 >>> 0 < $7 >>> 0 | $6 >>> 0 < $8 >>> 0) {
   $7 = $2 << 4;
   $4 = $3;
   $6 = $4 << 4 | $2 >>> 28;
   $5 = $6;
   $2 = 0;
   $4 = $2;
   $6 = $1;
   $8 = $6 >>> 28 | 0;
   $6 = $7;
   $9 = $8 | $6;
   $2 = $5;
   $4 = $2 | $4;
   $10 = $4;
   $4 = $1;
   $6 = $4 & 268435455;
   $1 = $6;
   $4 = $0;
   if (($6 | 0) == 134217728 & $4 >>> 0 >= 1 | $6 >>> 0 > 134217728) {
    $4 = $10;
    $7 = $4 + 1073741824 | 0;
    $8 = $9;
    $5 = $8 + 1 | 0;
    if ($5 >>> 0 < 1) {
     $7 = $7 + 1 | 0;
    }
    $12 = $5;
    $11 = $7;
    break label$2;
   }
   $4 = $9;
   $12 = $4;
   $7 = $10;
   $5 = ($4 >>> 0 < 0) + -1073741824 | 0;
   $5 = $7 - $5 | 0;
   $11 = $5;
   $5 = $1;
   $4 = $5 ^ 134217728;
   $7 = $0;
   $5 = $7;
   if ($5 | $4) {
    break label$2;
   }
   $2 = $12;
   $5 = $2 & 1;
   $7 = $2;
   $8 = $5 + $7 | 0;
   $2 = $11;
   $4 = 0;
   $6 = $2 + $4 | 0;
   $12 = $8;
   $6 = $8 >>> 0 < $7 >>> 0 ? $6 + 1 | 0 : $6;
   $11 = $6;
   break label$2;
  }
  $6 = $1;
  $8 = !($6 | $0);
  $6 = $10;
  $4 = $9;
  $5 = ($6 | 0) == 2147418112 & $4 >>> 0 < 0 | $6 >>> 0 < 2147418112;
  $4 = $6;
  $7 = $9;
  if (!(!$7 & ($4 | 0) == 2147418112 ? $8 : $5)) {
   $5 = $2;
   $0 = $5 << 4;
   $7 = $3;
   $4 = $7 << 4 | $5 >>> 28;
   $5 = 0;
   $7 = $5;
   $7 = $4 | $7;
   $4 = $1;
   $6 = $4 >>> 28 | 0;
   $4 = $0;
   $5 = $6 | $4;
   $4 = $7 & 524287;
   $12 = $5;
   $5 = $4 | 2146959360;
   $11 = $5;
   break label$2;
  }
  $11 = 2146435072;
  $5 = $10;
  $4 = $9;
  if (($5 | 0) == 1140785151 & $4 >>> 0 > 4294967295 | $5 >>> 0 > 1140785151) {
   break label$2;
  }
  $11 = 0;
  $4 = $10;
  $7 = $4 >>> 16 | 0;
  if ($7 >>> 0 < 15249) {
   break label$2;
  }
  $5 = $3;
  $6 = $5 & 65535;
  $4 = $2;
  $9 = $4;
  $4 = $6 | 65536;
  $10 = $4;
  $4 = $1;
  $5 = $10;
  __ashlti3($13 + 16 | 0, $0, $4, $9, $5, $7 + -15233 | 0);
  $5 = $4;
  $4 = $10;
  __lshrti3($13, $0, $5, $9, $4, 15361 - $7 | 0);
  $6 = $13;
  $4 = HEAP32[$6 + 8 >> 2];
  $5 = HEAP32[$6 + 12 >> 2];
  $1 = $4 << 4;
  $4 = $5 << 4 | $4 >>> 28;
  $0 = $4;
  $6 = HEAP32[$13 + 4 >> 2];
  $10 = $6;
  $5 = $13;
  $4 = HEAP32[$5 >> 2];
  $9 = $4;
  $7 = $6 >>> 28 | 0;
  $6 = $1;
  $12 = $7 | $6;
  $4 = 0;
  $5 = $4;
  $4 = $0;
  $5 = $5 | $4;
  $11 = $5;
  $4 = $13;
  $5 = HEAP32[$4 + 16 >> 2];
  $1 = $5;
  $6 = HEAP32[$4 + 20 >> 2];
  $0 = $6;
  $6 = HEAP32[$4 + 24 >> 2];
  $7 = $6;
  $5 = HEAP32[$4 + 28 >> 2];
  $6 = $5;
  $5 = $0;
  $6 = $5 | $6;
  $4 = $1;
  $5 = $7 | $4;
  $0 = ($5 | 0) != 0 | ($6 | 0) != 0;
  $5 = $10;
  $6 = $5 & 268435455;
  $5 = $0;
  $7 = $9;
  $4 = $7;
  $9 = $5 | $4;
  $7 = $6;
  $10 = $6;
  $6 = $9;
  if (($7 | 0) == 134217728 & $6 >>> 0 >= 1 | $7 >>> 0 > 134217728) {
   $6 = $11;
   $8 = $6;
   $4 = $12;
   $2 = $4 + 1 | 0;
   if ($2 >>> 0 < 1) {
    $8 = $8 + 1 | 0;
   }
   $12 = $2;
   $11 = $8;
   break label$2;
  }
  $8 = $10;
  $4 = $8 ^ 134217728;
  $8 = $9;
  if ($8 | $4) {
   break label$2;
  }
  $5 = $12;
  $8 = $5 & 1;
  $6 = $5;
  $7 = $8 + $6 | 0;
  $5 = $11;
  $4 = 0;
  $2 = $5 + $4 | 0;
  $12 = $7;
  $2 = $7 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  $11 = $2;
 }
 $0 = $13 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 $2 = $3;
 $8 = $2 & -2147483648;
 $4 = $8;
 $8 = $11;
 $4 = $8 | $4;
 $2 = $12;
 $6 = 0;
 wasm2js_scratch_store_i32(0, $2 | $6);
 wasm2js_scratch_store_i32(1, $4 | 0);
 return +wasm2js_scratch_load_f64();
}
function __embind_register_native_and_builtin_types() {
 _embind_register_void(emscripten__internal__TypeID_void_2c_20void___get_28_29() | 0, 5200);
 _embind_register_bool(emscripten__internal__TypeID_bool_2c_20void___get_28_29() | 0, 5205, 1, 1, 0);
 void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29(5210);
 void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29(5215);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29(5227);
 void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29(5241);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29(5247);
 void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29(5262);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29(5266);
 void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29(5279);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29(5284);
 void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29(5298);
 void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29(5304);
 _embind_register_std_string(emscripten__internal__TypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___get_28_29() | 0, 5311);
 _embind_register_std_string(emscripten__internal__TypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__2c_20void___get_28_29() | 0, 5323);
 _embind_register_std_wstring(emscripten__internal__TypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__2c_20void___get_28_29() | 0, 4, 5356);
 _embind_register_std_wstring(emscripten__internal__TypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__2c_20void___get_28_29() | 0, 2, 5369);
 _embind_register_std_wstring(emscripten__internal__TypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__2c_20void___get_28_29() | 0, 4, 5384);
 _embind_register_emval(emscripten__internal__TypeID_emscripten__val_2c_20void___get_28_29() | 0, 5399);
 void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29(5415);
 void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(5445);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(5482);
 void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(5521);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(5552);
 void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(5592);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(5621);
 void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29(5659);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29(5689);
 void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(5728);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(5760);
 void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(5793);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(5826);
 void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(5860);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(5893);
 void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29(5927);
 void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29(5958);
}
function Neo__SmartContract__InteropDescriptor__InteropDescriptor_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20bool_20_28__29_28ApplicationEngine__29_2c_20long_2c_20Neo__SmartContract__TriggerType_2c_20Neo__SmartContract__CallFlags_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $8 = global$0 - 32 | 0;
 $7 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1);
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($8, $1);
 HEAP32[$8 + 24 >> 2] = 0;
 HEAP32[$8 + 16 >> 2] = 0;
 HEAP32[$8 + 20 >> 2] = 0;
 while (1) {
  label$3 : {
   $10 = HEAP8[$1 + 11 | 0];
   label$4 : {
    if (($10 | 0) <= -1) {
     if ($6 >>> 0 >= HEAPU32[$1 + 4 >> 2]) {
      break label$4;
     }
     $7 = HEAP32[$1 >> 2];
     break label$3;
    }
    $7 = $1;
    if ($6 >>> 0 < ($10 & 255) >>> 0) {
     break label$3;
    }
   }
   $6 = operator_20new_28unsigned_20long_29(32);
   HEAP8[$6 | 0] = 0;
   HEAP8[$6 + 1 | 0] = 0;
   HEAP8[$6 + 2 | 0] = 0;
   HEAP8[$6 + 3 | 0] = 0;
   HEAP8[$6 + 4 | 0] = 0;
   HEAP8[$6 + 5 | 0] = 0;
   HEAP8[$6 + 6 | 0] = 0;
   HEAP8[$6 + 7 | 0] = 0;
   HEAP8[$6 + 24 | 0] = 0;
   HEAP8[$6 + 25 | 0] = 0;
   HEAP8[$6 + 26 | 0] = 0;
   HEAP8[$6 + 27 | 0] = 0;
   HEAP8[$6 + 28 | 0] = 0;
   HEAP8[$6 + 29 | 0] = 0;
   HEAP8[$6 + 30 | 0] = 0;
   HEAP8[$6 + 31 | 0] = 0;
   HEAP8[$6 + 16 | 0] = 0;
   HEAP8[$6 + 17 | 0] = 0;
   HEAP8[$6 + 18 | 0] = 0;
   HEAP8[$6 + 19 | 0] = 0;
   HEAP8[$6 + 20 | 0] = 0;
   HEAP8[$6 + 21 | 0] = 0;
   HEAP8[$6 + 22 | 0] = 0;
   HEAP8[$6 + 23 | 0] = 0;
   HEAP8[$6 + 8 | 0] = 0;
   HEAP8[$6 + 9 | 0] = 0;
   HEAP8[$6 + 10 | 0] = 0;
   HEAP8[$6 + 11 | 0] = 0;
   HEAP8[$6 + 12 | 0] = 0;
   HEAP8[$6 + 13 | 0] = 0;
   HEAP8[$6 + 14 | 0] = 0;
   HEAP8[$6 + 15 | 0] = 0;
   $7 = HEAP32[$8 + 16 >> 2];
   external_sha256($7 | 0, HEAP32[$8 + 20 >> 2] - $7 | 0, $6 | 0, 32) | 0;
   $7 = HEAPU8[$6 | 0] | HEAPU8[$6 + 1 | 0] << 8 | (HEAPU8[$6 + 2 | 0] << 16 | HEAPU8[$6 + 3 | 0] << 24);
   operator_20delete_28void__29($6);
   $6 = HEAP32[$8 + 16 >> 2];
   if ($6) {
    HEAP32[$8 + 20 >> 2] = $6;
    operator_20delete_28void__29($6);
   }
   if (HEAP8[$1 + 11 | 0] <= -1) {
    operator_20delete_28void__29(HEAP32[$1 >> 2]);
   }
   HEAP8[$0 + 25 | 0] = $5;
   HEAP8[$0 + 24 | 0] = $4;
   HEAP32[$0 + 20 >> 2] = $3;
   HEAP32[$0 + 16 >> 2] = $2;
   HEAP32[$0 + 12 >> 2] = $7;
   $1 = $8 + 32 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $1;
   return $0;
  }
  $12 = HEAPU8[$6 + $7 | 0];
  $7 = HEAP32[$8 + 20 >> 2];
  $9 = HEAP32[$8 + 24 >> 2];
  if ($7 >>> 0 < $9 >>> 0) {
   HEAP8[$7 | 0] = $12;
   HEAP32[$8 + 20 >> 2] = $7 + 1;
   $6 = $6 + 1 | 0;
   continue;
  }
  $10 = HEAP32[$8 + 16 >> 2];
  $13 = $7 - $10 | 0;
  $7 = $13 + 1 | 0;
  if (($7 | 0) > -1) {
   $14 = $13;
   $9 = $9 - $10 | 0;
   $11 = $9 << 1;
   $9 = $9 >>> 0 < 1073741823 ? $11 >>> 0 < $7 >>> 0 ? $7 : $11 : 2147483647;
   $7 = 0;
   label$11 : {
    if (!$9) {
     break label$11;
    }
    $7 = operator_20new_28unsigned_20long_29($9);
   }
   $11 = $14 + $7 | 0;
   HEAP8[$11 | 0] = $12;
   $12 = $7 + $9 | 0;
   $9 = $11 + 1 | 0;
   if (($13 | 0) >= 1) {
    memcpy($7, $10, $13);
   }
   HEAP32[$8 + 24 >> 2] = $12;
   HEAP32[$8 + 20 >> 2] = $9;
   HEAP32[$8 + 16 >> 2] = $7;
   if ($10) {
    operator_20delete_28void__29($10);
   }
   $6 = $6 + 1 | 0;
   continue;
  }
  break;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($8 + 16 | 0);
 abort();
}
function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$2;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   if (HEAP32[$1 + 44 >> 2] != 4) {
    $5 = $0 + 16 | 0;
    $3 = $5 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
    $9 = $1;
    label$7 : {
     label$8 : {
      while (1) {
       label$10 : {
        if ($5 >>> 0 >= $3 >>> 0) {
         break label$10;
        }
        HEAP16[$1 + 52 >> 1] = 0;
        __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $2, 1, $4);
        if (HEAPU8[$1 + 54 | 0]) {
         break label$10;
        }
        label$11 : {
         if (!HEAPU8[$1 + 53 | 0]) {
          break label$11;
         }
         if (HEAPU8[$1 + 52 | 0]) {
          $6 = 1;
          if (HEAP32[$1 + 24 >> 2] == 1) {
           break label$8;
          }
          $7 = 1;
          $8 = 1;
          if (HEAPU8[$0 + 8 | 0] & 2) {
           break label$11;
          }
          break label$8;
         }
         $7 = 1;
         $6 = $8;
         if (!(HEAP8[$0 + 8 | 0] & 1)) {
          break label$8;
         }
        }
        $5 = $5 + 8 | 0;
        continue;
       }
       break;
      }
      $6 = $8;
      $5 = 4;
      if (!$7) {
       break label$7;
      }
     }
     $5 = 3;
    }
    HEAP32[$9 + 44 >> 2] = $5;
    if ($6 & 1) {
     break label$2;
    }
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $5 = HEAP32[$0 + 12 >> 2];
  $6 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4);
  if (($5 | 0) < 2) {
   break label$2;
  }
  $6 = ($5 << 3) + $6 | 0;
  $5 = $0 + 24 | 0;
  $0 = HEAP32[$0 + 8 >> 2];
  if (!(HEAP32[$1 + 36 >> 2] != 1 ? !($0 & 2) : 0)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0]) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($5 >>> 0 < $6 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if (!($0 & 1)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($5 >>> 0 < $6 >>> 0) {
     continue;
    }
    break label$2;
   }
  }
  while (1) {
   if (HEAPU8[$1 + 54 | 0] | (HEAP32[$1 + 24 >> 2] == 1 ? HEAP32[$1 + 36 >> 2] == 1 : 0)) {
    break label$2;
   }
   __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
   $5 = $5 + 8 | 0;
   if ($5 >>> 0 < $6 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function std____2__init_months_28_29() {
 var $0 = 0;
 label$1 : {
  if (HEAP8[26320] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26320)) {
   break label$1;
  }
  $0 = 26032;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 26320) {
    continue;
   }
   break;
  }
  __cxa_guard_release(26320);
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26032, 19236);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26044, 19244);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26056, 19253);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26068, 19259);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26080, 19265);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26092, 19269);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26104, 19274);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26116, 19279);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26128, 19286);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26140, 19296);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26152, 19304);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26164, 19313);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26176, 19322);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26188, 19326);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26200, 19330);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26212, 19334);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26224, 19265);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26236, 19338);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26248, 19342);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26260, 19346);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26272, 19350);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26284, 19354);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26296, 19358);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26308, 19362);
}
function std____2__utf8_to_utf16_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20short__2c_20unsigned_20short__2c_20unsigned_20short___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 label$1 : {
  if (!($7 & 4)) {
   break label$1;
  }
  $7 = HEAP32[$2 >> 2];
  if (($1 - $7 | 0) < 3 | HEAPU8[$7 | 0] != 239 | (HEAPU8[$7 + 1 | 0] != 187 | HEAPU8[$7 + 2 | 0] != 191)) {
   break label$1;
  }
  HEAP32[$2 >> 2] = $7 + 3;
 }
 label$2 : {
  while (1) {
   $3 = HEAP32[$2 >> 2];
   if ($3 >>> 0 >= $1 >>> 0) {
    $10 = 0;
    break label$2;
   }
   $10 = 1;
   $0 = HEAP32[$5 >> 2];
   if ($0 >>> 0 >= $4 >>> 0) {
    break label$2;
   }
   label$5 : {
    $7 = HEAPU8[$3 | 0];
    if ($7 >>> 0 > $6 >>> 0) {
     break label$5;
    }
    $12 = $2;
    label$6 : {
     if ($7 << 24 >> 24 >= 0) {
      HEAP16[$0 >> 1] = $7;
      $7 = $3 + 1 | 0;
      break label$6;
     }
     if ($7 >>> 0 < 194) {
      break label$5;
     }
     if ($7 >>> 0 <= 223) {
      if (($1 - $3 | 0) < 2) {
       break label$2;
      }
      $8 = HEAPU8[$3 + 1 | 0];
      if (($8 & 192) != 128) {
       break label$5;
      }
      $10 = 2;
      $7 = $8 & 63 | $7 << 6 & 1984;
      if ($7 >>> 0 > $6 >>> 0) {
       break label$2;
      }
      HEAP16[$0 >> 1] = $7;
      $7 = $3 + 2 | 0;
      break label$6;
     }
     if ($7 >>> 0 <= 239) {
      if (($1 - $3 | 0) < 3) {
       break label$2;
      }
      $9 = HEAPU8[$3 + 2 | 0];
      $8 = HEAPU8[$3 + 1 | 0];
      label$10 : {
       label$11 : {
        if (($7 | 0) != 237) {
         if (($7 | 0) != 224) {
          break label$11;
         }
         if (($8 & 224) != 160) {
          break label$5;
         }
         break label$10;
        }
        if (($8 & 224) != 128) {
         break label$5;
        }
        break label$10;
       }
       if (($8 & 192) != 128) {
        break label$5;
       }
      }
      if (($9 & 192) != 128) {
       break label$5;
      }
      $10 = 2;
      $7 = $9 & 63 | (($8 & 63) << 6 | $7 << 12);
      if (($7 & 65535) >>> 0 > $6 >>> 0) {
       break label$2;
      }
      HEAP16[$0 >> 1] = $7;
      $7 = $3 + 3 | 0;
      break label$6;
     }
     if ($7 >>> 0 > 244) {
      break label$5;
     }
     if (($1 - $3 | 0) < 4) {
      break label$2;
     }
     $9 = HEAPU8[$3 + 3 | 0];
     $8 = HEAPU8[$3 + 2 | 0];
     $3 = HEAPU8[$3 + 1 | 0];
     label$13 : {
      label$14 : {
       $11 = $7 + -240 | 0;
       if ($11 >>> 0 > 4) {
        break label$14;
       }
       label$15 : {
        switch ($11 - 1 | 0) {
        default:
         if (($3 + 112 & 255) >>> 0 >= 48) {
          break label$5;
         }
         break label$13;
        case 0:
        case 1:
        case 2:
         break label$14;
        case 3:
         break label$15;
        }
       }
       if (($3 & 240) != 128) {
        break label$5;
       }
       break label$13;
      }
      if (($3 & 192) != 128) {
       break label$5;
      }
     }
     if (($8 & 192) != 128 | ($9 & 192) != 128) {
      break label$5;
     }
     if (($4 - $0 | 0) < 4) {
      break label$2;
     }
     $10 = 2;
     $9 = $9 & 63;
     $11 = $8 << 6;
     $7 = $7 & 7;
     if (($9 | ($11 & 4032 | ($3 << 12 & 258048 | $7 << 18))) >>> 0 > $6 >>> 0) {
      break label$2;
     }
     $3 = $3 << 2;
     HEAP16[$0 >> 1] = ($3 & 192 | $7 << 8 | ($8 >>> 4 & 3 | $3 & 60)) + 16320 | 55296;
     HEAP32[$5 >> 2] = $0 + 2;
     HEAP16[$0 + 2 >> 1] = $11 & 960 | $9 | 56320;
     $7 = HEAP32[$2 >> 2] + 4 | 0;
    }
    HEAP32[$12 >> 2] = $7;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 2;
    continue;
   }
   break;
  }
  return 2;
 }
 return $10;
}
function neopt__JArray__ToString_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = global$0 - 160 | 0;
 $7 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$2 + 80 >> 2] = 2532;
 HEAP32[$2 + 16 >> 2] = 2512;
 HEAP32[$2 + 24 >> 2] = 2372;
 HEAP32[$2 + 20 >> 2] = 0;
 $9 = $2 + 80 | 0;
 $8 = $2 + 28 | 0;
 std____2__ios_base__init_28void__29($9, $8);
 HEAP32[$2 + 152 >> 2] = 0;
 HEAP32[$2 + 156 >> 2] = -1;
 HEAP32[$2 + 80 >> 2] = 2392;
 HEAP32[$2 + 16 >> 2] = 2352;
 HEAP32[$2 + 24 >> 2] = 2372;
 $7 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($8);
 HEAP32[$2 + 60 >> 2] = 0;
 HEAP32[$2 + 64 >> 2] = 0;
 HEAP32[$2 + 68 >> 2] = 0;
 HEAP32[$2 + 72 >> 2] = 0;
 HEAP32[$2 + 76 >> 2] = 24;
 HEAP32[$2 + 28 >> 2] = 2672;
 HEAP8[$2 | 0] = 91;
 $5 = $2 + 24 | 0;
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($5, $2, 1);
 $3 = HEAP32[$1 + 16 >> 2];
 if (($3 | 0) != HEAP32[$1 + 20 >> 2]) {
  while (1) {
   $3 = HEAP32[($6 << 2) + $3 >> 2];
   label$4 : {
    if (!$3) {
     std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($5, 4200, 4);
     break label$4;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($2, $3);
    $3 = HEAPU8[$2 + 11 | 0];
    $4 = $3 << 24 >> 24 < 0;
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($5, $4 ? HEAP32[$2 >> 2] : $2, $4 ? HEAP32[$2 + 4 >> 2] : $3);
    if (HEAP8[$2 + 11 | 0] > -1) {
     break label$4;
    }
    operator_20delete_28void__29(HEAP32[$2 >> 2]);
   }
   $3 = HEAP32[$1 + 16 >> 2];
   $4 = HEAP32[$1 + 20 >> 2] - $3 >> 2;
   if (($4 + -1 | 0) != ($6 | 0)) {
    HEAP8[$2 | 0] = 44;
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($5, $2, 1);
    $3 = HEAP32[$1 + 16 >> 2];
    $4 = HEAP32[$1 + 20 >> 2] - $3 >> 2;
   }
   $6 = $6 + 1 | 0;
   if ($6 >>> 0 < $4 >>> 0) {
    continue;
   }
   break;
  }
 }
 HEAP8[$2 | 0] = 93;
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($5, $2, 1);
 std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($0, $8);
 HEAP32[$2 + 80 >> 2] = 2392;
 HEAP32[$2 + 16 >> 2] = 2352;
 HEAP32[$2 + 28 >> 2] = 2672;
 HEAP32[$2 + 24 >> 2] = 2372;
 if (HEAP8[$2 + 71 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 + 60 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($7);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($2 + 16 | 0, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($9);
 $0 = $2 + 160 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = 0, $9 = 0;
 $0 = global$0 - 160 | 0;
 $7 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$0 + 144 >> 2] = $2;
 HEAP32[$0 + 152 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = 167;
 $8 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $4);
 $1 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 16 | 0);
 HEAP8[$0 + 15 | 0] = 0;
 label$2 : {
  if (!std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0 + 152 | 0, $2, $3, $0 + 16 | 0, std____2__ios_base__flags_28_29_20const($4), $5, $0 + 15 | 0, $1, $8, $0 + 20 | 0, $0 + 132 | 0)) {
   break label$2;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___clear_28_29($6);
  if (HEAPU8[$0 + 15 | 0]) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($6, std____2__ctype_char___widen_28char_29_20const($1, 45));
  }
  $1 = std____2__ctype_char___widen_28char_29_20const($1, 48);
  $4 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($8);
  $9 = HEAP32[$0 + 20 >> 2];
  $2 = $9 + -1 | 0;
  $3 = $4 >>> 0 > $2 >>> 0 ? $4 : $2;
  $1 = $1 & 255;
  while (1) {
   label$5 : {
    $7 = $6;
    if ($4 >>> 0 < $2 >>> 0) {
     if (HEAPU8[$4 | 0] == ($1 | 0)) {
      break label$5;
     }
     $3 = $4;
    }
    std____2__enable_if__28__is_cpp17_forward_iterator_char____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_char____value_29_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_char___28char__2c_20char__29($7, $3, $9);
    break label$2;
   }
   $4 = $4 + 1 | 0;
   continue;
  }
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0 + 152 | 0, $0 + 144 | 0)) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 }
 $4 = HEAP32[$0 + 152 >> 2];
 std____2__locale___locale_28_29($0 + 16 | 0);
 std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($8);
 $0 = $0 + 160 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $0 = global$0 - 448 | 0;
 $7 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$0 + 432 >> 2] = $2;
 HEAP32[$0 + 440 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = 167;
 $7 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $4);
 $1 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 16 | 0);
 HEAP8[$0 + 15 | 0] = 0;
 if (std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0 + 440 | 0, $2, $3, $0 + 16 | 0, std____2__ios_base__flags_28_29_20const($4), $5, $0 + 15 | 0, $1, $7, $0 + 20 | 0, $0 + 432 | 0)) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___clear_28_29($6);
  if (HEAPU8[$0 + 15 | 0]) {
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($6, std____2__ctype_wchar_t___widen_28char_29_20const($1, 45));
  }
  $1 = std____2__ctype_wchar_t___widen_28char_29_20const($1, 48);
  $4 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($7);
  $3 = HEAP32[$0 + 20 >> 2];
  $2 = $3 + -4 | 0;
  while (1) {
   if (!(HEAP32[$4 >> 2] != ($1 | 0) | $4 >>> 0 >= $2 >>> 0)) {
    $4 = $4 + 4 | 0;
    continue;
   }
   break;
  }
  std____2__enable_if__28__is_cpp17_forward_iterator_wchar_t____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_wchar_t____value_29_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_wchar_t___28wchar_t__2c_20wchar_t__29($6, $4, $3);
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0 + 440 | 0, $0 + 432 | 0)) {
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
 }
 $4 = HEAP32[$0 + 440 >> 2];
 std____2__locale___locale_28_29($0 + 16 | 0);
 std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
 $0 = $0 + 448 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $8 = global$0 - 16 | 0;
 $10 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $10;
 $9 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0);
 if ($9 + ($1 ^ -1) >>> 0 >= $2 >>> 0) {
  $11 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0);
  label$3 : {
   if (($9 >>> 1 | 0) + -16 >>> 0 > $1 >>> 0) {
    HEAP32[$8 + 8 >> 2] = $1 << 1;
    HEAP32[$8 + 12 >> 2] = $1 + $2;
    $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($8 + 12 | 0, $8 + 8 | 0) >> 2]);
    break label$3;
   }
   $2 = $9 + -1 | 0;
  }
  $10 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
  $9 = $2 + 1 | 0;
  $2 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($10, $9);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_all_iterators_28_29($0);
  if ($4) {
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($2), wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($11), $4);
  }
  if ($6) {
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($2) + ($4 << 2) | 0, $7, $6);
  }
  $3 = $3 - $5 | 0;
  $7 = $3 - $4 | 0;
  if ($7) {
   $10 = wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($2);
   $4 = $4 << 2;
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(($10 + $4 | 0) + ($6 << 2) | 0, (wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($11) + $4 | 0) + ($5 << 2) | 0, $7);
  }
  $1 = $1 + 1 | 0;
  if (($1 | 0) != 2) {
   std____2__allocator_traits_std____2__allocator_wchar_t__20___deallocate_28std____2__allocator_wchar_t___2c_20wchar_t__2c_20unsigned_20long_29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0), $11, $1);
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $2);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $9);
  $1 = $3 + $6 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $1);
  HEAP32[$8 + 4 >> 2] = 0;
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29(($1 << 2) + $2 | 0, $8 + 4 | 0);
  $0 = $8 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $1 = global$0 - 32 | 0;
 $6 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($1 + 16 | 0);
 $7 = std____2____narrow_to_utf8_32ul_____narrow_to_utf8_28_29($1 + 8 | 0);
 std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($7, std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2__back_inserter_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29($6), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___c_str_28_29_20const($5), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___c_str_28_29_20const($5) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($5) << 2) | 0);
 std____2__locale__facet___facet_28_29($7);
 $5 = catgets(($2 | 0) == -1 ? -1 : $2 << 1, $3, $4, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($6));
 $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0);
 $3 = std____2____widen_from_utf8_32ul_____widen_from_utf8_28_29($1 + 8 | 0);
 std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20std____2____widen_from_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20__28std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__2c_20char_20const__2c_20char_20const__29_20const($3, std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20std____2__back_inserter_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29($2), $5, strlen($5) + $5 | 0);
 std____2__locale__facet___facet_28_29($3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
 $0 = $1 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0;
 $9 = global$0 - 16 | 0;
 $8 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 $8 = $2;
 while (1) {
  label$3 : {
   if (($3 | 0) == ($8 | 0)) {
    $8 = $3;
    break label$3;
   }
   if (!HEAPU8[$8 | 0]) {
    break label$3;
   }
   $8 = $8 + 1 | 0;
   continue;
  }
  break;
 }
 HEAP32[$7 >> 2] = $5;
 HEAP32[$4 >> 2] = $2;
 while (1) {
  label$6 : {
   label$7 : {
    label$8 : {
     if (($5 | 0) == ($6 | 0) | ($2 | 0) == ($3 | 0)) {
      break label$8;
     }
     $10 = HEAP32[$1 + 4 >> 2];
     HEAP32[$9 + 8 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$9 + 12 >> 2] = $10;
     label$9 : {
      label$10 : {
       label$11 : {
        $10 = std____2____libcpp_mbsnrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $4, $8 - $2 | 0, $6 - $5 >> 2, $1, HEAP32[$0 + 8 >> 2]);
        label$12 : {
         if (($10 | 0) == -1) {
          while (1) {
           label$15 : {
            HEAP32[$7 >> 2] = $5;
            if (HEAP32[$4 >> 2] == ($2 | 0)) {
             break label$15;
            }
            label$16 : {
             $5 = std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, $8 - $2 | 0, $9 + 8 | 0, HEAP32[$0 + 8 >> 2]);
             $6 = $5 + 2 | 0;
             if ($6 >>> 0 > 2) {
              break label$16;
             }
             $5 = 1;
             label$17 : {
              switch ($6 - 1 | 0) {
              case 1:
               break label$16;
              case 0:
               break label$17;
              default:
               break label$10;
              }
             }
             HEAP32[$4 >> 2] = $2;
             break label$12;
            }
            $2 = $2 + $5 | 0;
            $5 = HEAP32[$7 >> 2] + 4 | 0;
            continue;
           }
           break;
          }
          HEAP32[$4 >> 2] = $2;
          break label$8;
         }
         $5 = HEAP32[$7 >> 2] + ($10 << 2) | 0;
         HEAP32[$7 >> 2] = $5;
         if (($5 | 0) == ($6 | 0)) {
          break label$9;
         }
         $2 = HEAP32[$4 >> 2];
         if (($3 | 0) == ($8 | 0)) {
          $8 = $3;
          continue;
         }
         if (!std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, 1, $1, HEAP32[$0 + 8 >> 2])) {
          break label$11;
         }
        }
        $8 = 2;
        break label$7;
       }
       HEAP32[$7 >> 2] = HEAP32[$7 >> 2] + 4;
       $2 = HEAP32[$4 >> 2] + 1 | 0;
       HEAP32[$4 >> 2] = $2;
       $8 = $2;
       while (1) {
        if (($3 | 0) == ($8 | 0)) {
         $8 = $3;
         break label$6;
        }
        if (!HEAPU8[$8 | 0]) {
         break label$6;
        }
        $8 = $8 + 1 | 0;
        continue;
       }
      }
      HEAP32[$4 >> 2] = $2;
      $8 = 1;
      break label$7;
     }
     $2 = HEAP32[$4 >> 2];
    }
    $8 = ($2 | 0) != ($3 | 0);
   }
   $0 = $9 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return $8 | 0;
  }
  $5 = HEAP32[$7 >> 2];
  continue;
 }
}
function std____2__utf8_to_ucs4_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 label$1 : {
  if (!($7 & 4)) {
   break label$1;
  }
  $7 = HEAP32[$2 >> 2];
  if (($1 - $7 | 0) < 3 | HEAPU8[$7 | 0] != 239 | (HEAPU8[$7 + 1 | 0] != 187 | HEAPU8[$7 + 2 | 0] != 191)) {
   break label$1;
  }
  HEAP32[$2 >> 2] = $7 + 3;
 }
 while (1) {
  $3 = HEAP32[$2 >> 2];
  if ($3 >>> 0 >= $1 >>> 0) {
   return 0;
  }
  $10 = 1;
  label$4 : {
   label$5 : {
    $11 = HEAP32[$5 >> 2];
    label$6 : {
     if ($11 >>> 0 >= $4 >>> 0) {
      break label$6;
     }
     $0 = HEAP8[$3 | 0];
     $7 = $0 & 255;
     if (($0 | 0) >= 0) {
      if ($7 >>> 0 > $6 >>> 0) {
       break label$4;
      }
      $0 = 1;
      break label$5;
     }
     if ($7 >>> 0 < 194) {
      break label$4;
     }
     if ($7 >>> 0 <= 223) {
      if (($1 - $3 | 0) < 2) {
       break label$6;
      }
      $10 = 2;
      $8 = HEAPU8[$3 + 1 | 0];
      if (($8 & 192) != 128) {
       break label$6;
      }
      $0 = 2;
      $7 = $8 & 63 | $7 << 6 & 1984;
      if ($7 >>> 0 <= $6 >>> 0) {
       break label$5;
      }
      break label$6;
     }
     label$9 : {
      if ($7 >>> 0 <= 239) {
       if (($1 - $3 | 0) < 3) {
        break label$6;
       }
       $9 = HEAPU8[$3 + 2 | 0];
       $8 = HEAPU8[$3 + 1 | 0];
       label$11 : {
        label$12 : {
         if (($7 | 0) != 237) {
          if (($7 | 0) != 224) {
           break label$12;
          }
          if (($8 & 224) == 160) {
           break label$11;
          }
          break label$4;
         }
         if (($8 & 224) == 128) {
          break label$11;
         }
         break label$4;
        }
        if (($8 & 192) != 128) {
         break label$4;
        }
       }
       if (($9 & 192) == 128) {
        break label$9;
       }
       break label$4;
      }
      if ($7 >>> 0 > 244) {
       break label$4;
      }
      if (($1 - $3 | 0) < 4) {
       break label$6;
      }
      $12 = HEAPU8[$3 + 3 | 0];
      $9 = HEAPU8[$3 + 2 | 0];
      $8 = HEAPU8[$3 + 1 | 0];
      label$14 : {
       label$15 : {
        $0 = $7 + -240 | 0;
        if ($0 >>> 0 > 4) {
         break label$15;
        }
        label$16 : {
         switch ($0 - 1 | 0) {
         default:
          if (($8 + 112 & 255) >>> 0 >= 48) {
           break label$4;
          }
          break label$14;
         case 0:
         case 1:
         case 2:
          break label$15;
         case 3:
          break label$16;
         }
        }
        if (($8 & 240) != 128) {
         break label$4;
        }
        break label$14;
       }
       if (($8 & 192) != 128) {
        break label$4;
       }
      }
      if (($9 & 192) != 128 | ($12 & 192) != 128) {
       break label$4;
      }
      $0 = 4;
      $10 = 2;
      $7 = $12 & 63 | ($9 << 6 & 4032 | ($7 << 18 & 1835008 | ($8 & 63) << 12));
      if ($7 >>> 0 > $6 >>> 0) {
       break label$6;
      }
      break label$5;
     }
     $0 = 3;
     $10 = 2;
     $7 = $9 & 63 | ($7 << 12 & 61440 | ($8 & 63) << 6);
     if ($7 >>> 0 <= $6 >>> 0) {
      break label$5;
     }
    }
    return $10;
   }
   HEAP32[$11 >> 2] = $7;
   HEAP32[$2 >> 2] = $0 + $3;
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
   continue;
  }
  break;
 }
 return 2;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____append_forward_unsafe_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0);
 $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0);
 $6 = std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_wchar_t___28wchar_t__2c_20wchar_t__29($1, $2);
 label$2 : {
  if (!$6) {
   break label$2;
  }
  if (bool_20std____2____ptr_in_range_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29(wchar_t__20std____2__addressof_wchar_t__28wchar_t__29($1), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29($0), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29($0) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0) << 2) | 0)) {
   $1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_wchar_t__2c_20void__28wchar_t__2c_20wchar_t__2c_20std____2__allocator_wchar_t__20const__29($4, $1, $2, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0));
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_28wchar_t_20const__2c_20unsigned_20long_29($0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($1), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($1));
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($1);
   break label$2;
  }
  if ($3 - $5 >>> 0 < $6 >>> 0) {
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $3, ($5 + $6 | 0) - $3 | 0, $5, $5, 0, 0);
  }
  $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0) + ($5 << 2) | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $1);
    $1 = $1 + 4 | 0;
    $3 = $3 + 4 | 0;
    continue;
   }
   break;
  }
  HEAP32[$4 >> 2] = 0;
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $4);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $5 + $6 | 0);
 }
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $8 = global$0 - 16 | 0;
 $10 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $10;
 $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0);
 if ($9 + ($1 ^ -1) >>> 0 >= $2 >>> 0) {
  $11 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0);
  label$3 : {
   if (($9 >>> 1 | 0) + -16 >>> 0 > $1 >>> 0) {
    HEAP32[$8 + 8 >> 2] = $1 << 1;
    HEAP32[$8 + 12 >> 2] = $1 + $2;
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($8 + 12 | 0, $8 + 8 | 0) >> 2]);
    break label$3;
   }
   $2 = $9 + -1 | 0;
  }
  $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
  $9 = $2 + 1 | 0;
  $2 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($10, $9);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_all_iterators_28_29($0);
  if ($4) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($2), char__20std____2____to_address_char__28char__29($11), $4);
  }
  if ($6) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($2) + $4 | 0, $7, $6);
  }
  $3 = $3 - $5 | 0;
  $7 = $3 - $4 | 0;
  if ($7) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29((char__20std____2____to_address_char__28char__29($2) + $4 | 0) + $6 | 0, (char__20std____2____to_address_char__28char__29($11) + $4 | 0) + $5 | 0, $7);
  }
  $4 = $1 + 1 | 0;
  if (($4 | 0) != 11) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), $11, $4);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $2);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $9);
  $4 = $3 + $6 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4);
  HEAP8[$8 + 7 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $4 | 0, $8 + 7 | 0);
  $0 = $8 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $9 = global$0 - 16 | 0;
 $8 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 $8 = $2;
 while (1) {
  label$3 : {
   if (($3 | 0) == ($8 | 0)) {
    $8 = $3;
    break label$3;
   }
   if (!HEAP32[$8 >> 2]) {
    break label$3;
   }
   $8 = $8 + 4 | 0;
   continue;
  }
  break;
 }
 HEAP32[$7 >> 2] = $5;
 HEAP32[$4 >> 2] = $2;
 $11 = 1;
 while (1) {
  label$6 : {
   label$7 : {
    if (!(($5 | 0) == ($6 | 0) | ($2 | 0) == ($3 | 0))) {
     $10 = HEAP32[$1 + 4 >> 2];
     HEAP32[$9 + 8 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$9 + 12 >> 2] = $10;
     label$9 : {
      label$10 : {
       $10 = std____2____libcpp_wcsnrtombs_l_28char__2c_20wchar_t_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $4, $8 - $2 >> 2, $6 - $5 | 0, $1, HEAP32[$0 + 8 >> 2]);
       $12 = $10 + 1 | 0;
       label$11 : {
        if ($12 >>> 0 <= 1) {
         if (!($12 - 1)) {
          break label$7;
         }
         HEAP32[$7 >> 2] = $5;
         while (1) {
          label$14 : {
           if (HEAP32[$4 >> 2] == ($2 | 0)) {
            break label$14;
           }
           $8 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5, HEAP32[$2 >> 2], $9 + 8 | 0, HEAP32[$0 + 8 >> 2]);
           if (($8 | 0) == -1) {
            break label$14;
           }
           $5 = HEAP32[$7 >> 2] + $8 | 0;
           HEAP32[$7 >> 2] = $5;
           $2 = $2 + 4 | 0;
           continue;
          }
          break;
         }
         HEAP32[$4 >> 2] = $2;
         break label$11;
        }
        $5 = HEAP32[$7 >> 2] + $10 | 0;
        HEAP32[$7 >> 2] = $5;
        if (($5 | 0) == ($6 | 0)) {
         break label$9;
        }
        if (($3 | 0) == ($8 | 0)) {
         $2 = HEAP32[$4 >> 2];
         $8 = $3;
         continue;
        }
        $8 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($9 + 4 | 0, 0, $1, HEAP32[$0 + 8 >> 2]);
        if (($8 | 0) != -1) {
         break label$10;
        }
       }
       $11 = 2;
       break label$7;
      }
      $5 = $9 + 4 | 0;
      if ($8 >>> 0 > $6 - HEAP32[$7 >> 2] >>> 0) {
       break label$7;
      }
      while (1) {
       if ($8) {
        $2 = HEAPU8[$5 | 0];
        $10 = HEAP32[$7 >> 2];
        HEAP32[$7 >> 2] = $10 + 1;
        HEAP8[$10 | 0] = $2;
        $8 = $8 + -1 | 0;
        $5 = $5 + 1 | 0;
        continue;
       }
       break;
      }
      $2 = HEAP32[$4 >> 2] + 4 | 0;
      HEAP32[$4 >> 2] = $2;
      $8 = $2;
      while (1) {
       if (($3 | 0) == ($8 | 0)) {
        $8 = $3;
        break label$6;
       }
       if (!HEAP32[$8 >> 2]) {
        break label$6;
       }
       $8 = $8 + 4 | 0;
       continue;
      }
     }
     $2 = HEAP32[$4 >> 2];
    }
    $11 = ($2 | 0) != ($3 | 0);
   }
   $0 = $9 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return $11 | 0;
  }
  $5 = HEAP32[$7 >> 2];
  continue;
 }
}
function std____2__utf16_to_utf8_28unsigned_20short_20const__2c_20unsigned_20short_20const__2c_20unsigned_20short_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 label$1 : {
  if ($7 & 2) {
   $0 = 1;
   if (($4 - $3 | 0) < 3) {
    break label$1;
   }
   HEAP32[$5 >> 2] = $3 + 1;
   HEAP8[$3 | 0] = 239;
   $3 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $3 + 1;
   HEAP8[$3 | 0] = 187;
   $3 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $3 + 1;
   HEAP8[$3 | 0] = 191;
  }
  $7 = HEAP32[$2 >> 2];
  label$3 : {
   while (1) {
    if ($7 >>> 0 >= $1 >>> 0) {
     $0 = 0;
     break label$1;
    }
    $0 = 2;
    $3 = HEAPU16[$7 >> 1];
    if ($3 >>> 0 > $6 >>> 0) {
     break label$1;
    }
    label$6 : {
     label$7 : {
      if ($3 >>> 0 <= 127) {
       $0 = 1;
       $7 = HEAP32[$5 >> 2];
       if (($4 - $7 | 0) < 1) {
        break label$1;
       }
       HEAP32[$5 >> 2] = $7 + 1;
       HEAP8[$7 | 0] = $3;
       break label$7;
      }
      if ($3 >>> 0 <= 2047) {
       $7 = HEAP32[$5 >> 2];
       if (($4 - $7 | 0) < 2) {
        break label$3;
       }
       HEAP32[$5 >> 2] = $7 + 1;
       HEAP8[$7 | 0] = $3 >>> 6 | 192;
       $7 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $7 + 1;
       HEAP8[$7 | 0] = $3 & 63 | 128;
       break label$7;
      }
      if ($3 >>> 0 <= 55295) {
       $7 = HEAP32[$5 >> 2];
       if (($4 - $7 | 0) < 3) {
        break label$3;
       }
       HEAP32[$5 >> 2] = $7 + 1;
       HEAP8[$7 | 0] = $3 >>> 12 | 224;
       $7 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $7 + 1;
       HEAP8[$7 | 0] = $3 >>> 6 & 63 | 128;
       $7 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $7 + 1;
       HEAP8[$7 | 0] = $3 & 63 | 128;
       break label$7;
      }
      if ($3 >>> 0 <= 56319) {
       $0 = 1;
       if (($1 - $7 | 0) < 4) {
        break label$1;
       }
       $8 = HEAPU16[$7 + 2 >> 1];
       if (($8 & 64512) != 56320) {
        break label$6;
       }
       if (($4 - HEAP32[$5 >> 2] | 0) < 4) {
        break label$1;
       }
       $0 = $3 & 960;
       if (($8 & 1023 | ($3 << 10 & 64512 | $0 << 10)) + 65536 >>> 0 > $6 >>> 0) {
        break label$6;
       }
       HEAP32[$2 >> 2] = $7 + 2;
       $7 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $7 + 1;
       $0 = ($0 >>> 6 | 0) + 1 | 0;
       HEAP8[$7 | 0] = $0 >>> 2 | 240;
       $7 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $7 + 1;
       HEAP8[$7 | 0] = $0 << 4 & 48 | $3 >>> 2 & 15 | 128;
       $7 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $7 + 1;
       HEAP8[$7 | 0] = $8 >>> 6 & 15 | $3 << 4 & 48 | 128;
       $3 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $8 & 63 | 128;
       break label$7;
      }
      if ($3 >>> 0 < 57344) {
       break label$1;
      }
      $7 = HEAP32[$5 >> 2];
      if (($4 - $7 | 0) < 3) {
       break label$3;
      }
      HEAP32[$5 >> 2] = $7 + 1;
      HEAP8[$7 | 0] = $3 >>> 12 | 224;
      $7 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $7 + 1;
      HEAP8[$7 | 0] = $3 >>> 6 & 63 | 128;
      $7 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $7 + 1;
      HEAP8[$7 | 0] = $3 & 63 | 128;
     }
     $7 = HEAP32[$2 >> 2] + 2 | 0;
     HEAP32[$2 >> 2] = $7;
     continue;
    }
    break;
   }
   return 2;
  }
  return 1;
 }
 return $0;
}
function __get_locale($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = global$0 - 272 | 0;
 $3 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 label$2 : {
  if (HEAPU8[$1 | 0]) {
   break label$2;
  }
  $1 = getenv(9152);
  if (HEAPU8[$1 | 0] ? $1 : 0) {
   break label$2;
  }
  $1 = getenv(Math_imul($0, 12) + 9168 | 0);
  if (HEAPU8[$1 | 0] ? $1 : 0) {
   break label$2;
  }
  $1 = getenv(9240);
  if (HEAPU8[$1 | 0] ? $1 : 0) {
   break label$2;
  }
  $1 = 9245;
 }
 label$6 : {
  while (1) {
   $4 = HEAPU8[$1 + $2 | 0];
   if (!(!$4 | ($4 | 0) == 47)) {
    $4 = 15;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != 15) {
     continue;
    }
    break label$6;
   }
   break;
  }
  $4 = $2;
 }
 $3 = 9245;
 label$9 : {
  label$10 : {
   $2 = HEAPU8[$1 | 0];
   label$11 : {
    label$12 : {
     if (!(HEAPU8[$1 + $4 | 0] | ($2 | 0) == 46)) {
      $3 = $1;
      if (($2 | 0) != 67) {
       break label$12;
      }
     }
     if (!HEAPU8[$3 + 1 | 0]) {
      break label$11;
     }
    }
    if (!strcmp($3, 9245)) {
     break label$11;
    }
    if (strcmp($3, 9253)) {
     break label$10;
    }
   }
   if (!$0) {
    $2 = 9076;
    if (HEAPU8[$3 + 1 | 0] == 46) {
     break label$9;
    }
   }
   $2 = 0;
   break label$9;
  }
  $2 = HEAP32[6309];
  if ($2) {
   while (1) {
    if (!strcmp($3, $2 + 8 | 0)) {
     break label$9;
    }
    $2 = HEAP32[$2 + 24 >> 2];
    if ($2) {
     continue;
    }
    break;
   }
  }
  __lock(25228);
  $2 = HEAP32[6309];
  if ($2) {
   while (1) {
    if (!strcmp($3, $2 + 8 | 0)) {
     __unlock(25228);
     break label$9;
    }
    $2 = HEAP32[$2 + 24 >> 2];
    if ($2) {
     continue;
    }
    break;
   }
  }
  label$20 : {
   label$21 : {
    label$22 : {
     if (HEAP32[6291]) {
      break label$22;
     }
     $2 = getenv(9259);
     if (!$2 | !HEAPU8[$2 | 0]) {
      break label$22;
     }
     $9 = $4 + 1 | 0;
     $10 = 254 - $4 | 0;
     while (1) {
      $1 = __strchrnul($2, 58);
      $7 = HEAPU8[$1 | 0];
      $6 = ($1 - $2 | 0) - (($7 | 0) != 0) | 0;
      if ($6 >>> 0 < $10 >>> 0) {
       memcpy($5 + 16 | 0, $2, $6);
       $2 = ($5 + 16 | 0) + $6 | 0;
       HEAP8[$2 | 0] = 47;
       memcpy($2 + 1 | 0, $3, $4);
       HEAP8[$5 + 16 + ($6 + $9) | 0] = 0;
       $2 = __map_file($5 + 16 | 0, $5 + 12 | 0) | 0;
       if ($2) {
        $1 = dlmalloc(28);
        if ($1) {
         break label$21;
        }
        __munmap($2, HEAP32[$5 + 12 >> 2]);
        break label$22;
       }
       $7 = HEAPU8[$1 | 0];
      }
      $2 = (($7 | 0) != 0) + $1 | 0;
      if (HEAPU8[$2 | 0]) {
       continue;
      }
      break;
     }
    }
    $2 = dlmalloc(28);
    if (!$2) {
     break label$20;
    }
    $1 = HEAP32[2270];
    HEAP32[$2 >> 2] = HEAP32[2269];
    HEAP32[$2 + 4 >> 2] = $1;
    $1 = $2 + 8 | 0;
    memcpy($1, $3, $4);
    HEAP8[$1 + $4 | 0] = 0;
    HEAP32[$2 + 24 >> 2] = HEAP32[6309];
    HEAP32[6309] = $2;
    $8 = $2;
    break label$20;
   }
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = HEAP32[$5 + 12 >> 2];
   $2 = $1 + 8 | 0;
   memcpy($2, $3, $4);
   HEAP8[$2 + $4 | 0] = 0;
   HEAP32[$1 + 24 >> 2] = HEAP32[6309];
   HEAP32[6309] = $1;
   $8 = $1;
  }
  __unlock(25228);
  $2 = $0 | $8 ? $8 : 9076;
 }
 $0 = $5 + 272 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function std____2__DoIOSInit__DoIOSInit_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[2070];
 std____2____stdinbuf_char_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29(24796, $1, 24852);
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20___basic_istream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(24112, 24796);
 std____2____stdinbuf_wchar_t_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29(24860, $1, 24916);
 std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_istream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(24200, 24860);
 $1 = HEAP32[2071];
 std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(24924, $1, 24972);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(24288, 24924);
 std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(24980, $1, 25028);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(24372, 24980);
 $1 = HEAP32[2072];
 std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(25036, $1, 25084);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(24456, 25036);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(24624, std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(HEAP32[HEAP32[6114] + -12 >> 2] + 24456 | 0));
 std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(25092, $1, 25140);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(24540, 25092);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(24708, std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const(HEAP32[HEAP32[6135] + -12 >> 2] + 24540 | 0));
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(HEAP32[HEAP32[6028] + -12 >> 2] + 24112 | 0, 24288);
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(HEAP32[HEAP32[6050] + -12 >> 2] + 24200 | 0, 24372);
 std____2__unitbuf_28std____2__ios_base__29(HEAP32[HEAP32[6114] + -12 >> 2] + 24456 | 0);
 std____2__unitbuf_28std____2__ios_base__29(HEAP32[HEAP32[6135] + -12 >> 2] + 24540 | 0);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(HEAP32[HEAP32[6114] + -12 >> 2] + 24456 | 0, 24288);
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(HEAP32[HEAP32[6135] + -12 >> 2] + 24540 | 0, 24372);
 return $0;
}
function std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $10 = global$0 - 16 | 0;
 $9 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 $11 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 $6 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($6);
 std____2__numpunct_wchar_t___grouping_28_29_20const($10, $6);
 label$2 : {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($10)) {
   std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($11, $0, $2, $3);
   $6 = ($2 - $0 << 2) + $3 | 0;
   HEAP32[$5 >> 2] = $6;
   break label$2;
  }
  HEAP32[$5 >> 2] = $3;
  $9 = $0;
  $7 = HEAPU8[$9 | 0];
  $8 = $7 + -43 | 0;
  if (!($8 >>> 0 > 2 | !($8 - 1))) {
   $8 = std____2__ctype_wchar_t___widen_28char_29_20const($11, $7 << 24 >> 24);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 4;
   HEAP32[$7 >> 2] = $8;
   $9 = $0 + 1 | 0;
  }
  if (!(HEAPU8[$9 | 0] != 48 | ($2 - $9 | 0) < 2 | (HEAPU8[$9 + 1 | 0] | 32) != 120)) {
   $8 = std____2__ctype_wchar_t___widen_28char_29_20const($11, 48);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 4;
   HEAP32[$7 >> 2] = $8;
   $8 = std____2__ctype_wchar_t___widen_28char_29_20const($11, HEAP8[$9 + 1 | 0]);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 4;
   HEAP32[$7 >> 2] = $8;
   $9 = $9 + 2 | 0;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($9, $2);
  $8 = 0;
  $13 = std____2__numpunct_wchar_t___thousands_sep_28_29_20const($6);
  $7 = 0;
  $6 = $9;
  while (1) {
   if ($6 >>> 0 >= $2 >>> 0) {
    void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29(($9 - $0 << 2) + $3 | 0, HEAP32[$5 >> 2]);
    $6 = HEAP32[$5 >> 2];
    break label$2;
   }
   label$8 : {
    if (!HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $7) | 0]) {
     break label$8;
    }
    if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $7) | 0] != ($8 | 0)) {
     break label$8;
    }
    $8 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $8 + 4;
    HEAP32[$8 >> 2] = $13;
    $7 = ($7 >>> 0 < std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) + -1 >>> 0) + $7 | 0;
    $8 = 0;
   }
   $14 = std____2__ctype_wchar_t___widen_28char_29_20const($11, HEAP8[$6 | 0]);
   $12 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $12 + 4;
   HEAP32[$12 >> 2] = $14;
   $6 = $6 + 1 | 0;
   $8 = $8 + 1 | 0;
   continue;
  }
 }
 HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 << 2) + $3 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
 $0 = $10 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0, $13 = 0;
 $12 = global$0 - 16 | 0;
 $13 = $12;
 if ($12 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $13;
 HEAP32[$12 + 12 >> 2] = $0;
 label$2 : {
  label$3 : {
   if (($0 | 0) == ($5 | 0)) {
    if (!HEAPU8[$1 | 0]) {
     break label$3;
    }
    $0 = 0;
    HEAP8[$1 | 0] = 0;
    $11 = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $11 + 1;
    HEAP8[$11 | 0] = 46;
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$2;
    }
    $11 = HEAP32[$9 >> 2];
    if (($11 - $8 | 0) > 159) {
     break label$2;
    }
    $5 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $11 + 4;
    HEAP32[$11 >> 2] = $5;
    break label$2;
   }
   label$5 : {
    if (($0 | 0) != ($6 | 0)) {
     break label$5;
    }
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$5;
    }
    if (!HEAPU8[$1 | 0]) {
     break label$3;
    }
    $0 = 0;
    $11 = HEAP32[$9 >> 2];
    if (($11 - $8 | 0) > 159) {
     break label$2;
    }
    $0 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $11 + 4;
    HEAP32[$11 >> 2] = $0;
    $0 = 0;
    HEAP32[$10 >> 2] = 0;
    break label$2;
   }
   $0 = -1;
   $11 = wchar_t__20std____2__find_wchar_t__2c_20wchar_t__28wchar_t__2c_20wchar_t__2c_20wchar_t_20const__29($11, $11 + 128 | 0, $12 + 12 | 0) - $11 | 0;
   if (($11 | 0) > 124) {
    break label$2;
   }
   $5 = HEAPU8[($11 >> 2) + 13840 | 0];
   $0 = __wasm_rotl_i32($11 + -88 | 0, 30);
   label$6 : {
    if ($0 >>> 0 <= 3) {
     label$8 : {
      switch ($0 - 2 | 0) {
      case 0:
      case 1:
       $11 = HEAP32[$4 >> 2];
       if (($11 | 0) != ($3 | 0)) {
        $0 = -1;
        if ((HEAPU8[$11 + -1 | 0] & 95) != (HEAPU8[$2 | 0] & 127)) {
         break label$2;
        }
       }
       HEAP32[$4 >> 2] = $11 + 1;
       HEAP8[$11 | 0] = $5;
       $0 = 0;
       break label$2;
      default:
       break label$8;
      }
     }
     HEAP8[$2 | 0] = 80;
     break label$6;
    }
    $0 = HEAP8[$2 | 0];
    if (($0 | 0) != ($5 & 95)) {
     break label$6;
    }
    HEAP8[$2 | 0] = $0 | 128;
    if (!HEAPU8[$1 | 0]) {
     break label$6;
    }
    HEAP8[$1 | 0] = 0;
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$6;
    }
    $0 = HEAP32[$9 >> 2];
    if (($0 - $8 | 0) > 159) {
     break label$6;
    }
    $1 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $0 + 4;
    HEAP32[$0 >> 2] = $1;
   }
   $0 = HEAP32[$4 >> 2];
   HEAP32[$4 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = $5;
   $0 = 0;
   if (($11 | 0) > 84) {
    break label$2;
   }
   HEAP32[$10 >> 2] = HEAP32[$10 >> 2] + 1;
   break label$2;
  }
  $0 = -1;
 }
 $1 = $12 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP8[$0 | 0] = 0;
 $5 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0);
 $4 = HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0;
 label$2 : {
  if ($5) {
   if (std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28_29_20const($4)) {
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0));
   }
   label$5 : {
    if ($2) {
     break label$5;
    }
    if (!(std____2__ios_base__flags_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) & 4096)) {
     break label$5;
    }
    std____2__ios_base__getloc_28_29_20const($3 + 24 | 0, HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0);
    $2 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($3 + 24 | 0);
    std____2__locale___locale_28_29($3 + 24 | 0);
    $5 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___istreambuf_iterator_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___29($3 + 16 | 0, $1);
    $4 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___istreambuf_iterator_28_29($3 + 8 | 0);
    while (1) {
     label$7 : {
      if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($5, $4)) {
       break label$7;
      }
      if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($2, 8192, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($5))) {
       break label$7;
      }
      std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($5);
      continue;
     }
     break;
    }
    if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($5, $4)) {
     break label$5;
    }
    std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0, 6);
   }
   wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   break label$2;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29($4, 4);
 }
 $1 = $3 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function neopt__jhelper__ParseNumber_28neopt__ITextReader__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = global$0 - 160 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 while (1) {
  label$3 : {
   label$4 : {
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 32) {
     break label$4;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 9) {
     break label$4;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 13) {
     break label$4;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) != 10) {
     break label$3;
    }
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
   continue;
  }
  break;
 }
 HEAP32[$2 + 80 >> 2] = 2532;
 HEAP32[$2 + 16 >> 2] = 2512;
 HEAP32[$2 + 24 >> 2] = 2372;
 HEAP32[$2 + 20 >> 2] = 0;
 $5 = $2 + 80 | 0;
 $4 = $2 + 28 | 0;
 std____2__ios_base__init_28void__29($5, $4);
 HEAP32[$2 + 152 >> 2] = 0;
 HEAP32[$2 + 156 >> 2] = -1;
 HEAP32[$2 + 80 >> 2] = 2392;
 HEAP32[$2 + 16 >> 2] = 2352;
 HEAP32[$2 + 24 >> 2] = 2372;
 $6 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($4);
 HEAP32[$2 + 60 >> 2] = 0;
 HEAP32[$2 + 64 >> 2] = 0;
 HEAP32[$2 + 68 >> 2] = 0;
 HEAP32[$2 + 72 >> 2] = 0;
 HEAP32[$2 + 76 >> 2] = 24;
 HEAP32[$2 + 28 >> 2] = 2672;
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 if (!(($3 + -45 & 255) >>> 0 > 1 ? ($3 + -48 & 255) >>> 0 >= 10 : 0)) {
  $7 = $2 + 24 | 0;
  while (1) {
   HEAP8[$2 | 0] = $3;
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($7, $2, 1);
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   if (($3 + -48 & 255) >>> 0 < 10 | ($3 + -45 & 255) >>> 0 < 2) {
    continue;
   }
   break;
  }
 }
 std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($2, $4);
 $1 = operator_20new_28unsigned_20long_29(24);
 $8 = std____2__stod_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long__29($2, 0);
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = $1 + 8;
 HEAPF64[$1 + 16 >> 3] = $8;
 HEAP32[$1 >> 2] = 4328;
 HEAP32[$0 >> 2] = $1;
 if (HEAP8[$2 + 11 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 >> 2]);
 }
 HEAP32[$2 + 80 >> 2] = 2392;
 HEAP32[$2 + 16 >> 2] = 2352;
 HEAP32[$2 + 28 >> 2] = 2672;
 HEAP32[$2 + 24 >> 2] = 2372;
 if (HEAP8[$2 + 71 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 + 60 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($6);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($2 + 16 | 0, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($5);
 $0 = $2 + 160 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $10 = global$0 - 16 | 0;
 $9 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 $11 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 $6 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($6);
 std____2__numpunct_char___grouping_28_29_20const($10, $6);
 label$2 : {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($10)) {
   std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($11, $0, $2, $3);
   $6 = ($2 - $0 | 0) + $3 | 0;
   HEAP32[$5 >> 2] = $6;
   break label$2;
  }
  HEAP32[$5 >> 2] = $3;
  $9 = $0;
  $7 = HEAPU8[$9 | 0];
  $8 = $7 + -43 | 0;
  if (!($8 >>> 0 > 2 | !($8 - 1))) {
   $8 = std____2__ctype_char___widen_28char_29_20const($11, $7 << 24 >> 24);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 1;
   HEAP8[$7 | 0] = $8;
   $9 = $0 + 1 | 0;
  }
  if (!(HEAPU8[$9 | 0] != 48 | ($2 - $9 | 0) < 2 | (HEAPU8[$9 + 1 | 0] | 32) != 120)) {
   $8 = std____2__ctype_char___widen_28char_29_20const($11, 48);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 1;
   HEAP8[$7 | 0] = $8;
   $8 = std____2__ctype_char___widen_28char_29_20const($11, HEAP8[$9 + 1 | 0]);
   $7 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $7 + 1;
   HEAP8[$7 | 0] = $8;
   $9 = $9 + 2 | 0;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($9, $2);
  $8 = 0;
  $13 = std____2__numpunct_char___thousands_sep_28_29_20const($6);
  $7 = 0;
  $6 = $9;
  while (1) {
   if ($6 >>> 0 >= $2 >>> 0) {
    void_20std____2__reverse_char___28char__2c_20char__29(($9 - $0 | 0) + $3 | 0, HEAP32[$5 >> 2]);
    $6 = HEAP32[$5 >> 2];
    break label$2;
   }
   label$8 : {
    if (!HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $7) | 0]) {
     break label$8;
    }
    if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($10, $7) | 0] != ($8 | 0)) {
     break label$8;
    }
    $8 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $8 + 1;
    HEAP8[$8 | 0] = $13;
    $7 = ($7 >>> 0 < std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) + -1 >>> 0) + $7 | 0;
    $8 = 0;
   }
   $14 = std____2__ctype_char___widen_28char_29_20const($11, HEAP8[$6 | 0]);
   $12 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $12 + 1;
   HEAP8[$12 | 0] = $14;
   $6 = $6 + 1 | 0;
   $8 = $8 + 1 | 0;
   continue;
  }
 }
 HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 | 0) + $3 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
 $0 = $10 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____append_forward_unsafe_char___28char__2c_20char__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 32 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
 $6 = std____2__iterator_traits_char____difference_type_20std____2__distance_char___28char__2c_20char__29($1, $2);
 label$2 : {
  if (!$6) {
   break label$2;
  }
  if (bool_20std____2____ptr_in_range_char__28char_20const__2c_20char_20const__2c_20char_20const__29(char__20std____2__addressof_char__28char__29($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29($0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0)) {
   $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char__2c_20void__28char__2c_20char__2c_20std____2__allocator_char__20const__29($4 + 16 | 0, $1, $2, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0));
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1));
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
   break label$2;
  }
  if ($3 - $5 >>> 0 < $6 >>> 0) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $3, ($5 + $6 | 0) - $3 | 0, $5, $5, 0, 0);
  }
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0) + $5 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $1);
    $1 = $1 + 1 | 0;
    $3 = $3 + 1 | 0;
    continue;
   }
   break;
  }
  HEAP8[$4 + 15 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $4 + 15 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $5 + $6 | 0);
 }
 $1 = $4 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0, $13 = 0;
 $12 = global$0 - 16 | 0;
 $13 = $12;
 if ($12 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $13;
 HEAP8[$12 + 15 | 0] = $0;
 label$2 : {
  label$3 : {
   if (($0 | 0) == ($5 | 0)) {
    if (!HEAPU8[$1 | 0]) {
     break label$3;
    }
    $0 = 0;
    HEAP8[$1 | 0] = 0;
    $11 = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $11 + 1;
    HEAP8[$11 | 0] = 46;
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$2;
    }
    $11 = HEAP32[$9 >> 2];
    if (($11 - $8 | 0) > 159) {
     break label$2;
    }
    $5 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $11 + 4;
    HEAP32[$11 >> 2] = $5;
    break label$2;
   }
   label$5 : {
    if (($0 | 0) != ($6 | 0)) {
     break label$5;
    }
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$5;
    }
    if (!HEAPU8[$1 | 0]) {
     break label$3;
    }
    $0 = 0;
    $11 = HEAP32[$9 >> 2];
    if (($11 - $8 | 0) > 159) {
     break label$2;
    }
    $0 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $11 + 4;
    HEAP32[$11 >> 2] = $0;
    $0 = 0;
    HEAP32[$10 >> 2] = 0;
    break label$2;
   }
   $0 = -1;
   $11 = char__20std____2__find_char__2c_20char__28char__2c_20char__2c_20char_20const__29($11, $11 + 32 | 0, $12 + 15 | 0) - $11 | 0;
   if (($11 | 0) > 31) {
    break label$2;
   }
   $5 = HEAPU8[$11 + 13840 | 0];
   $0 = $11 + -22 | 0;
   label$6 : {
    if ($0 >>> 0 <= 3) {
     label$8 : {
      switch ($0 - 2 | 0) {
      case 0:
      case 1:
       $11 = HEAP32[$4 >> 2];
       if (($11 | 0) != ($3 | 0)) {
        $0 = -1;
        if ((HEAPU8[$11 + -1 | 0] & 95) != (HEAPU8[$2 | 0] & 127)) {
         break label$2;
        }
       }
       HEAP32[$4 >> 2] = $11 + 1;
       HEAP8[$11 | 0] = $5;
       $0 = 0;
       break label$2;
      default:
       break label$8;
      }
     }
     HEAP8[$2 | 0] = 80;
     break label$6;
    }
    $0 = HEAP8[$2 | 0];
    if (($0 | 0) != ($5 & 95)) {
     break label$6;
    }
    HEAP8[$2 | 0] = $0 | 128;
    if (!HEAPU8[$1 | 0]) {
     break label$6;
    }
    HEAP8[$1 | 0] = 0;
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
     break label$6;
    }
    $0 = HEAP32[$9 >> 2];
    if (($0 - $8 | 0) > 159) {
     break label$6;
    }
    $1 = HEAP32[$10 >> 2];
    HEAP32[$9 >> 2] = $0 + 4;
    HEAP32[$0 >> 2] = $1;
   }
   $0 = HEAP32[$4 >> 2];
   HEAP32[$4 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = $5;
   $0 = 0;
   if (($11 | 0) > 21) {
    break label$2;
   }
   HEAP32[$10 >> 2] = HEAP32[$10 >> 2] + 1;
   break label$2;
  }
  $0 = -1;
 }
 $1 = $12 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $1 = global$0 - 32 | 0;
 $6 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $7 = $1 + 8 | 0;
 $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($1 + 16 | 0);
 std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_8ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char_20const__2c_20char_20const__29_20const($7, std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2__back_inserter_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29($6), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($5), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($5) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) | 0);
 $5 = catgets(($2 | 0) == -1 ? -1 : $2 << 1, $3, $4, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($6));
 std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____widen_from_utf8_8ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char_20const__2c_20char_20const__29_20const($1, std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2__back_inserter_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0)), $5, strlen($5) + $5 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
 $0 = $1 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function Neo__Cryptography__ECC__ECCurve__ECCurve_28Neo__Cryptography__ECC__ECCurve_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     $2 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0;
     if ($2) {
      if (($2 | 0) <= -1) {
       break label$4;
      }
      $3 = operator_20new_28unsigned_20long_29($2);
      HEAP32[$0 >> 2] = $3;
      HEAP32[$0 + 4 >> 2] = $3;
      HEAP32[$0 + 8 >> 2] = $2 + $3;
      $4 = HEAP32[$1 >> 2];
      $2 = HEAP32[$1 + 4 >> 2] - $4 | 0;
      if (($2 | 0) >= 1) {
       $3 = memcpy($3, $4, $2) + $2 | 0;
      }
      HEAP32[$0 + 4 >> 2] = $3;
     }
     $2 = HEAP32[$1 + 12 >> 2];
     $3 = operator_20new_28unsigned_20long_29(12);
     HEAP32[$3 + 8 >> 2] = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $5 = HEAP32[$2 >> 2];
     $2 = HEAP32[$2 + 4 >> 2] - $5 | 0;
     if ($2) {
      if (($2 | 0) <= -1) {
       break label$3;
      }
      $4 = operator_20new_28unsigned_20long_29($2);
      HEAP32[$3 >> 2] = $4;
      HEAP32[$3 + 4 >> 2] = $4;
      $6 = $2 + $4 | 0;
      HEAP32[$3 + 8 >> 2] = $6;
      memcpy($4, $5, $2);
      HEAP32[$3 + 4 >> 2] = $6;
     }
     HEAP32[$0 + 12 >> 2] = $3;
     $2 = HEAP32[$1 + 16 >> 2];
     $3 = operator_20new_28unsigned_20long_29(12);
     HEAP32[$3 + 8 >> 2] = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $5 = HEAP32[$2 >> 2];
     $2 = HEAP32[$2 + 4 >> 2] - $5 | 0;
     if ($2) {
      if (($2 | 0) <= -1) {
       break label$2;
      }
      $4 = operator_20new_28unsigned_20long_29($2);
      HEAP32[$3 >> 2] = $4;
      HEAP32[$3 + 4 >> 2] = $4;
      $6 = $2 + $4 | 0;
      HEAP32[$3 + 8 >> 2] = $6;
      memcpy($4, $5, $2);
      HEAP32[$3 + 4 >> 2] = $6;
     }
     HEAP32[$0 + 20 >> 2] = 0;
     HEAP32[$0 + 24 >> 2] = 0;
     HEAP32[$0 + 16 >> 2] = $3;
     HEAP32[$0 + 28 >> 2] = 0;
     $2 = HEAP32[$1 + 24 >> 2] - HEAP32[$1 + 20 >> 2] | 0;
     if ($2) {
      if (($2 | 0) <= -1) {
       break label$1;
      }
      $3 = operator_20new_28unsigned_20long_29($2);
      HEAP32[$0 + 20 >> 2] = $3;
      HEAP32[$0 + 24 >> 2] = $3;
      HEAP32[$0 + 28 >> 2] = $2 + $3;
      $4 = HEAP32[$1 + 20 >> 2];
      $2 = HEAP32[$1 + 24 >> 2] - $4 | 0;
      if (($2 | 0) >= 1) {
       $3 = memcpy($3, $4, $2) + $2 | 0;
      }
      HEAP32[$0 + 24 >> 2] = $3;
     }
     unique_ref__ucref_Neo__Cryptography__ECC__ECPoint___ucref_28unique_ref__ucref_Neo__Cryptography__ECC__ECPoint__20const__29($0 + 32 | 0, $1 + 32 | 0);
     unique_ref__ucref_Neo__Cryptography__ECC__ECPoint___ucref_28unique_ref__ucref_Neo__Cryptography__ECC__ECPoint__20const__29($0 + 36 | 0, $1 + 36 | 0);
     HEAP32[$0 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
     return $0;
    }
    std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
    abort();
   }
   std____2____vector_base_common_true_____throw_length_error_28_29_20const($3);
   abort();
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($3);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($0 + 20 | 0);
 abort();
}
function Neo__Cryptography__ECC__ECCurve__ECCurve_28Neo__Cryptography__ECC__ECCurve___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     $2 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0;
     if ($2) {
      if (($2 | 0) <= -1) {
       break label$4;
      }
      $3 = operator_20new_28unsigned_20long_29($2);
      HEAP32[$0 >> 2] = $3;
      HEAP32[$0 + 4 >> 2] = $3;
      HEAP32[$0 + 8 >> 2] = $2 + $3;
      $4 = HEAP32[$1 >> 2];
      $2 = HEAP32[$1 + 4 >> 2] - $4 | 0;
      if (($2 | 0) >= 1) {
       $3 = memcpy($3, $4, $2) + $2 | 0;
      }
      HEAP32[$0 + 4 >> 2] = $3;
     }
     $2 = HEAP32[$1 + 12 >> 2];
     $3 = operator_20new_28unsigned_20long_29(12);
     HEAP32[$3 + 8 >> 2] = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $5 = HEAP32[$2 >> 2];
     $2 = HEAP32[$2 + 4 >> 2] - $5 | 0;
     if ($2) {
      if (($2 | 0) <= -1) {
       break label$3;
      }
      $4 = operator_20new_28unsigned_20long_29($2);
      HEAP32[$3 >> 2] = $4;
      HEAP32[$3 + 4 >> 2] = $4;
      $6 = $2 + $4 | 0;
      HEAP32[$3 + 8 >> 2] = $6;
      memcpy($4, $5, $2);
      HEAP32[$3 + 4 >> 2] = $6;
     }
     HEAP32[$0 + 12 >> 2] = $3;
     $2 = HEAP32[$1 + 16 >> 2];
     $3 = operator_20new_28unsigned_20long_29(12);
     HEAP32[$3 + 8 >> 2] = 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $5 = HEAP32[$2 >> 2];
     $2 = HEAP32[$2 + 4 >> 2] - $5 | 0;
     if ($2) {
      if (($2 | 0) <= -1) {
       break label$2;
      }
      $4 = operator_20new_28unsigned_20long_29($2);
      HEAP32[$3 >> 2] = $4;
      HEAP32[$3 + 4 >> 2] = $4;
      $6 = $2 + $4 | 0;
      HEAP32[$3 + 8 >> 2] = $6;
      memcpy($4, $5, $2);
      HEAP32[$3 + 4 >> 2] = $6;
     }
     HEAP32[$0 + 20 >> 2] = 0;
     HEAP32[$0 + 24 >> 2] = 0;
     HEAP32[$0 + 16 >> 2] = $3;
     HEAP32[$0 + 28 >> 2] = 0;
     $2 = HEAP32[$1 + 24 >> 2] - HEAP32[$1 + 20 >> 2] | 0;
     if ($2) {
      if (($2 | 0) <= -1) {
       break label$1;
      }
      $3 = operator_20new_28unsigned_20long_29($2);
      HEAP32[$0 + 20 >> 2] = $3;
      HEAP32[$0 + 24 >> 2] = $3;
      HEAP32[$0 + 28 >> 2] = $2 + $3;
      $4 = HEAP32[$1 + 20 >> 2];
      $2 = HEAP32[$1 + 24 >> 2] - $4 | 0;
      if (($2 | 0) >= 1) {
       $3 = memcpy($3, $4, $2) + $2 | 0;
      }
      HEAP32[$0 + 24 >> 2] = $3;
     }
     unique_ref__ucref_Neo__Cryptography__ECC__ECPoint___ucref_28unique_ref__ucref_Neo__Cryptography__ECC__ECPoint__20const___29($0 + 32 | 0, $1 + 32 | 0);
     unique_ref__ucref_Neo__Cryptography__ECC__ECPoint___ucref_28unique_ref__ucref_Neo__Cryptography__ECC__ECPoint__20const___29($0 + 36 | 0, $1 + 36 | 0);
     HEAP32[$0 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
     return $0;
    }
    std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
    abort();
   }
   std____2____vector_base_common_true_____throw_length_error_28_29_20const($3);
   abort();
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($3);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($0 + 20 | 0);
 abort();
}
function __trunctfsf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $12 = global$0 - 32 | 0;
 $4 = $12;
 if ($12 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $8 = $2;
 $4 = $3 & 2147483647;
 $10 = $4;
 $7 = $4 + -1065418752 | 0;
 $5 = $8;
 if ($5 >>> 0 < 0) {
  $7 = $7 + 1 | 0;
 }
 $11 = $5;
 $13 = $7;
 $7 = $10;
 $5 = $7 + -1082064896 | 0;
 $4 = $8;
 $6 = $4;
 if ($4 >>> 0 < 0) {
  $5 = $5 + 1 | 0;
 }
 $4 = $5;
 $5 = $13;
 $7 = $11;
 label$2 : {
  if (($4 | 0) == ($5 | 0) & $7 >>> 0 < $6 >>> 0 | $5 >>> 0 < $4 >>> 0) {
   $7 = $3;
   $6 = $2;
   $9 = ($7 & 33554431) << 7 | $6 >>> 25;
   $6 = 0;
   $10 = $6;
   $5 = $1;
   $11 = !($5 | $0);
   $7 = $2;
   $8 = $7 & 33554431;
   $5 = $8;
   $7 = !$6 & $5 >>> 0 < 16777216 | $6 >>> 0 < 0;
   $5 = $6;
   $4 = $8;
   if (!(!$5 & ($4 | 0) == 16777216 ? $11 : $7)) {
    $9 = $9 + 1073741825 | 0;
    break label$2;
   }
   $9 = $9 + 1073741824 | 0;
   $7 = $8;
   $6 = $7 ^ 16777216;
   $5 = $1;
   $4 = $10;
   $7 = $5 | $4;
   $4 = $0;
   $5 = $6 | $4;
   if ($5 | $7) {
    break label$2;
   }
   $9 = ($9 & 1) + $9 | 0;
   break label$2;
  }
  $5 = $1;
  $7 = !($5 | $0);
  $5 = $10;
  $6 = $8;
  $11 = ($5 | 0) == 2147418112 & $6 >>> 0 < 0 | $5 >>> 0 < 2147418112;
  $6 = $5;
  $4 = $8;
  if (!(!$4 & ($6 | 0) == 2147418112 ? $7 : $11)) {
   $4 = $3;
   $7 = $2;
   $9 = (($4 & 33554431) << 7 | $7 >>> 25) & 4194303 | 2143289344;
   break label$2;
  }
  $9 = 2139095040;
  if (($10 | 0) == 1082064895 & $8 >>> 0 > 4294967295 | $6 >>> 0 > 1082064895) {
   break label$2;
  }
  $9 = 0;
  $4 = $10;
  $7 = $4 >>> 16 | 0;
  if ($7 >>> 0 < 16145) {
   break label$2;
  }
  $6 = $3;
  $5 = $6 & 65535;
  $4 = $2;
  $8 = $4;
  $4 = $5 | 65536;
  $10 = $4;
  $4 = $1;
  $6 = $10;
  __ashlti3($12 + 16 | 0, $0, $4, $8, $6, $7 + -16129 | 0);
  $6 = $4;
  $4 = $10;
  __lshrti3($12, $0, $6, $8, $4, 16257 - $7 | 0);
  $5 = $12;
  $4 = HEAP32[$5 + 8 >> 2];
  $8 = $4;
  $6 = HEAP32[$5 + 12 >> 2];
  $10 = $6;
  $5 = $8;
  $9 = ($6 & 33554431) << 7 | $5 >>> 25;
  $6 = $12;
  $4 = HEAP32[$6 >> 2];
  $0 = $4;
  $5 = HEAP32[$6 + 4 >> 2];
  $1 = $5;
  $5 = HEAP32[$6 + 16 >> 2];
  $7 = $5;
  $4 = HEAP32[$6 + 20 >> 2];
  $11 = $4;
  $4 = HEAP32[$6 + 24 >> 2];
  $13 = $4;
  $5 = HEAP32[$6 + 28 >> 2];
  $4 = $5;
  $5 = $11;
  $4 = $4 | $5;
  $6 = $7;
  $7 = $13;
  $5 = $6 | $7;
  $6 = ($5 | 0) != 0 | ($4 | 0) != 0;
  $5 = $1;
  $4 = $5;
  $1 = $4;
  $7 = $0;
  $0 = $6 | $7;
  $11 = !($4 | $0);
  $5 = $8;
  $8 = $5 & 33554431;
  $7 = 0;
  $10 = $7;
  $4 = $8;
  $5 = !$7 & $4 >>> 0 < 16777216 | $7 >>> 0 < 0;
  $4 = $7;
  $6 = $8;
  if (!(!$4 & ($6 | 0) == 16777216 ? $11 : $5)) {
   $9 = $9 + 1 | 0;
   break label$2;
  }
  $5 = $8;
  $7 = $5 ^ 16777216;
  $4 = $1;
  $6 = $10;
  $5 = $6;
  $5 = $4 | $5;
  $6 = $0;
  $4 = $7 | $6;
  if ($4 | $5) {
   break label$2;
  }
  $9 = ($9 & 1) + $9 | 0;
 }
 $0 = $12 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 $4 = $3;
 return wasm2js_scratch_store_i32(0, $4 & -2147483648 | $9), wasm2js_scratch_load_f32();
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = global$0 - 16 | 0;
 $9 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 $8 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0);
 if ($8 - $1 >>> 0 >= $2 >>> 0) {
  $10 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0);
  label$3 : {
   if (($8 >>> 1 | 0) + -16 >>> 0 > $1 >>> 0) {
    HEAP32[$7 + 8 >> 2] = $1 << 1;
    HEAP32[$7 + 12 >> 2] = $1 + $2;
    $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($7 + 12 | 0, $7 + 8 | 0) >> 2]);
    break label$3;
   }
   $2 = $8 + -1 | 0;
  }
  $9 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
  $8 = $2 + 1 | 0;
  $2 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($9, $8);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_all_iterators_28_29($0);
  if ($4) {
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($2), wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($10), $4);
  }
  $3 = ($3 - $5 | 0) - $4 | 0;
  if ($3) {
   $9 = wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($2);
   $4 = $4 << 2;
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(($9 + $4 | 0) + ($6 << 2) | 0, (wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($10) + $4 | 0) + ($5 << 2) | 0, $3);
  }
  $1 = $1 + 1 | 0;
  if (($1 | 0) != 2) {
   std____2__allocator_traits_std____2__allocator_wchar_t__20___deallocate_28std____2__allocator_wchar_t___2c_20wchar_t__2c_20unsigned_20long_29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0), $10, $1);
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $2);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $8);
  $0 = $7 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 32 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 24 >> 2] = $1;
 label$2 : {
  if (!(std____2__ios_base__flags_28_29_20const($3) & 1)) {
   HEAP32[$6 >> 2] = -1;
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $6) | 0;
   HEAP32[$6 + 24 >> 2] = $1;
   $3 = HEAP32[$6 >> 2];
   if ($3 >>> 0 <= 1) {
    if ($3 - 1) {
     HEAP8[$5 | 0] = 0;
     break label$2;
    }
    HEAP8[$5 | 0] = 1;
    break label$2;
   }
   HEAP8[$5 | 0] = 1;
   HEAP32[$4 >> 2] = 4;
   break label$2;
  }
  std____2__ios_base__getloc_28_29_20const($6, $3);
  $1 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
  std____2__locale___locale_28_29($6);
  std____2__ios_base__getloc_28_29_20const($6, $3);
  $3 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($6);
  std____2__locale___locale_28_29($6);
  std____2__numpunct_wchar_t___truename_28_29_20const($6, $3);
  std____2__numpunct_wchar_t___falsename_28_29_20const($6 | 12, $3);
  $3 = $6 + 24 | 0;
  wasm2js_i32$0 = $5, wasm2js_i32$1 = (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($6 + 24 | 0, $2, $6, $3, $1, $4, 1) | 0) == ($6 | 0), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  $1 = HEAP32[$6 + 24 >> 2];
  while (1) {
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($3 + -12 | 0);
   if (($6 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 $6 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 label$2 : {
  if (HEAPU8[$0 + 52 | 0]) {
   $3 = HEAP32[$0 + 48 >> 2];
   if (!$1) {
    break label$2;
   }
   $5 = std____2__char_traits_wchar_t___eof_28_29();
   HEAP8[$0 + 52 | 0] = 0;
   HEAP32[$0 + 48 >> 2] = $5;
   break label$2;
  }
  HEAP32[$2 + 24 >> 2] = 1;
  $4 = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($2 + 24 | 0, $0 + 44 | 0) >> 2];
  $7 = ($4 | 0) > 0 ? $4 : 0;
  label$4 : {
   label$5 : {
    label$6 : {
     while (1) {
      if (($3 | 0) != ($7 | 0)) {
       $5 = getc(HEAP32[$0 + 32 >> 2]);
       if (($5 | 0) == -1) {
        break label$6;
       }
       HEAP8[($2 + 24 | 0) + $3 | 0] = $5;
       $3 = $3 + 1 | 0;
       continue;
      }
      break;
     }
     label$9 : {
      if (HEAPU8[$0 + 53 | 0]) {
       HEAP32[$2 + 20 >> 2] = HEAP8[$2 + 24 | 0];
       break label$9;
      }
      $7 = $2 + 24 | 0;
      while (1) {
       $3 = HEAP32[$0 + 40 >> 2];
       $6 = HEAP32[$3 >> 2];
       $8 = $6;
       $9 = HEAP32[$3 + 4 >> 2];
       $5 = ($2 + 24 | 0) + $4 | 0;
       $3 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const(HEAP32[$0 + 36 >> 2], $3, $2 + 24 | 0, $5, $2 + 16 | 0, $2 + 20 | 0, $7, $2 + 12 | 0) + -1 | 0;
       if ($3 >>> 0 > 2) {
        break label$9;
       }
       label$12 : {
        switch ($3 - 1 | 0) {
        default:
         $6 = HEAP32[$0 + 40 >> 2];
         HEAP32[$6 >> 2] = $8;
         HEAP32[$6 + 4 >> 2] = $9;
         if (($4 | 0) == 8) {
          break label$6;
         }
         $3 = getc(HEAP32[$0 + 32 >> 2]);
         if (($3 | 0) == -1) {
          break label$6;
         }
         HEAP8[$5 | 0] = $3;
         $4 = $4 + 1 | 0;
         continue;
        case 1:
         break label$12;
        case 0:
         break label$6;
        }
       }
       break;
      }
      HEAP32[$2 + 20 >> 2] = HEAP8[$2 + 24 | 0];
     }
     if ($1) {
      break label$5;
     }
     while (1) {
      if (($4 | 0) < 1) {
       break label$4;
      }
      $4 = $4 + -1 | 0;
      if ((ungetc(std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(HEAP8[$4 + ($2 + 24 | 0) | 0]), HEAP32[$0 + 32 >> 2]) | 0) != -1) {
       continue;
      }
      break;
     }
    }
    $3 = std____2__char_traits_wchar_t___eof_28_29();
    break label$2;
   }
   wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(HEAP32[$2 + 20 >> 2]), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
  }
  $3 = std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(HEAP32[$2 + 20 >> 2]);
 }
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function std____2____stdinbuf_char_____getchar_28bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 $6 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 label$2 : {
  if (HEAPU8[$0 + 52 | 0]) {
   $3 = HEAP32[$0 + 48 >> 2];
   if (!$1) {
    break label$2;
   }
   $5 = std____2__char_traits_char___eof_28_29();
   HEAP8[$0 + 52 | 0] = 0;
   HEAP32[$0 + 48 >> 2] = $5;
   break label$2;
  }
  HEAP32[$2 + 24 >> 2] = 1;
  $4 = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($2 + 24 | 0, $0 + 44 | 0) >> 2];
  $7 = ($4 | 0) > 0 ? $4 : 0;
  label$4 : {
   label$5 : {
    label$6 : {
     while (1) {
      if (($3 | 0) != ($7 | 0)) {
       $5 = getc(HEAP32[$0 + 32 >> 2]);
       if (($5 | 0) == -1) {
        break label$6;
       }
       HEAP8[($2 + 24 | 0) + $3 | 0] = $5;
       $3 = $3 + 1 | 0;
       continue;
      }
      break;
     }
     label$9 : {
      if (HEAPU8[$0 + 53 | 0]) {
       HEAP8[$2 + 23 | 0] = HEAPU8[$2 + 24 | 0];
       break label$9;
      }
      $7 = $2 + 24 | 0;
      while (1) {
       $3 = HEAP32[$0 + 40 >> 2];
       $6 = HEAP32[$3 >> 2];
       $8 = $6;
       $9 = HEAP32[$3 + 4 >> 2];
       $5 = ($2 + 24 | 0) + $4 | 0;
       $3 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], $3, $2 + 24 | 0, $5, $2 + 16 | 0, $2 + 23 | 0, $7, $2 + 12 | 0) + -1 | 0;
       if ($3 >>> 0 > 2) {
        break label$9;
       }
       label$12 : {
        switch ($3 - 1 | 0) {
        default:
         $6 = HEAP32[$0 + 40 >> 2];
         HEAP32[$6 >> 2] = $8;
         HEAP32[$6 + 4 >> 2] = $9;
         if (($4 | 0) == 8) {
          break label$6;
         }
         $3 = getc(HEAP32[$0 + 32 >> 2]);
         if (($3 | 0) == -1) {
          break label$6;
         }
         HEAP8[$5 | 0] = $3;
         $4 = $4 + 1 | 0;
         continue;
        case 1:
         break label$12;
        case 0:
         break label$6;
        }
       }
       break;
      }
      HEAP8[$2 + 23 | 0] = HEAPU8[$2 + 24 | 0];
     }
     if ($1) {
      break label$5;
     }
     while (1) {
      if (($4 | 0) < 1) {
       break label$4;
      }
      $4 = $4 + -1 | 0;
      if ((ungetc(std____2__char_traits_char___to_int_type_28char_29(HEAP8[$4 + ($2 + 24 | 0) | 0]), HEAP32[$0 + 32 >> 2]) | 0) != -1) {
       continue;
      }
      break;
     }
    }
    $3 = std____2__char_traits_char___eof_28_29();
    break label$2;
   }
   wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__char_traits_char___to_int_type_28char_29(HEAP8[$2 + 23 | 0]), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
  }
  $3 = std____2__char_traits_char___to_int_type_28char_29(HEAP8[$2 + 23 | 0]);
 }
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function std____2____tree_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____map_value_compare_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2__less_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20true__2c_20std____2__allocator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___20__20___destroy_28std____2____tree_node_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20void____29($0, $1) {
 if ($1) {
  std____2____tree_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____map_value_compare_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2__less_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20true__2c_20std____2__allocator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___20__20___destroy_28std____2____tree_node_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20void____29($0, HEAP32[$1 >> 2]);
  std____2____tree_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2____map_value_compare_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20std____2__less_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20true__2c_20std____2__allocator_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___20__20___destroy_28std____2____tree_node_std____2____value_type_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20neopt__JObject___2c_20void____29($0, HEAP32[$1 + 4 >> 2]);
  if (HEAP8[$1 + 27 | 0] <= -1) {
   operator_20delete_28void__29(HEAP32[$1 + 16 >> 2]);
  }
  operator_20delete_28void__29($1);
 }
}
function std____2__utf8_to_utf16_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = $0;
 if (!(!($4 & 4) | ($1 - $5 | 0) < 3 | (HEAPU8[$5 | 0] != 239 | HEAPU8[$5 + 1 | 0] != 187))) {
  $5 = HEAPU8[$0 + 2 | 0] == 191 ? $0 + 3 | 0 : $0;
 }
 while (1) {
  label$3 : {
   if ($7 >>> 0 >= $2 >>> 0 | $5 >>> 0 >= $1 >>> 0) {
    break label$3;
   }
   $4 = HEAPU8[$5 | 0];
   if ($4 >>> 0 > $3 >>> 0) {
    break label$3;
   }
   $6 = $5 + 1 | 0;
   label$4 : {
    if ($4 << 24 >> 24 >= 0) {
     break label$4;
    }
    if ($4 >>> 0 < 194) {
     break label$3;
    }
    if ($4 >>> 0 <= 223) {
     if (($1 - $5 | 0) < 2) {
      break label$3;
     }
     $6 = HEAPU8[$5 + 1 | 0];
     if (($6 & 192) != 128 | ($6 & 63 | $4 << 6 & 1984) >>> 0 > $3 >>> 0) {
      break label$3;
     }
     $6 = $5 + 2 | 0;
     break label$4;
    }
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         if ($4 >>> 0 <= 239) {
          if (($1 - $5 | 0) < 3) {
           break label$3;
          }
          $8 = HEAPU8[$5 + 2 | 0];
          $6 = HEAPU8[$5 + 1 | 0];
          if (($4 | 0) == 237) {
           break label$10;
          }
          if (($4 | 0) == 224) {
           if (($6 & 224) == 160) {
            break label$6;
           }
           break label$3;
          }
          if (($6 & 192) != 128) {
           break label$3;
          }
          break label$6;
         }
         if ($2 - $7 >>> 0 < 2 | $4 >>> 0 > 244 | ($1 - $5 | 0) < 4) {
          break label$3;
         }
         $9 = HEAPU8[$5 + 3 | 0];
         $8 = HEAPU8[$5 + 2 | 0];
         $6 = HEAPU8[$5 + 1 | 0];
         label$13 : {
          $10 = $4 + -240 | 0;
          if ($10 >>> 0 > 4) {
           break label$13;
          }
          switch ($10 - 1 | 0) {
          case 0:
          case 1:
          case 2:
           break label$13;
          case 3:
           break label$8;
          default:
           break label$9;
          }
         }
         if (($6 & 192) != 128) {
          break label$3;
         }
         break label$7;
        }
        if (($6 & 224) == 128) {
         break label$6;
        }
        break label$3;
       }
       if (($6 + 112 & 255) >>> 0 < 48) {
        break label$7;
       }
       break label$3;
      }
      if (($6 & 240) != 128) {
       break label$3;
      }
     }
     if (($8 & 192) != 128 | ($9 & 192) != 128 | ($9 & 63 | ($8 << 6 & 4032 | ($4 << 18 & 1835008 | ($6 & 63) << 12))) >>> 0 > $3 >>> 0) {
      break label$3;
     }
     $7 = $7 + 1 | 0;
     $6 = $5 + 4 | 0;
     break label$4;
    }
    if (($8 & 192) != 128 | ($8 & 63 | ($4 << 12 & 61440 | ($6 & 63) << 6)) >>> 0 > $3 >>> 0) {
     break label$3;
    }
    $6 = $5 + 3 | 0;
   }
   $5 = $6;
   $7 = $7 + 1 | 0;
   continue;
  }
  break;
 }
 return $5 - $0 | 0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 32 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 24 >> 2] = $1;
 label$2 : {
  if (!(std____2__ios_base__flags_28_29_20const($3) & 1)) {
   HEAP32[$6 >> 2] = -1;
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $6) | 0;
   HEAP32[$6 + 24 >> 2] = $1;
   $3 = HEAP32[$6 >> 2];
   if ($3 >>> 0 <= 1) {
    if ($3 - 1) {
     HEAP8[$5 | 0] = 0;
     break label$2;
    }
    HEAP8[$5 | 0] = 1;
    break label$2;
   }
   HEAP8[$5 | 0] = 1;
   HEAP32[$4 >> 2] = 4;
   break label$2;
  }
  std____2__ios_base__getloc_28_29_20const($6, $3);
  $1 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
  std____2__locale___locale_28_29($6);
  std____2__ios_base__getloc_28_29_20const($6, $3);
  $3 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($6);
  std____2__locale___locale_28_29($6);
  std____2__numpunct_char___truename_28_29_20const($6, $3);
  std____2__numpunct_char___falsename_28_29_20const($6 | 12, $3);
  $3 = $6 + 24 | 0;
  wasm2js_i32$0 = $5, wasm2js_i32$1 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($6 + 24 | 0, $2, $6, $3, $1, $4, 1) | 0) == ($6 | 0), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  $1 = HEAP32[$6 + 24 >> 2];
  while (1) {
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + -12 | 0);
   if (($6 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function std____2__utf8_to_ucs4_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = $0;
 if (!(!($4 & 4) | ($1 - $5 | 0) < 3 | (HEAPU8[$5 | 0] != 239 | HEAPU8[$5 + 1 | 0] != 187))) {
  $5 = HEAPU8[$0 + 2 | 0] == 191 ? $0 + 3 | 0 : $0;
 }
 while (1) {
  label$3 : {
   if ($8 >>> 0 >= $2 >>> 0 | $5 >>> 0 >= $1 >>> 0) {
    break label$3;
   }
   $6 = HEAP8[$5 | 0];
   $4 = $6 & 255;
   label$4 : {
    if (($6 | 0) >= 0) {
     if ($4 >>> 0 > $3 >>> 0) {
      break label$3;
     }
     $5 = $5 + 1 | 0;
     break label$4;
    }
    if ($4 >>> 0 < 194) {
     break label$3;
    }
    if ($4 >>> 0 <= 223) {
     if (($1 - $5 | 0) < 2) {
      break label$3;
     }
     $6 = HEAPU8[$5 + 1 | 0];
     if (($6 & 192) != 128 | ($6 & 63 | $4 << 6 & 1984) >>> 0 > $3 >>> 0) {
      break label$3;
     }
     $5 = $5 + 2 | 0;
     break label$4;
    }
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         if ($4 >>> 0 <= 239) {
          if (($1 - $5 | 0) < 3) {
           break label$3;
          }
          $7 = HEAPU8[$5 + 2 | 0];
          $6 = HEAPU8[$5 + 1 | 0];
          if (($4 | 0) == 237) {
           break label$11;
          }
          if (($4 | 0) == 224) {
           if (($6 & 224) == 160) {
            break label$7;
           }
           break label$3;
          }
          if (($6 & 192) != 128) {
           break label$3;
          }
          break label$7;
         }
         if (($1 - $5 | 0) < 4 | $4 >>> 0 > 244) {
          break label$3;
         }
         $9 = HEAPU8[$5 + 3 | 0];
         $7 = HEAPU8[$5 + 2 | 0];
         $6 = HEAPU8[$5 + 1 | 0];
         label$14 : {
          $10 = $4 + -240 | 0;
          if ($10 >>> 0 > 4) {
           break label$14;
          }
          switch ($10 - 1 | 0) {
          case 0:
          case 1:
          case 2:
           break label$14;
          case 3:
           break label$9;
          default:
           break label$10;
          }
         }
         if (($6 & 192) != 128) {
          break label$3;
         }
         break label$8;
        }
        if (($6 & 224) == 128) {
         break label$7;
        }
        break label$3;
       }
       if (($6 + 112 & 255) >>> 0 < 48) {
        break label$8;
       }
       break label$3;
      }
      if (($6 & 240) != 128) {
       break label$3;
      }
     }
     if (($7 & 192) != 128 | ($9 & 192) != 128 | ($9 & 63 | ($7 << 6 & 4032 | ($4 << 18 & 1835008 | ($6 & 63) << 12))) >>> 0 > $3 >>> 0) {
      break label$3;
     }
     $5 = $5 + 4 | 0;
     break label$4;
    }
    if (($7 & 192) != 128 | ($7 & 63 | ($4 << 12 & 61440 | ($6 & 63) << 6)) >>> 0 > $3 >>> 0) {
     break label$3;
    }
    $5 = $5 + 3 | 0;
   }
   $8 = $8 + 1 | 0;
   continue;
  }
  break;
 }
 return $5 - $0 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = global$0 - 16 | 0;
 $9 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0);
 if ($8 - $1 >>> 0 >= $2 >>> 0) {
  $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0);
  label$3 : {
   if (($8 >>> 1 | 0) + -16 >>> 0 > $1 >>> 0) {
    HEAP32[$7 + 8 >> 2] = $1 << 1;
    HEAP32[$7 + 12 >> 2] = $1 + $2;
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($7 + 12 | 0, $7 + 8 | 0) >> 2]);
    break label$3;
   }
   $2 = $8 + -1 | 0;
  }
  $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
  $8 = $2 + 1 | 0;
  $2 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($9, $8);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_all_iterators_28_29($0);
  if ($4) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($2), char__20std____2____to_address_char__28char__29($10), $4);
  }
  $3 = ($3 - $5 | 0) - $4 | 0;
  if ($3) {
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29((char__20std____2____to_address_char__28char__29($2) + $4 | 0) + $6 | 0, (char__20std____2____to_address_char__28char__29($10) + $4 | 0) + $5 | 0, $3);
  }
  $1 = $1 + 1 | 0;
  if (($1 | 0) != 11) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), $10, $1);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $2);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $8);
  $0 = $7 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function scanexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 label$2 : {
  if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
   HEAP32[$0 + 4 >> 2] = $2 + 1;
   $2 = HEAPU8[$2 | 0];
   break label$2;
  }
  $2 = __shgetc($0);
 }
 $3 = $2 + -43 | 0;
 label$1 : {
  if (!($3 - 1 | 0 ? $3 >>> 0 <= 2 : 0)) {
   $3 = $2 + -48 | 0;
   break label$1;
  }
  $3 = HEAP32[$0 + 4 >> 2];
  label$5 : {
   if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $3 + 1;
    $4 = HEAPU8[$3 | 0];
    break label$5;
   }
   $4 = __shgetc($0);
  }
  $6 = ($2 | 0) == 45;
  $3 = $4 + -48 | 0;
  if (!(!HEAP32[$0 + 104 >> 2] | (!$1 | $3 >>> 0 < 10))) {
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
  }
  $2 = $4;
 }
 label$8 : {
  if ($3 >>> 0 < 10) {
   $3 = 0;
   while (1) {
    $3 = Math_imul($3, 10) + $2 | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    label$11 : {
     if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
      HEAP32[$0 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$11;
     }
     $2 = __shgetc($0);
    }
    $4 = $2 + -48 | 0;
    $3 = $3 + -48 | 0;
    if (($3 | 0) < 214748364 ? $4 >>> 0 <= 9 : 0) {
     continue;
    }
    break;
   }
   $5 = $3;
   $1 = $3 >> 31;
   label$13 : {
    if ($4 >>> 0 >= 10) {
     break label$13;
    }
    while (1) {
     $3 = __wasm_i64_mul($5, $1, 10, 0);
     $5 = $3;
     $3 = i64toi32_i32$HIGH_BITS;
     $1 = $3;
     $4 = $2 + $5 | 0;
     if ($4 >>> 0 < $5 >>> 0) {
      $1 = $1 + 1 | 0;
     }
     $5 = $4;
     $2 = HEAP32[$0 + 4 >> 2];
     label$15 : {
      if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$15;
      }
      $2 = __shgetc($0);
     }
     $4 = $1 + -1 | 0;
     $3 = $5 + -48 | 0;
     if ($3 >>> 0 < 4294967248) {
      $4 = $4 + 1 | 0;
     }
     $5 = $3;
     $1 = $4;
     $4 = $2 + -48 | 0;
     if ($4 >>> 0 > 9) {
      break label$13;
     }
     if (($1 | 0) < 21474836 ? 1 : ($1 | 0) <= 21474836 ? $5 >>> 0 >= 2061584302 ? 0 : 1 : 0) {
      continue;
     }
     break;
    }
   }
   if ($4 >>> 0 < 10) {
    while (1) {
     $2 = HEAP32[$0 + 4 >> 2];
     label$19 : {
      if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$19;
      }
      $2 = __shgetc($0);
     }
     if ($2 + -48 >>> 0 < 10) {
      continue;
     }
     break;
    }
   }
   if (HEAP32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
   }
   $3 = $1 + (0 < $5 >>> 0) | 0;
   $3 = 0 - $3 | 0;
   $4 = $6;
   $5 = $4 ? 0 - $5 | 0 : $5;
   $1 = $4 ? $3 : $1;
   break label$8;
  }
  $1 = -2147483648;
  if (!HEAP32[$0 + 104 >> 2]) {
   break label$8;
  }
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $5;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____swap_out_circular_buffer_28std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____29($0, $1) {
 var $2 = 0, $3 = 0;
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_delete_28_29_20const($0);
 $3 = std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0);
 $2 = $1 + 4 | 0;
 std____2__enable_if__28_28std____2__integral_constant_bool_2c_20false___value_29_20___20_28__28__has_construct_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_backward_with_exception_guarantees_std____2__locale__facet___28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20bool__2c_20bool__2c_20bool___29($3, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
 std____2__enable_if__28is_move_constructible_std____2__locale__facet_____value_29_20___20_28is_move_assignable_std____2__locale__facet_____value_29_2c_20void___type_20std____2__swap_std____2__locale__facet____28std____2__locale__facet____2c_20std____2__locale__facet____29($0, $2);
 std____2__enable_if__28is_move_constructible_std____2__locale__facet_____value_29_20___20_28is_move_assignable_std____2__locale__facet_____value_29_2c_20void___type_20std____2__swap_std____2__locale__facet____28std____2__locale__facet____2c_20std____2__locale__facet____29($0 + 4 | 0, $1 + 8 | 0);
 std____2__enable_if__28is_move_constructible_std____2__locale__facet_____value_29_20___20_28is_move_assignable_std____2__locale__facet_____value_29_2c_20void___type_20std____2__swap_std____2__locale__facet____28std____2__locale__facet____2c_20std____2__locale__facet____29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____end_cap_28_29($0), std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______end_cap_28_29($1));
 HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_new_28unsigned_20long_29_20const($0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($0));
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____invalidate_all_iterators_28_29($0);
}
function neopt__JArray__AsString_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = global$0 - 160 | 0;
 $6 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$2 + 80 >> 2] = 2532;
 HEAP32[$2 + 16 >> 2] = 2512;
 HEAP32[$2 + 24 >> 2] = 2372;
 HEAP32[$2 + 20 >> 2] = 0;
 $8 = $2 + 80 | 0;
 $7 = $2 + 28 | 0;
 std____2__ios_base__init_28void__29($8, $7);
 HEAP32[$2 + 152 >> 2] = 0;
 HEAP32[$2 + 156 >> 2] = -1;
 HEAP32[$2 + 80 >> 2] = 2392;
 HEAP32[$2 + 16 >> 2] = 2352;
 HEAP32[$2 + 24 >> 2] = 2372;
 $6 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($7);
 HEAP32[$2 + 60 >> 2] = 0;
 HEAP32[$2 + 64 >> 2] = 0;
 HEAP32[$2 + 68 >> 2] = 0;
 HEAP32[$2 + 72 >> 2] = 0;
 HEAP32[$2 + 76 >> 2] = 24;
 HEAP32[$2 + 28 >> 2] = 2672;
 $3 = HEAP32[$1 + 16 >> 2];
 if (($3 | 0) != HEAP32[$1 + 20 >> 2]) {
  $9 = $2 + 24 | 0;
  while (1) {
   $3 = HEAP32[($5 << 2) + $3 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($2, $3);
   $3 = HEAPU8[$2 + 11 | 0];
   $4 = $3 << 24 >> 24 < 0;
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($9, $4 ? HEAP32[$2 >> 2] : $2, $4 ? HEAP32[$2 + 4 >> 2] : $3);
   if (HEAP8[$2 + 11 | 0] <= -1) {
    operator_20delete_28void__29(HEAP32[$2 >> 2]);
   }
   $3 = HEAP32[$1 + 16 >> 2];
   $4 = HEAP32[$1 + 20 >> 2] - $3 >> 2;
   if (($4 + -1 | 0) != ($5 | 0)) {
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($9, 4316, 1);
    $3 = HEAP32[$1 + 16 >> 2];
    $4 = HEAP32[$1 + 20 >> 2] - $3 >> 2;
   }
   $5 = $5 + 1 | 0;
   if ($5 >>> 0 < $4 >>> 0) {
    continue;
   }
   break;
  }
 }
 std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($0, $7);
 HEAP32[$2 + 80 >> 2] = 2392;
 HEAP32[$2 + 16 >> 2] = 2352;
 HEAP32[$2 + 28 >> 2] = 2672;
 HEAP32[$2 + 24 >> 2] = 2372;
 if (HEAP8[$2 + 71 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 + 60 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($6);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($2 + 16 | 0, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($8);
 $0 = $2 + 160 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function csbigintegerlib__BigInteger__BigInteger_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__2c_20bool_2c_20bool_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    $5 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0;
    if (!$5) {
     $1 = 0;
     break label$3;
    }
    if (($5 | 0) <= -1) {
     break label$1;
    }
    $4 = operator_20new_28unsigned_20long_29($5);
    HEAP32[$0 >> 2] = $4;
    HEAP32[$0 + 4 >> 2] = $4;
    $6 = $4 + $5 | 0;
    HEAP32[$0 + 8 >> 2] = $6;
    label$5 : {
     $7 = HEAP32[$1 >> 2];
     $1 = HEAP32[$1 + 4 >> 2] - $7 | 0;
     if (($1 | 0) <= 0) {
      HEAP32[$0 + 4 >> 2] = $4;
      if (($5 | 0) > 0) {
       break label$5;
      }
      $1 = $4;
      break label$3;
     }
     wasm2js_i32$0 = $0, wasm2js_i32$1 = memcpy($4, $7, $1) + $1 | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
     break label$2;
    }
    HEAP8[$4 | 0] = 0;
    HEAP32[$0 + 4 >> 2] = $4 + 1;
    break label$2;
   }
   $5 = $4 - $1 | 0;
   $7 = $5 + 1 | 0;
   if (($7 | 0) <= -1) {
    break label$1;
   }
   $4 = 0;
   $6 = $6 - $1 | 0;
   $8 = $6 << 1;
   $6 = $6 >>> 0 < 1073741823 ? $8 >>> 0 < $7 >>> 0 ? $7 : $8 : 2147483647;
   if ($6) {
    $4 = operator_20new_28unsigned_20long_29($6);
   }
   $7 = $4 + $5 | 0;
   HEAP8[$7 | 0] = 0;
   $6 = $4 + $6 | 0;
   $7 = $7 + 1 | 0;
   if (($5 | 0) >= 1) {
    memcpy($4, $1, $5);
   }
   HEAP32[$0 + 8 >> 2] = $6;
   HEAP32[$0 + 4 >> 2] = $7;
   HEAP32[$0 >> 2] = $4;
   if (!$1) {
    break label$2;
   }
   operator_20delete_28void__29($1);
  }
  label$9 : {
   if (!$2) {
    break label$9;
   }
   $1 = HEAP32[$0 >> 2];
   $5 = HEAP32[$0 + 4 >> 2];
   if (($1 | 0) == ($5 | 0)) {
    break label$9;
   }
   while (1) {
    if (HEAPU8[$1 | 0]) {
     break label$9;
    }
    $4 = $1;
    $6 = $1 + 1 | 0;
    $5 = $5 - $6 | 0;
    if ($5) {
     memmove($1, $6, $5);
     $4 = HEAP32[$0 >> 2];
    }
    $5 = $1 + $5 | 0;
    HEAP32[$0 + 4 >> 2] = $5;
    $1 = $4;
    if (($5 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
  }
  label$12 : {
   if ($3) {
    break label$12;
   }
   $1 = HEAP32[$0 >> 2];
   $4 = HEAP32[$0 + 4 >> 2];
   if (($1 | 0) == ($4 | 0)) {
    break label$12;
   }
   $4 = $4 + -1 | 0;
   if ($4 >>> 0 <= $1 >>> 0) {
    break label$12;
   }
   while (1) {
    $5 = HEAPU8[$1 | 0];
    HEAP8[$1 | 0] = HEAPU8[$4 | 0];
    HEAP8[$4 | 0] = $5;
    $1 = $1 + 1 | 0;
    $4 = $4 + -1 | 0;
    if ($1 >>> 0 < $4 >>> 0) {
     continue;
    }
    break;
   }
  }
  return $0;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function neopt__BinaryWriter__Write_28unsigned_20char_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $7 = global$0 - 16 | 0;
 $4 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  label$3 : {
   label$4 : {
    $3 = HEAP32[$0 + 8 >> 2];
    label$5 : {
     if ($3) {
      $0 = HEAP32[$3 + 4 >> 2];
      $2 = HEAP32[$3 + 8 >> 2];
      if (($0 | 0) != ($2 | 0)) {
       HEAP8[$0 | 0] = $1;
       HEAP32[$3 + 4 >> 2] = $0 + 1;
       break label$5;
      }
      $5 = HEAP32[$3 >> 2];
      $4 = $0 - $5 | 0;
      $0 = $4 + 1 | 0;
      if (($0 | 0) <= -1) {
       break label$4;
      }
      $8 = $4;
      $2 = $2 - $5 | 0;
      $6 = $2 << 1;
      $2 = $2 >>> 0 < 1073741823 ? $6 >>> 0 < $0 >>> 0 ? $0 : $6 : 2147483647;
      $0 = 0;
      label$8 : {
       if (!$2) {
        break label$8;
       }
       $0 = operator_20new_28unsigned_20long_29($2);
      }
      $6 = $8 + $0 | 0;
      HEAP8[$6 | 0] = $1;
      $1 = $0 + $2 | 0;
      $2 = $6 + 1 | 0;
      if (($4 | 0) >= 1) {
       memcpy($0, $5, $4);
      }
      HEAP32[$3 + 8 >> 2] = $1;
      HEAP32[$3 + 4 >> 2] = $2;
      HEAP32[$3 >> 2] = $0;
      if (!$5) {
       break label$5;
      }
      operator_20delete_28void__29($5);
      break label$5;
     }
     $3 = HEAP32[$0 + 4 >> 2];
     if (!$3) {
      break label$2;
     }
     $0 = HEAP32[$3 + 4 >> 2];
     $2 = HEAP32[$3 + 8 >> 2];
     if (($0 | 0) != ($2 | 0)) {
      HEAP8[$0 | 0] = $1;
      HEAP32[$3 + 4 >> 2] = $0 + 1;
      break label$5;
     }
     $5 = HEAP32[$3 >> 2];
     $4 = $0 - $5 | 0;
     $0 = $4 + 1 | 0;
     if (($0 | 0) <= -1) {
      break label$3;
     }
     $8 = $4;
     $2 = $2 - $5 | 0;
     $6 = $2 << 1;
     $2 = $2 >>> 0 < 1073741823 ? $6 >>> 0 < $0 >>> 0 ? $0 : $6 : 2147483647;
     $0 = 0;
     label$11 : {
      if (!$2) {
       break label$11;
      }
      $0 = operator_20new_28unsigned_20long_29($2);
     }
     $6 = $8 + $0 | 0;
     HEAP8[$6 | 0] = $1;
     $1 = $0 + $2 | 0;
     $2 = $6 + 1 | 0;
     if (($4 | 0) >= 1) {
      memcpy($0, $5, $4);
     }
     HEAP32[$3 + 8 >> 2] = $1;
     HEAP32[$3 + 4 >> 2] = $2;
     HEAP32[$3 >> 2] = $0;
     if (!$5) {
      break label$5;
     }
     operator_20delete_28void__29($5);
    }
    $0 = $7 + 16 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow();
    }
    global$0 = $0;
    return;
   }
   std____2____vector_base_common_true_____throw_length_error_28_29_20const($3);
   abort();
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($3);
  abort();
 }
 HEAP32[$7 + 4 >> 2] = 4674;
 HEAP32[$7 >> 2] = 4668;
 iprintf(3084, $7);
 exit(1);
 abort();
}
function csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 32 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $3 = HEAPU8[$1 + 11 | 0];
 $7 = $3 << 24 >> 24;
 if (($7 | 0) <= -1) {
  $3 = HEAP32[$1 + 4 >> 2];
 }
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 label$3 : {
  label$4 : {
   $5 = $3 + 2 | 0;
   label$5 : {
    if (!$5) {
     $3 = 0;
     break label$5;
    }
    if (($5 | 0) <= -1) {
     break label$4;
    }
    $3 = operator_20new_28unsigned_20long_29($5);
    HEAP32[$4 + 16 >> 2] = $3;
    $6 = $3 + $5 | 0;
    HEAP32[$4 + 24 >> 2] = $6;
    memset($3, 0, $5);
    HEAP32[$4 + 20 >> 2] = $6;
   }
   $1 = ($7 | 0) <= -1 ? HEAP32[$1 >> 2] : $1;
   $6 = csbiginteger_init_s($1 | 0, $2 | 0, $3 | 0, $6 - $3 | 0) | 0;
   $1 = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   if ($6) {
    if (($6 | 0) <= -1) {
     break label$3;
    }
    $5 = $3 + $6 | 0;
    $1 = operator_20new_28unsigned_20long_29($6);
    HEAP32[$4 >> 2] = $1;
    HEAP32[$4 + 4 >> 2] = $1;
    HEAP32[$4 + 8 >> 2] = $1 + $6;
    while (1) {
     HEAP8[$1 | 0] = HEAPU8[$3 | 0];
     $1 = $1 + 1 | 0;
     $3 = $3 + 1 | 0;
     if (($5 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
    HEAP32[$4 + 4 >> 2] = $1;
   }
   $3 = HEAP32[$0 >> 2];
   if ($3) {
    HEAP32[$0 + 4 >> 2] = $3;
    operator_20delete_28void__29($3);
    HEAP32[$0 + 8 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
   }
   $3 = HEAP32[$4 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   label$12 : {
    if (($1 | 0) == ($3 | 0)) {
     break label$12;
    }
    $1 = $1 + -1 | 0;
    if ($1 >>> 0 <= $3 >>> 0) {
     break label$12;
    }
    while (1) {
     $5 = HEAPU8[$3 | 0];
     HEAP8[$3 | 0] = HEAPU8[$1 | 0];
     HEAP8[$1 | 0] = $5;
     $3 = $3 + 1 | 0;
     $1 = $1 + -1 | 0;
     if ($3 >>> 0 < $1 >>> 0) {
      continue;
     }
     break;
    }
   }
   $1 = HEAP32[$4 + 16 >> 2];
   if ($1) {
    HEAP32[$4 + 20 >> 2] = $1;
    operator_20delete_28void__29($1);
   }
   $1 = $4 + 32 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $1;
   return $0;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($4 + 16 | 0);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($4);
 abort();
}
function void_20std____2____tree_balance_after_insert_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = ($0 | 0) == ($1 | 0);
 HEAP8[$1 + 12 | 0] = $2;
 label$1 : {
  if ($2) {
   break label$1;
  }
  while (1) {
   $4 = HEAP32[$1 + 8 >> 2];
   if (HEAPU8[$4 + 12 | 0]) {
    break label$1;
   }
   label$3 : {
    $2 = HEAP32[$4 + 8 >> 2];
    $3 = HEAP32[$2 >> 2];
    if (($3 | 0) == ($4 | 0)) {
     $3 = HEAP32[$2 + 4 >> 2];
     if (!(!$3 | HEAPU8[$3 + 12 | 0])) {
      break label$3;
     }
     label$6 : {
      if (HEAP32[$4 >> 2] == ($1 | 0)) {
       $3 = $4;
       break label$6;
      }
      $3 = HEAP32[$4 + 4 >> 2];
      $1 = HEAP32[$3 >> 2];
      HEAP32[$4 + 4 >> 2] = $1;
      if ($1) {
       HEAP32[$1 + 8 >> 2] = $4;
       $2 = HEAP32[$4 + 8 >> 2];
      }
      HEAP32[$3 + 8 >> 2] = $2;
      $2 = HEAP32[$4 + 8 >> 2];
      HEAP32[$2 + ((HEAP32[$2 >> 2] != ($4 | 0)) << 2) >> 2] = $3;
      HEAP32[$3 >> 2] = $4;
      HEAP32[$4 + 8 >> 2] = $3;
      $2 = HEAP32[$3 + 8 >> 2];
     }
     HEAP8[$3 + 12 | 0] = 1;
     HEAP8[$2 + 12 | 0] = 0;
     $4 = HEAP32[$2 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 >> 2] = $3;
     if ($3) {
      HEAP32[$3 + 8 >> 2] = $2;
     }
     HEAP32[$4 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     $3 = HEAP32[$2 + 8 >> 2];
     HEAP32[$3 + ((HEAP32[$3 >> 2] != ($2 | 0)) << 2) >> 2] = $4;
     HEAP32[$4 + 4 >> 2] = $2;
     HEAP32[$2 + 8 >> 2] = $4;
     return;
    }
    if (!(HEAPU8[$3 + 12 | 0] | !$3)) {
     break label$3;
    }
    label$11 : {
     if (HEAP32[$4 >> 2] != ($1 | 0)) {
      $1 = $4;
      break label$11;
     }
     $3 = HEAP32[$1 + 4 >> 2];
     HEAP32[$4 >> 2] = $3;
     if ($3) {
      HEAP32[$3 + 8 >> 2] = $4;
      $2 = HEAP32[$4 + 8 >> 2];
     }
     HEAP32[$1 + 8 >> 2] = $2;
     $2 = HEAP32[$4 + 8 >> 2];
     HEAP32[$2 + ((HEAP32[$2 >> 2] != ($4 | 0)) << 2) >> 2] = $1;
     HEAP32[$1 + 4 >> 2] = $4;
     HEAP32[$4 + 8 >> 2] = $1;
     $2 = HEAP32[$1 + 8 >> 2];
    }
    HEAP8[$1 + 12 | 0] = 1;
    HEAP8[$2 + 12 | 0] = 0;
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = HEAP32[$4 >> 2];
    HEAP32[$2 + 4 >> 2] = $3;
    if ($3) {
     HEAP32[$3 + 8 >> 2] = $2;
    }
    HEAP32[$4 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
    $3 = HEAP32[$2 + 8 >> 2];
    HEAP32[$3 + ((HEAP32[$3 >> 2] != ($2 | 0)) << 2) >> 2] = $4;
    HEAP32[$4 >> 2] = $2;
    HEAP32[$2 + 8 >> 2] = $4;
    break label$1;
   }
   HEAP8[$4 + 12 | 0] = 1;
   HEAP8[$2 + 12 | 0] = ($0 | 0) == ($2 | 0);
   $3 = $3 + 12 | 0;
   HEAP8[$3 | 0] = 1;
   $1 = $2;
   if (($0 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
}
function __letf2($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $13 = 1;
 $9 = $0;
 $10 = $1;
 $15 = ($9 | 0) != 0 | ($10 | 0) != 0;
 $9 = $3;
 $10 = $9 & 2147483647;
 $12 = $10;
 $8 = $2;
 $14 = $8;
 $16 = ($10 | 0) == 2147418112 & $8 >>> 0 > 0 | $10 >>> 0 > 2147418112;
 $9 = $10;
 $11 = $8;
 label$1 : {
  if (!$11 & ($9 | 0) == 2147418112 ? $15 : $16) {
   break label$1;
  }
  $8 = $4;
  $11 = $5;
  $17 = ($8 | 0) != 0 | ($11 | 0) != 0;
  $8 = $7;
  $11 = $8 & 2147483647;
  $15 = $11;
  $10 = $6;
  $16 = $10;
  $8 = $10;
  $18 = ($11 | 0) == 2147418112 & $8 >>> 0 > 0 | $11 >>> 0 > 2147418112;
  $8 = $11;
  $9 = $10;
  if (!$9 & ($8 | 0) == 2147418112 ? $17 : $18) {
   break label$1;
  }
  $10 = $0;
  $11 = $4;
  $17 = $10 | $11;
  $9 = $1;
  $8 = $5;
  $8 = $9 | $8;
  $13 = $8;
  $10 = $15;
  $8 = $12;
  $10 = $10 | $8;
  $12 = $10;
  $11 = $16;
  $9 = $14;
  $11 = $11 | $9;
  $8 = $17;
  $10 = $13;
  $9 = $12;
  $9 = $10 | $9;
  if (!($11 | $8 | $9)) {
   return 0;
  }
  $9 = $3;
  $8 = $7;
  $8 = $9 & $8;
  $10 = $2;
  $11 = $6;
  $9 = $10 & $11;
  if (($8 | 0) > 0 ? 1 : ($8 | 0) >= 0 ? $9 >>> 0 < 0 ? 0 : 1 : 0) {
   $13 = -1;
   $9 = $1;
   $8 = $5;
   $11 = $0;
   $10 = $4;
   $12 = ($9 | 0) == ($8 | 0) & $11 >>> 0 < $10 >>> 0 | $9 >>> 0 < $8 >>> 0;
   $10 = $2;
   $8 = $6;
   $11 = $3;
   $9 = $7;
   $14 = ($11 | 0) < ($9 | 0) ? 1 : ($11 | 0) <= ($9 | 0) ? $10 >>> 0 >= $8 >>> 0 ? 0 : 1 : 0;
   $9 = $8;
   $8 = $10;
   $10 = $11;
   $11 = $7;
   if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $14) {
    break label$1;
   }
   $11 = $4;
   $9 = $0;
   $4 = $11 ^ $9;
   $10 = $5;
   $8 = $1;
   $10 = $10 ^ $8;
   $0 = $10;
   $10 = $3;
   $9 = $7;
   $9 = $10 ^ $9;
   $1 = $9;
   $11 = $6;
   $8 = $2;
   $11 = $11 ^ $8;
   $9 = $0;
   $8 = $1;
   $8 = $9 | $8;
   $10 = $4;
   $9 = $11 | $10;
   return ($9 | 0) != 0 | ($8 | 0) != 0;
  }
  $13 = -1;
  $9 = $1;
  $8 = $5;
  $11 = $0;
  $10 = $4;
  $12 = ($9 | 0) == ($8 | 0) & $11 >>> 0 > $10 >>> 0 | $9 >>> 0 > $8 >>> 0;
  $10 = $2;
  $8 = $6;
  $11 = $3;
  $9 = $7;
  $14 = ($11 | 0) > ($9 | 0) ? 1 : ($11 | 0) >= ($9 | 0) ? $10 >>> 0 <= $8 >>> 0 ? 0 : 1 : 0;
  $9 = $8;
  $8 = $10;
  $10 = $11;
  $11 = $7;
  if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $14) {
   break label$1;
  }
  $11 = $4;
  $9 = $0;
  $4 = $11 ^ $9;
  $10 = $5;
  $8 = $1;
  $10 = $10 ^ $8;
  $0 = $10;
  $10 = $3;
  $9 = $7;
  $9 = $10 ^ $9;
  $1 = $9;
  $11 = $6;
  $8 = $2;
  $11 = $11 ^ $8;
  $9 = $0;
  $8 = $1;
  $8 = $9 | $8;
  $10 = $4;
  $9 = $11 | $10;
  $13 = ($9 | 0) != 0 | ($8 | 0) != 0;
 }
 return $13;
}
function int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 8 >> 2] = $1;
 label$2 : {
  if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $5 + 8 | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6;
   $1 = 0;
   break label$2;
  }
  $1 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
  if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($3, 2048, $1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4;
   $1 = 0;
   break label$2;
  }
  $1 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($3, $1, 0);
  while (1) {
   label$6 : {
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
    $1 = $1 + -48 | 0;
    $6 = bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $5 + 8 | 0);
    if (!$6 | ($4 | 0) < 2) {
     break label$6;
    }
    $6 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
    if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($3, 2048, $6)) {
     break label$2;
    }
    $4 = $4 + -1 | 0;
    $1 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($3, $6, 0) + Math_imul($1, 10) | 0;
    continue;
   }
   break;
  }
  if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $5 + 8 | 0)) {
   break label$2;
  }
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
 }
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function __getf2($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $18 = -1;
 $9 = $0;
 $10 = $1;
 $14 = ($9 | 0) != 0 | ($10 | 0) != 0;
 $9 = $3;
 $10 = $9 & 2147483647;
 $12 = $10;
 $8 = $2;
 $13 = $8;
 $15 = ($10 | 0) == 2147418112 & $8 >>> 0 > 0 | $10 >>> 0 > 2147418112;
 $9 = $10;
 $11 = $8;
 label$1 : {
  if (!$11 & ($9 | 0) == 2147418112 ? $14 : $15) {
   break label$1;
  }
  $8 = $4;
  $11 = $5;
  $16 = ($8 | 0) != 0 | ($11 | 0) != 0;
  $8 = $7;
  $11 = $8 & 2147483647;
  $14 = $11;
  $10 = $6;
  $15 = $10;
  $8 = $10;
  $17 = ($11 | 0) == 2147418112 & $8 >>> 0 > 0 | $11 >>> 0 > 2147418112;
  $8 = $11;
  $9 = $10;
  if (!$9 & ($8 | 0) == 2147418112 ? $16 : $17) {
   break label$1;
  }
  $10 = $0;
  $11 = $4;
  $17 = $10 | $11;
  $9 = $1;
  $8 = $5;
  $8 = $9 | $8;
  $16 = $8;
  $10 = $14;
  $8 = $12;
  $10 = $10 | $8;
  $12 = $10;
  $11 = $15;
  $9 = $13;
  $11 = $11 | $9;
  $8 = $17;
  $10 = $16;
  $9 = $12;
  $9 = $10 | $9;
  if (!($11 | $8 | $9)) {
   return 0;
  }
  $9 = $3;
  $8 = $7;
  $8 = $9 & $8;
  $10 = $2;
  $11 = $6;
  $9 = $10 & $11;
  if (($8 | 0) > 0 ? 1 : ($8 | 0) >= 0 ? $9 >>> 0 < 0 ? 0 : 1 : 0) {
   $9 = $1;
   $8 = $5;
   $11 = $0;
   $10 = $4;
   $12 = ($9 | 0) == ($8 | 0) & $11 >>> 0 < $10 >>> 0 | $9 >>> 0 < $8 >>> 0;
   $10 = $2;
   $8 = $6;
   $11 = $3;
   $9 = $7;
   $13 = ($11 | 0) < ($9 | 0) ? 1 : ($11 | 0) <= ($9 | 0) ? $10 >>> 0 >= $8 >>> 0 ? 0 : 1 : 0;
   $9 = $8;
   $8 = $10;
   $10 = $11;
   $11 = $7;
   if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $13) {
    break label$1;
   }
   $11 = $4;
   $9 = $0;
   $4 = $11 ^ $9;
   $10 = $5;
   $8 = $1;
   $10 = $10 ^ $8;
   $0 = $10;
   $10 = $3;
   $9 = $7;
   $9 = $10 ^ $9;
   $1 = $9;
   $11 = $6;
   $8 = $2;
   $11 = $11 ^ $8;
   $9 = $0;
   $8 = $1;
   $8 = $9 | $8;
   $10 = $4;
   $9 = $11 | $10;
   return ($9 | 0) != 0 | ($8 | 0) != 0;
  }
  $9 = $1;
  $8 = $5;
  $11 = $0;
  $10 = $4;
  $12 = ($9 | 0) == ($8 | 0) & $11 >>> 0 > $10 >>> 0 | $9 >>> 0 > $8 >>> 0;
  $10 = $2;
  $8 = $6;
  $11 = $3;
  $9 = $7;
  $13 = ($11 | 0) > ($9 | 0) ? 1 : ($11 | 0) >= ($9 | 0) ? $10 >>> 0 <= $8 >>> 0 ? 0 : 1 : 0;
  $9 = $8;
  $8 = $10;
  $10 = $11;
  $11 = $7;
  if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $13) {
   break label$1;
  }
  $11 = $4;
  $9 = $0;
  $4 = $11 ^ $9;
  $10 = $5;
  $8 = $1;
  $10 = $10 ^ $8;
  $0 = $10;
  $10 = $3;
  $9 = $7;
  $9 = $10 ^ $9;
  $1 = $9;
  $11 = $6;
  $8 = $2;
  $11 = $11 ^ $8;
  $9 = $0;
  $8 = $1;
  $8 = $9 | $8;
  $10 = $4;
  $9 = $11 | $10;
  $18 = ($9 | 0) != 0 | ($8 | 0) != 0;
 }
 return $18;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $1;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
      $1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_cap_28_29_20const($0);
      $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_size_28_29_20const($0);
      $2 = $1 + -1 | 0;
      if (($4 | 0) == ($2 | 0)) {
       break label$5;
      }
      break label$3;
     }
     $4 = 1;
     $2 = 1;
     $1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_size_28_29_20const($0);
     if (($1 | 0) != 1) {
      break label$4;
     }
    }
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $2, 1, $2, $2, 0, 0);
    $1 = $4;
    if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
     break label$3;
    }
   }
   $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $1 + 1 | 0);
   break label$2;
  }
  $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $4 + 1 | 0);
  $1 = $4;
 }
 $0 = ($1 << 2) + $2 | 0;
 std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($0, $3 + 12 | 0);
 HEAP32[$3 + 8 >> 2] = 0;
 std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($0 + 4 | 0, $3 + 8 | 0);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = global$0 - 48 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 40 >> 2] = $1;
 label$2 : {
  if (!(std____2__ios_base__flags_28_29_20const($2) & 1)) {
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4) | 0;
   break label$2;
  }
  std____2__ios_base__getloc_28_29_20const($5 + 24 | 0, $2);
  $2 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($5 + 24 | 0);
  std____2__locale___locale_28_29($5 + 24 | 0);
  label$4 : {
   if ($4) {
    std____2__numpunct_wchar_t___truename_28_29_20const($5 + 24 | 0, $2);
    break label$4;
   }
   std____2__numpunct_wchar_t___falsename_28_29_20const($5 + 24 | 0, $2);
  }
  wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($5 + 24 | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  while (1) {
   wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($5 + 24 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
   if (!bool_20std____2__operator___wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($5 + 16 | 0, $5 + 8 | 0)) {
    $2 = HEAP32[$5 + 40 >> 2];
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($5 + 24 | 0);
    break label$2;
   }
   $2 = HEAP32[std____2____wrap_iter_wchar_t____operator__28_29_20const($5 + 16 | 0) >> 2];
   std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29(std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29($5 + 40 | 0), $2);
   std____2____wrap_iter_wchar_t____operator___28_29($5 + 16 | 0);
   std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($5 + 40 | 0);
   continue;
  }
 }
 $0 = $5 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__init_wweeks_28_29() {
 var $0 = 0;
 label$1 : {
  if (HEAP8[26024] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26024)) {
   break label$1;
  }
  $0 = 25856;
  while (1) {
   $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 26024) {
    continue;
   }
   break;
  }
  __cxa_guard_release(26024);
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25856, 18896);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25868, 18924);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25880, 18952);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25892, 18984);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25904, 19024);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25916, 19060);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25928, 19088);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25940, 19124);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25952, 19140);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25964, 19156);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25976, 19172);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(25988, 19188);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26e3, 19204);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26012, 19220);
}
function std____2__enable_if___is_cpp17_forward_iterator_wchar_t_20const____value_2c_20void___type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = std____2__iterator_traits_wchar_t_20const____difference_type_20std____2__distance_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($1, $2);
 if ($5 >>> 0 <= std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0) >>> 0) {
  label$3 : {
   if ($5 >>> 0 <= 1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $5);
    $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
    break label$3;
   }
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($5);
   $7 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
   $6 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($7, $6);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $3);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $6);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $5);
  }
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $1);
    $3 = $3 + 4 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  }
  HEAP32[$4 + 12 >> 2] = 0;
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $4 + 12 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 8 >> 2] = $1;
 label$2 : {
  if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $5 + 8 | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6;
   $1 = 0;
   break label$2;
  }
  $1 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
  if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($3, 2048, $1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4;
   $1 = 0;
   break label$2;
  }
  $1 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($3, $1, 0);
  while (1) {
   label$6 : {
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
    $1 = $1 + -48 | 0;
    $6 = bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $5 + 8 | 0);
    if (!$6 | ($4 | 0) < 2) {
     break label$6;
    }
    $6 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
    if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($3, 2048, $6)) {
     break label$2;
    }
    $4 = $4 + -1 | 0;
    $1 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($3, $6, 0) + Math_imul($1, 10) | 0;
    continue;
   }
   break;
  }
  if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $5 + 8 | 0)) {
   break label$2;
  }
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
 }
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function memcpy($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if ($2 >>> 0 >= 512) {
  emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0) | 0;
  return $0;
 }
 $4 = $0 + $2 | 0;
 label$2 : {
  if (!(($0 ^ $1) & 3)) {
   label$4 : {
    if (($2 | 0) < 1) {
     $2 = $0;
     break label$4;
    }
    if (!($0 & 3)) {
     $2 = $0;
     break label$4;
    }
    $2 = $0;
    while (1) {
     HEAP8[$2 | 0] = HEAPU8[$1 | 0];
     $1 = $1 + 1 | 0;
     $2 = $2 + 1 | 0;
     if ($2 >>> 0 >= $4 >>> 0) {
      break label$4;
     }
     if ($2 & 3) {
      continue;
     }
     break;
    }
   }
   $3 = $4 & -4;
   label$8 : {
    if ($3 >>> 0 < 64) {
     break label$8;
    }
    $5 = $3 + -64 | 0;
    if ($2 >>> 0 > $5 >>> 0) {
     break label$8;
    }
    while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
     HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
     HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
     HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
     HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
     HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
     HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
     $1 = $1 - -64 | 0;
     $2 = $2 - -64 | 0;
     if ($2 >>> 0 <= $5 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$2;
   }
   while (1) {
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 < $3 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if ($4 >>> 0 < 4) {
   $2 = $0;
   break label$2;
  }
  $3 = $4 + -4 | 0;
  if ($3 >>> 0 < $0 >>> 0) {
   $2 = $0;
   break label$2;
  }
  $2 = $0;
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + 1 | 0];
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 2 | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + 3 | 0];
   $1 = $1 + 4 | 0;
   $2 = $2 + 4 | 0;
   if ($2 >>> 0 <= $3 >>> 0) {
    continue;
   }
   break;
  }
 }
 if ($2 >>> 0 < $4 >>> 0) {
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   $1 = $1 + 1 | 0;
   $2 = $2 + 1 | 0;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = global$0 - 48 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 40 >> 2] = $1;
 label$2 : {
  if (!(std____2__ios_base__flags_28_29_20const($2) & 1)) {
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4) | 0;
   break label$2;
  }
  std____2__ios_base__getloc_28_29_20const($5 + 24 | 0, $2);
  $2 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($5 + 24 | 0);
  std____2__locale___locale_28_29($5 + 24 | 0);
  label$4 : {
   if ($4) {
    std____2__numpunct_char___truename_28_29_20const($5 + 24 | 0, $2);
    break label$4;
   }
   std____2__numpunct_char___falsename_28_29_20const($5 + 24 | 0, $2);
  }
  wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($5 + 24 | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  while (1) {
   wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($5 + 24 | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
   if (!bool_20std____2__operator___char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($5 + 16 | 0, $5 + 8 | 0)) {
    $2 = HEAP32[$5 + 40 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 24 | 0);
    break label$2;
   }
   $2 = HEAP8[std____2____wrap_iter_char____operator__28_29_20const($5 + 16 | 0) | 0];
   std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29(std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29($5 + 40 | 0), $2);
   std____2____wrap_iter_char____operator___28_29($5 + 16 | 0);
   std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($5 + 40 | 0);
   continue;
  }
 }
 $0 = $5 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__enable_if___is_cpp17_forward_iterator_wchar_t____value_2c_20void___type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_wchar_t___28wchar_t__2c_20wchar_t__29($1, $2);
 if ($5 >>> 0 <= std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0) >>> 0) {
  label$3 : {
   if ($5 >>> 0 <= 1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $5);
    $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
    break label$3;
   }
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($5);
   $7 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
   $6 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($7, $6);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $3);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $6);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $5);
  }
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $1);
    $3 = $3 + 4 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  }
  HEAP32[$4 + 12 >> 2] = 0;
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($3, $4 + 12 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP8[$3 + 15 | 0] = $1;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
      $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0);
      $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($0);
      $2 = $1 + -1 | 0;
      if (($4 | 0) == ($2 | 0)) {
       break label$5;
      }
      break label$3;
     }
     $4 = 10;
     $2 = 10;
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_size_28_29_20const($0);
     if (($1 | 0) != 10) {
      break label$4;
     }
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $2, 1, $2, $2, 0, 0);
    $1 = $4;
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
     break label$3;
    }
   }
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1 + 1 | 0);
   break label$2;
  }
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4 + 1 | 0);
  $1 = $4;
 }
 $0 = $1 + $2 | 0;
 std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $3 + 15 | 0);
 HEAP8[$3 + 14 | 0] = 0;
 std____2__char_traits_char___assign_28char__2c_20char_20const__29($0 + 1 | 0, $3 + 14 | 0);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function Neo__Cryptography__ECC__ECFieldElement__ECFieldElement_28csbigintegerlib__BigInteger_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $6 = global$0 - 16 | 0;
 $3 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 label$2 : {
  $5 = HEAP32[$1 + 4 >> 2];
  $4 = HEAP32[$1 >> 2];
  $7 = $5 - $4 | 0;
  if ($7) {
   if (($7 | 0) <= -1) {
    break label$2;
   }
   $3 = operator_20new_28unsigned_20long_29($7);
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 4 >> 2] = $3;
   HEAP32[$0 + 8 >> 2] = $3 + $7;
   $4 = HEAP32[$1 >> 2];
   $5 = HEAP32[$1 + 4 >> 2] - $4 | 0;
   if (($5 | 0) >= 1) {
    $3 = memcpy($3, $4, $5) + $5 | 0;
   }
   HEAP32[$0 + 4 >> 2] = $3;
   $5 = HEAP32[$1 + 4 >> 2];
   $8 = $5 - $4 | 0;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     $3 = HEAP32[$2 >> 2];
     if ((HEAP32[$2 + 4 >> 2] - $3 | 0) != ($8 | 0)) {
      break label$7;
     }
     if (($4 | 0) == ($5 | 0)) {
      break label$6;
     }
     while (1) {
      if (HEAPU8[$4 | 0] != HEAPU8[$3 | 0]) {
       break label$7;
      }
      $3 = $3 + 1 | 0;
      $4 = $4 + 1 | 0;
      if (($5 | 0) != ($4 | 0)) {
       continue;
      }
      break;
     }
     break label$6;
    }
    if (!csbigintegerlib__BigInteger__operator__28csbigintegerlib__BigInteger_20const__29_20const_1($1, $2)) {
     break label$5;
    }
   }
   $1 = $6 + 8 | 0;
   $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24456, 2082, 52);
   std____2__ios_base__getloc_28_29_20const($1, $4 + HEAP32[HEAP32[$4 >> 2] + -12 >> 2] | 0);
   $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($6 + 8 | 0, 25448);
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
   std____2__locale___locale_28_29($6 + 8 | 0);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($4, $3);
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($4);
  }
  $1 = $6 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $1;
  return $0;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function csbigintegerlib__BigInteger__operator__28csbigintegerlib__BigInteger_20const__29_20const_1($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 32 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = 0;
 label$2 : {
  label$3 : {
   $6 = HEAP32[$0 >> 2];
   $2 = HEAP32[$0 + 4 >> 2] - $6 | 0;
   label$4 : {
    if (!$2) {
     break label$4;
    }
    if (($2 | 0) <= -1) {
     break label$3;
    }
    $0 = operator_20new_28unsigned_20long_29($2);
    HEAP32[$3 + 16 >> 2] = $0;
    $4 = $0 + $2 | 0;
    HEAP32[$3 + 24 >> 2] = $4;
    $6 = memcpy($0, $6, $2);
    HEAP32[$3 + 20 >> 2] = $4;
    $2 = $4 + -1 | 0;
    if ($2 >>> 0 <= $6 >>> 0) {
     break label$4;
    }
    while (1) {
     $4 = HEAPU8[$0 | 0];
     HEAP8[$0 | 0] = HEAPU8[$2 | 0];
     HEAP8[$2 | 0] = $4;
     $0 = $0 + 1 | 0;
     $2 = $2 + -1 | 0;
     if ($0 >>> 0 < $2 >>> 0) {
      continue;
     }
     break;
    }
   }
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $4 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2] - $4 | 0;
   label$6 : {
    if (!$2) {
     $0 = 0;
     break label$6;
    }
    if (($2 | 0) <= -1) {
     break label$2;
    }
    $0 = operator_20new_28unsigned_20long_29($2);
    HEAP32[$3 >> 2] = $0;
    $5 = $0 + $2 | 0;
    HEAP32[$3 + 8 >> 2] = $5;
    $4 = memcpy($0, $4, $2);
    HEAP32[$3 + 4 >> 2] = $5;
    $2 = $5 + -1 | 0;
    if ($2 >>> 0 <= $4 >>> 0) {
     break label$6;
    }
    while (1) {
     $4 = HEAPU8[$0 | 0];
     HEAP8[$0 | 0] = HEAPU8[$2 | 0];
     HEAP8[$2 | 0] = $4;
     $0 = $0 + 1 | 0;
     $2 = $2 + -1 | 0;
     if ($0 >>> 0 < $2 >>> 0) {
      continue;
     }
     break;
    }
    $5 = HEAP32[$3 + 4 >> 2];
    $0 = HEAP32[$3 >> 2];
   }
   $2 = HEAP32[$3 + 16 >> 2];
   $4 = csbiginteger_gt($2 | 0, HEAP32[$3 + 20 >> 2] - $2 | 0, $0 | 0, $5 - $0 | 0) | 0;
   if ($0) {
    HEAP32[$3 + 4 >> 2] = $0;
    operator_20delete_28void__29($0);
   }
   if ($2) {
    HEAP32[$3 + 20 >> 2] = $2;
    operator_20delete_28void__29($2);
   }
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return $4;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($3 + 16 | 0);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($3);
 abort();
}
function csbigintegerlib__BigInteger__operator__28csbigintegerlib__BigInteger_20const__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 32 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = 0;
 label$2 : {
  label$3 : {
   $6 = HEAP32[$0 >> 2];
   $2 = HEAP32[$0 + 4 >> 2] - $6 | 0;
   label$4 : {
    if (!$2) {
     break label$4;
    }
    if (($2 | 0) <= -1) {
     break label$3;
    }
    $0 = operator_20new_28unsigned_20long_29($2);
    HEAP32[$3 + 16 >> 2] = $0;
    $4 = $0 + $2 | 0;
    HEAP32[$3 + 24 >> 2] = $4;
    $6 = memcpy($0, $6, $2);
    HEAP32[$3 + 20 >> 2] = $4;
    $2 = $4 + -1 | 0;
    if ($2 >>> 0 <= $6 >>> 0) {
     break label$4;
    }
    while (1) {
     $4 = HEAPU8[$0 | 0];
     HEAP8[$0 | 0] = HEAPU8[$2 | 0];
     HEAP8[$2 | 0] = $4;
     $0 = $0 + 1 | 0;
     $2 = $2 + -1 | 0;
     if ($0 >>> 0 < $2 >>> 0) {
      continue;
     }
     break;
    }
   }
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $4 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2] - $4 | 0;
   label$6 : {
    if (!$2) {
     $0 = 0;
     break label$6;
    }
    if (($2 | 0) <= -1) {
     break label$2;
    }
    $0 = operator_20new_28unsigned_20long_29($2);
    HEAP32[$3 >> 2] = $0;
    $5 = $0 + $2 | 0;
    HEAP32[$3 + 8 >> 2] = $5;
    $4 = memcpy($0, $4, $2);
    HEAP32[$3 + 4 >> 2] = $5;
    $2 = $5 + -1 | 0;
    if ($2 >>> 0 <= $4 >>> 0) {
     break label$6;
    }
    while (1) {
     $4 = HEAPU8[$0 | 0];
     HEAP8[$0 | 0] = HEAPU8[$2 | 0];
     HEAP8[$2 | 0] = $4;
     $0 = $0 + 1 | 0;
     $2 = $2 + -1 | 0;
     if ($0 >>> 0 < $2 >>> 0) {
      continue;
     }
     break;
    }
    $5 = HEAP32[$3 + 4 >> 2];
    $0 = HEAP32[$3 >> 2];
   }
   $2 = HEAP32[$3 + 16 >> 2];
   $4 = csbiginteger_lt($2 | 0, HEAP32[$3 + 20 >> 2] - $2 | 0, $0 | 0, $5 - $0 | 0) | 0;
   if ($0) {
    HEAP32[$3 + 4 >> 2] = $0;
    operator_20delete_28void__29($0);
   }
   if ($2) {
    HEAP32[$3 + 20 >> 2] = $2;
    operator_20delete_28void__29($2);
   }
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return $4;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($3 + 16 | 0);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($3);
 abort();
}
function Neo__SmartContract__InteropService__Register_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20bool_20_28__29_28ApplicationEngine__29_2c_20long_2c_20Neo__SmartContract__TriggerType_2c_20Neo__SmartContract__CallFlags_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $6 = global$0 - 16 | 0;
 $5 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = operator_20new_28unsigned_20long_29(28);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($6, $0);
 $4 = Neo__SmartContract__InteropDescriptor__InteropDescriptor_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20bool_20_28__29_28ApplicationEngine__29_2c_20long_2c_20Neo__SmartContract__TriggerType_2c_20Neo__SmartContract__CallFlags_29($5, $0, $1, $2, $3, $4);
 if (HEAP8[$0 + 11 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 >> 2]);
 }
 label$3 : {
  $0 = HEAP32[5499];
  if (!$0) {
   $0 = 21996;
   $1 = 21996;
   break label$3;
  }
  $3 = HEAP32[$5 + 12 >> 2];
  $1 = 21996;
  while (1) {
   $2 = HEAP32[$0 + 16 >> 2];
   label$6 : {
    if ($3 >>> 0 < $2 >>> 0) {
     $2 = HEAP32[$0 >> 2];
     if ($2) {
      break label$6;
     }
     $1 = $0;
     break label$3;
    }
    if ($2 >>> 0 >= $3 >>> 0) {
     break label$3;
    }
    $1 = $0 + 4 | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    if (!$2) {
     break label$3;
    }
    $0 = $1;
   }
   $1 = $0;
   $0 = $2;
   continue;
  }
 }
 $2 = HEAP32[$1 >> 2];
 if (!$2) {
  $2 = operator_20new_28unsigned_20long_29(24);
  $3 = HEAP32[$5 + 12 >> 2];
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = $3;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$1 >> 2] = $2;
  $0 = HEAP32[HEAP32[5498] >> 2];
  $3 = $2;
  label$9 : {
   if (!$0) {
    break label$9;
   }
   HEAP32[5498] = $0;
   $3 = HEAP32[$1 >> 2];
  }
  $0 = $3;
  void_20std____2____tree_balance_after_insert_std____2____tree_node_base_void_____28std____2____tree_node_base_void____2c_20std____2____tree_node_base_void____29(HEAP32[5499], $0);
  HEAP32[5500] = HEAP32[5500] + 1;
 }
 HEAP32[$2 + 20 >> 2] = $5;
 $0 = $6 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4;
}
function std____2__enable_if___is_cpp17_forward_iterator_char_20const____value_2c_20void___type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char_20const___28char_20const__2c_20char_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = std____2__iterator_traits_char_20const____difference_type_20std____2__distance_char_20const___28char_20const__2c_20char_20const__29($1, $2);
 if ($5 >>> 0 <= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0) {
  label$3 : {
   if ($5 >>> 0 <= 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $5);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
    break label$3;
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($5);
   $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
   $6 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($7, $6);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $6);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $5);
  }
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $1);
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  }
  HEAP8[$4 + 15 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $4 + 15 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  std____2__allocator_traits_std____2__allocator_wchar_t__20___deallocate_28std____2__allocator_wchar_t___2c_20wchar_t__2c_20unsigned_20long_29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_cap_28_29_20const($0));
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_alloc_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29($0, $1);
 $4 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($1);
 $0 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0);
 HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$0 + 4 >> 2] = $3;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($1, 0);
 $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($1);
 HEAP32[$2 + 12 >> 2] = 0;
 std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($0, $2 + 12 | 0);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__init_weeks_28_29() {
 var $0 = 0;
 label$1 : {
  if (HEAP8[25848] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25848)) {
   break label$1;
  }
  $0 = 25680;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 25848) {
    continue;
   }
   break;
  }
  __cxa_guard_release(25848);
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25680, 18808);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25692, 18815);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25704, 18822);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25716, 18830);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25728, 18840);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25740, 18849);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25752, 18856);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25764, 18865);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25776, 18869);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25788, 18873);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25800, 18877);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25812, 18881);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25824, 18885);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(25836, 18889);
}
function wcsrtombs($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $7 = global$0 - 16 | 0;
 $3 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     if ($0) {
      if ($2 >>> 0 >= 4) {
       break label$5;
      }
      $3 = $2;
      break label$4;
     }
     $0 = HEAP32[$1 >> 2];
     $3 = HEAP32[$0 >> 2];
     if (!$3) {
      break label$2;
     }
     while (1) {
      $5 = 1;
      if ($3 >>> 0 >= 128) {
       $6 = -1;
       $5 = wcrtomb($7 + 12 | 0, $3, 0);
       if (($5 | 0) == -1) {
        break label$2;
       }
      }
      $3 = HEAP32[$0 + 4 >> 2];
      $0 = $0 + 4 | 0;
      $4 = $4 + $5 | 0;
      $6 = $4;
      if ($3) {
       continue;
      }
      break;
     }
     break label$2;
    }
    $5 = HEAP32[$1 >> 2];
    $3 = $2;
    while (1) {
     $4 = HEAP32[$5 >> 2];
     label$11 : {
      if ($4 + -1 >>> 0 >= 127) {
       if (!$4) {
        HEAP8[$0 | 0] = 0;
        HEAP32[$1 >> 2] = 0;
        break label$3;
       }
       $6 = -1;
       $4 = wcrtomb($0, $4, 0);
       if (($4 | 0) == -1) {
        break label$2;
       }
       $0 = $0 + $4 | 0;
       $3 = $3 - $4 | 0;
       break label$11;
      }
      HEAP8[$0 | 0] = $4;
      $5 = HEAP32[$1 >> 2];
      $0 = $0 + 1 | 0;
      $3 = $3 + -1 | 0;
     }
     $5 = $5 + 4 | 0;
     HEAP32[$1 >> 2] = $5;
     if ($3 >>> 0 > 3) {
      continue;
     }
     break;
    }
   }
   if ($3) {
    $5 = HEAP32[$1 >> 2];
    while (1) {
     $4 = HEAP32[$5 >> 2];
     label$16 : {
      if ($4 + -1 >>> 0 >= 127) {
       if (!$4) {
        HEAP8[$0 | 0] = 0;
        HEAP32[$1 >> 2] = 0;
        break label$3;
       }
       $6 = -1;
       $4 = wcrtomb($7 + 12 | 0, $4, 0);
       if (($4 | 0) == -1) {
        break label$2;
       }
       if ($3 >>> 0 < $4 >>> 0) {
        break label$3;
       }
       wcrtomb($0, HEAP32[$5 >> 2], 0);
       $0 = $0 + $4 | 0;
       $3 = $3 - $4 | 0;
       break label$16;
      }
      HEAP8[$0 | 0] = $4;
      $5 = HEAP32[$1 >> 2];
      $0 = $0 + 1 | 0;
      $3 = $3 + -1 | 0;
     }
     $5 = $5 + 4 | 0;
     HEAP32[$1 >> 2] = $5;
     if ($3) {
      continue;
     }
     break;
    }
   }
   $6 = $2;
   break label$2;
  }
  $6 = $2 - $3 | 0;
 }
 $0 = $7 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $6;
}
function void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = HEAP32[std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_deleter_28_29($0) >> 2];
 $3 = HEAP32[$2 >> 2] - std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0) | 0;
 label$2 : {
  if ($3 >>> 0 < std____2__numeric_limits_unsigned_20long___max_28_29() >>> 1 >>> 0) {
   $3 = $3 << 1;
   break label$2;
  }
  $3 = std____2__numeric_limits_unsigned_20long___max_28_29();
 }
 $3 = $3 ? $3 : 4;
 $7 = HEAP32[$1 >> 2];
 $8 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 if (($5 | 0) == 167) {
  $6 = 0;
 } else {
  $6 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 }
 $6 = dlrealloc($6, $3);
 if ($6) {
  $7 = $7 - $8 >> 2;
  if (($5 | 0) != 167) {
   std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___release_28_29($0);
  }
  HEAP32[$4 + 4 >> 2] = 166;
  $5 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20int__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $6, $4 + 4 | 0);
  std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____29($0, $5);
  std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____unique_ptr_28_29($5);
  wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + ($7 << 2) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + ($3 & -4) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____throw_bad_alloc_28_29();
 abort();
}
function std____2__enable_if___is_cpp17_forward_iterator_char____value_2c_20void___type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char___28char__2c_20char__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = std____2__iterator_traits_char____difference_type_20std____2__distance_char___28char__2c_20char__29($1, $2);
 if ($5 >>> 0 <= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0) {
  label$3 : {
   if ($5 >>> 0 <= 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $5);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
    break label$3;
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($5);
   $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
   $6 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($7, $6);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $6);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $5);
  }
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $1);
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  }
  HEAP8[$4 + 15 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($3, $4 + 15 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__ucs4_to_utf8_28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20int_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5, $6, $7) {
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 label$1 : {
  if ($7 & 2) {
   $7 = 1;
   if (($4 - $3 | 0) < 3) {
    break label$1;
   }
   HEAP32[$5 >> 2] = $3 + 1;
   HEAP8[$3 | 0] = 239;
   $3 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $3 + 1;
   HEAP8[$3 | 0] = 187;
   $3 = HEAP32[$5 >> 2];
   HEAP32[$5 >> 2] = $3 + 1;
   HEAP8[$3 | 0] = 191;
  }
  $3 = HEAP32[$2 >> 2];
  while (1) {
   if ($3 >>> 0 >= $1 >>> 0) {
    $7 = 0;
    break label$1;
   }
   $7 = 2;
   $3 = HEAP32[$3 >> 2];
   if ($3 >>> 0 > $6 >>> 0 | ($3 & -2048) == 55296) {
    break label$1;
   }
   label$5 : {
    label$6 : {
     if ($3 >>> 0 <= 127) {
      $7 = 1;
      $0 = HEAP32[$5 >> 2];
      if (($4 - $0 | 0) < 1) {
       break label$1;
      }
      HEAP32[$5 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $3;
      break label$6;
     }
     if ($3 >>> 0 <= 2047) {
      $7 = HEAP32[$5 >> 2];
      if (($4 - $7 | 0) < 2) {
       break label$5;
      }
      HEAP32[$5 >> 2] = $7 + 1;
      HEAP8[$7 | 0] = $3 >>> 6 | 192;
      $7 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $7 + 1;
      HEAP8[$7 | 0] = $3 & 63 | 128;
      break label$6;
     }
     $7 = HEAP32[$5 >> 2];
     $0 = $4 - $7 | 0;
     if ($3 >>> 0 <= 65535) {
      if (($0 | 0) < 3) {
       break label$5;
      }
      HEAP32[$5 >> 2] = $7 + 1;
      HEAP8[$7 | 0] = $3 >>> 12 | 224;
      $7 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $7 + 1;
      HEAP8[$7 | 0] = $3 >>> 6 & 63 | 128;
      $7 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $7 + 1;
      HEAP8[$7 | 0] = $3 & 63 | 128;
      break label$6;
     }
     if (($0 | 0) < 4) {
      break label$5;
     }
     HEAP32[$5 >> 2] = $7 + 1;
     HEAP8[$7 | 0] = $3 >>> 18 | 240;
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 1;
     HEAP8[$7 | 0] = $3 >>> 12 & 63 | 128;
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 1;
     HEAP8[$7 | 0] = $3 >>> 6 & 63 | 128;
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 1;
     HEAP8[$7 | 0] = $3 & 63 | 128;
    }
    $3 = HEAP32[$2 >> 2] + 4 | 0;
    HEAP32[$2 >> 2] = $3;
    continue;
   }
   break;
  }
  return 1;
 }
 return $7;
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 $5 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = $0;
 HEAP16[$5 + 28 >> 1] = HEAPU8[13888] | HEAPU8[13889] << 8;
 HEAP32[$5 + 24 >> 2] = HEAPU8[13884] | HEAPU8[13885] << 8 | (HEAPU8[13886] << 16 | HEAPU8[13887] << 24);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($5 + 24 | 1, 13876, 1, std____2__ios_base__flags_28_29_20const($2));
 $7 = std____2__ios_base__flags_28_29_20const($2);
 $0 = $5 + -16 | 0;
 $8 = $0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $6 = std____2____cloc_28_29();
 HEAP32[$5 >> 2] = $4;
 $4 = $7 >>> 9 & 1;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $4 + 13 | 0, $6, $5 + 24 | 0, $5) + $0 | 0;
 $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $7, $2);
 $4 = $8 - (($4 << 3 | 96) + 11 & 112) | 0;
 $8 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 std____2__ios_base__getloc_28_29_20const($5 + 8 | 0, $2);
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $6, $7, $4, $5 + 20 | 0, $5 + 16 | 0, $5 + 8 | 0);
 std____2__locale___locale_28_29($5 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $4, HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], $2, $3);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 24 | 0, $0);
 label$2 : {
  if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($4)) {
   break label$2;
  }
  std____2__ios_base__flags_28_29_20const(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
  std____2__ios_base__getloc_28_29_20const($2 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
  $6 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($2 + 16 | 0);
  std____2__locale___locale_28_29($2 + 16 | 0);
  $7 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
  $5 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  $3 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($5);
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($6, HEAP32[$7 >> 2], $5, $3, $1), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($2 + 16 | 0)) {
   break label$2;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($4);
 $1 = $2 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 $5 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = $0;
 HEAP16[$5 + 28 >> 1] = HEAPU8[13888] | HEAPU8[13889] << 8;
 HEAP32[$5 + 24 >> 2] = HEAPU8[13884] | HEAPU8[13885] << 8 | (HEAPU8[13886] << 16 | HEAPU8[13887] << 24);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($5 + 24 | 1, 13876, 0, std____2__ios_base__flags_28_29_20const($2));
 $7 = std____2__ios_base__flags_28_29_20const($2);
 $0 = $5 + -16 | 0;
 $8 = $0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $6 = std____2____cloc_28_29();
 HEAP32[$5 >> 2] = $4;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $7 >>> 9 & 1 | 12, $6, $5 + 24 | 0, $5) + $0 | 0;
 $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $7, $2);
 $4 = $8 + -96 | 0;
 $8 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 std____2__ios_base__getloc_28_29_20const($5 + 8 | 0, $2);
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $6, $7, $4, $5 + 20 | 0, $5 + 16 | 0, $5 + 8 | 0);
 std____2__locale___locale_28_29($5 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $4, HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], $2, $3);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $0 = global$0 - 32 | 0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $6 = $0;
 HEAP32[$6 + 24 >> 2] = 37;
 HEAP32[$6 + 28 >> 2] = 0;
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($6 + 24 | 1, 13878, 0, std____2__ios_base__flags_28_29_20const($2));
 $7 = std____2__ios_base__flags_28_29_20const($2);
 $0 = $6 + -32 | 0;
 $9 = $0;
 $8 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 $8 = std____2____cloc_28_29();
 HEAP32[$6 >> 2] = $4;
 HEAP32[$6 + 4 >> 2] = $5;
 $7 = $7 >>> 9 & 1 | 22;
 $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $7 + 1 | 0, $8, $6 + 24 | 0, $6) + $0 | 0;
 $5 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $8, $2);
 $7 = $9 - (($7 << 3) + 11 & 240) | 0;
 $4 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2__ios_base__getloc_28_29_20const($6 + 8 | 0, $2);
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $5, $8, $7, $6 + 20 | 0, $6 + 16 | 0, $6 + 8 | 0);
 std____2__locale___locale_28_29($6 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $7, HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], $2, $3);
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $0 = global$0 - 32 | 0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $6 = $0;
 HEAP32[$6 + 24 >> 2] = 37;
 HEAP32[$6 + 28 >> 2] = 0;
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($6 + 24 | 1, 13878, 1, std____2__ios_base__flags_28_29_20const($2));
 $7 = std____2__ios_base__flags_28_29_20const($2);
 $0 = $6 + -32 | 0;
 $9 = $0;
 $8 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 $8 = std____2____cloc_28_29();
 HEAP32[$6 >> 2] = $4;
 HEAP32[$6 + 4 >> 2] = $5;
 $7 = $7 >>> 9 & 1;
 $8 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $7 + 23 | 0, $8, $6 + 24 | 0, $6) + $0 | 0;
 $5 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $8, $2);
 $7 = $9 - (($7 << 3 | 176) + 11 & 240) | 0;
 $4 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2__ios_base__getloc_28_29_20const($6 + 8 | 0, $2);
 std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $5, $8, $7, $6 + 20 | 0, $6 + 16 | 0, $6 + 8 | 0);
 std____2__locale___locale_28_29($6 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $7, HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], $2, $3);
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0));
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29($0, $1);
 $4 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($1);
 $0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0);
 HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$0 + 4 >> 2] = $3;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($1, 0);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($1);
 HEAP8[$2 + 15 | 0] = 0;
 std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $2 + 15 | 0);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0;
 $10 = global$0 - 16 | 0;
 $11 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 HEAP32[$10 + 12 >> 2] = $0;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     if (HEAP32[$3 >> 2] != ($2 | 0)) {
      break label$5;
     }
     $11 = HEAP32[$9 + 96 >> 2] == ($0 | 0);
     if (HEAP32[$9 + 100 >> 2] != ($0 | 0) ? !$11 : 0) {
      break label$5;
     }
     HEAP32[$3 >> 2] = $2 + 1;
     HEAP8[$2 | 0] = $11 ? 43 : 45;
     break label$4;
    }
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) | ($0 | 0) != ($5 | 0)) {
     break label$3;
    }
    $0 = 0;
    $9 = HEAP32[$8 >> 2];
    if (($9 - $7 | 0) > 159) {
     break label$2;
    }
    $0 = HEAP32[$4 >> 2];
    HEAP32[$8 >> 2] = $9 + 4;
    HEAP32[$9 >> 2] = $0;
   }
   $0 = 0;
   HEAP32[$4 >> 2] = 0;
   break label$2;
  }
  $0 = -1;
  $9 = wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($9, $9 + 104 | 0, $10 + 12 | 0) - $9 | 0;
  if (($9 | 0) > 92) {
   break label$2;
  }
  $6 = $9 >> 2;
  $5 = $1 + -8 | 0;
  label$7 : {
   if ($5 >>> 0 > 2) {
    if (($1 | 0) != 16 | ($9 | 0) < 88) {
     break label$7;
    }
    $9 = HEAP32[$3 >> 2];
    if (($9 | 0) == ($2 | 0) | ($9 - $2 | 0) > 2 | HEAPU8[$9 + -1 | 0] != 48) {
     break label$2;
    }
    $0 = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$3 >> 2] = $9 + 1;
    HEAP8[$9 | 0] = HEAPU8[$6 + 13840 | 0];
    break label$2;
   }
   if (!($5 - 1)) {
    break label$7;
   }
   if (($6 | 0) >= ($1 | 0)) {
    break label$2;
   }
  }
  $0 = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = $0 + 1;
  HEAP8[$0 | 0] = HEAPU8[$6 + 13840 | 0];
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
  $0 = 0;
 }
 $1 = $10 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2__allocator_traits_std____2__allocator_char__20___select_on_container_copy_construction_28std____2__allocator_char__20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($1));
 $3 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20__28std____2____default_init_tag___2c_20std____2__allocator_char____29($0, $2 + 8 | 0, $2);
 label$2 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($1)) {
   $1 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($1);
   $3 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($3);
   HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $4 = HEAP32[$1 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   break label$2;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, char_20const__20std____2____to_address_char_20const__28char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($1)), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($1));
 }
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function void_20std____2____double_or_nothing_wchar_t__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = HEAP32[std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_deleter_28_29($0) >> 2];
 $3 = HEAP32[$2 >> 2] - std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0) | 0;
 label$2 : {
  if ($3 >>> 0 < std____2__numeric_limits_unsigned_20long___max_28_29() >>> 1 >>> 0) {
   $3 = $3 << 1;
   break label$2;
  }
  $3 = std____2__numeric_limits_unsigned_20long___max_28_29();
 }
 $3 = $3 ? $3 : 4;
 $7 = HEAP32[$1 >> 2];
 $8 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 if (($5 | 0) == 167) {
  $6 = 0;
 } else {
  $6 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 }
 $6 = dlrealloc($6, $3);
 if ($6) {
  $7 = $7 - $8 >> 2;
  if (($5 | 0) != 167) {
   std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___release_28_29($0);
  }
  HEAP32[$4 + 4 >> 2] = 166;
  $5 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $6, $4 + 4 | 0);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____29($0, $5);
  std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($5);
  wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + ($7 << 2) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + ($3 & -4) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____throw_bad_alloc_28_29();
 abort();
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 24 | 0, $0);
 label$2 : {
  if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($4)) {
   break label$2;
  }
  std____2__ios_base__getloc_28_29_20const($2 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
  $6 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($2 + 16 | 0);
  std____2__locale___locale_28_29($2 + 16 | 0);
  $7 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
  $5 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  $3 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($5);
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const($6, HEAP32[$7 >> 2], $5, $3, $1), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($2 + 16 | 0)) {
   break label$2;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($4);
 $1 = $2 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 24 | 0, $0);
 label$2 : {
  if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($4)) {
   break label$2;
  }
  std____2__ios_base__getloc_28_29_20const($2 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
  $6 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($2 + 16 | 0);
  std____2__locale___locale_28_29($2 + 16 | 0);
  $7 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
  $5 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  $3 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($5);
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const($6, HEAP32[$7 >> 2], $5, $3, $1), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($2 + 16 | 0)) {
   break label$2;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($4);
 $1 = $2 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28void_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 24 | 0, $0);
 label$2 : {
  if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($4)) {
   break label$2;
  }
  std____2__ios_base__getloc_28_29_20const($2 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
  $6 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($2 + 16 | 0);
  std____2__locale___locale_28_29($2 + 16 | 0);
  $7 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
  $5 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  $3 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($5);
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const($6, HEAP32[$7 >> 2], $5, $3, $1), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($2 + 16 | 0)) {
   break label$2;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($4);
 $1 = $2 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function neopt__jhelper__ParseBoolean_28neopt__ITextReader__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 while (1) {
  label$3 : {
   label$4 : {
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 32) {
     break label$4;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 9) {
     break label$4;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) == 13) {
     break label$4;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0) != 10) {
     break label$3;
    }
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
   continue;
  }
  break;
 }
 $3 = (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) & 255) + -102 | 0;
 label$5 : {
  label$6 : {
   if ($3 >>> 0 > 14) {
    break label$6;
   }
   label$7 : {
    switch ($3 - 1 | 0) {
    case 13:
     $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
     $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
     if (($3 | 0) != 114 | ($4 | 0) != 117 | ($1 | 0) != 101) {
      break label$6;
     }
     break label$5;
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
     break label$6;
    default:
     break label$7;
    }
   }
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0;
   if (($3 | 0) != 97 | ($4 | 0) != 108 | ($5 | 0) != 115) {
    break label$6;
   }
   if (($1 | 0) == 101) {
    break label$5;
   }
  }
  HEAP32[$2 + 4 >> 2] = 4393;
  HEAP32[$2 >> 2] = 4380;
  iprintf(3084, $2);
  exit(1);
  abort();
 }
 $1 = operator_20new_28unsigned_20long_29(16);
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 >> 2] = 4432;
 HEAP32[$1 + 4 >> 2] = $1 + 8;
 HEAP32[$0 >> 2] = $1;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 $5 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = $0;
 HEAP16[$5 + 28 >> 1] = HEAPU8[13888] | HEAPU8[13889] << 8;
 HEAP32[$5 + 24 >> 2] = HEAPU8[13884] | HEAPU8[13885] << 8 | (HEAPU8[13886] << 16 | HEAPU8[13887] << 24);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($5 + 24 | 1, 13876, 0, std____2__ios_base__flags_28_29_20const($2));
 $7 = std____2__ios_base__flags_28_29_20const($2);
 $0 = $5 + -16 | 0;
 $8 = $0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $6 = std____2____cloc_28_29();
 HEAP32[$5 >> 2] = $4;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $7 >>> 9 & 1 | 12, $6, $5 + 24 | 0, $5) + $0 | 0;
 $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $7, $2);
 $4 = $8 + -32 | 0;
 $8 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 std____2__ios_base__getloc_28_29_20const($5 + 8 | 0, $2);
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $6, $7, $4, $5 + 20 | 0, $5 + 16 | 0, $5 + 8 | 0);
 std____2__locale___locale_28_29($5 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $4, HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], $2, $3);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0, $12 = 0;
 $10 = global$0 - 16 | 0;
 $11 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 HEAP8[$10 + 15 | 0] = $0;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     if (HEAP32[$3 >> 2] != ($2 | 0)) {
      break label$5;
     }
     $12 = $0 & 255;
     $11 = ($12 | 0) == HEAPU8[$9 + 24 | 0];
     if (HEAPU8[$9 + 25 | 0] != ($12 | 0) ? !$11 : 0) {
      break label$5;
     }
     HEAP32[$3 >> 2] = $2 + 1;
     HEAP8[$2 | 0] = $11 ? 43 : 45;
     break label$4;
    }
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) | ($0 | 0) != ($5 | 0)) {
     break label$3;
    }
    $0 = 0;
    $9 = HEAP32[$8 >> 2];
    if (($9 - $7 | 0) > 159) {
     break label$2;
    }
    $0 = HEAP32[$4 >> 2];
    HEAP32[$8 >> 2] = $9 + 4;
    HEAP32[$9 >> 2] = $0;
   }
   $0 = 0;
   HEAP32[$4 >> 2] = 0;
   break label$2;
  }
  $0 = -1;
  $9 = char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($9, $9 + 26 | 0, $10 + 15 | 0) - $9 | 0;
  if (($9 | 0) > 23) {
   break label$2;
  }
  $6 = $1 + -8 | 0;
  label$7 : {
   if ($6 >>> 0 > 2) {
    if (($1 | 0) != 16 | ($9 | 0) < 22) {
     break label$7;
    }
    $6 = HEAP32[$3 >> 2];
    if (($6 | 0) == ($2 | 0) | ($6 - $2 | 0) > 2 | HEAPU8[$6 + -1 | 0] != 48) {
     break label$2;
    }
    $0 = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$3 >> 2] = $6 + 1;
    HEAP8[$6 | 0] = HEAPU8[$9 + 13840 | 0];
    break label$2;
   }
   if (!($6 - 1)) {
    break label$7;
   }
   if (($9 | 0) >= ($1 | 0)) {
    break label$2;
   }
  }
  $0 = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = $0 + 1;
  HEAP8[$0 | 0] = HEAPU8[$9 + 13840 | 0];
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
  $0 = 0;
 }
 $1 = $10 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $0 = global$0 - 32 | 0;
 $5 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = $0;
 HEAP16[$5 + 28 >> 1] = HEAPU8[13888] | HEAPU8[13889] << 8;
 HEAP32[$5 + 24 >> 2] = HEAPU8[13884] | HEAPU8[13885] << 8 | (HEAPU8[13886] << 16 | HEAPU8[13887] << 24);
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($5 + 24 | 1, 13876, 1, std____2__ios_base__flags_28_29_20const($2));
 $7 = std____2__ios_base__flags_28_29_20const($2);
 $0 = $5 + -16 | 0;
 $8 = $0;
 $6 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $6 = std____2____cloc_28_29();
 HEAP32[$5 >> 2] = $4;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, ($7 >>> 9 & 1) + 13 | 0, $6, $5 + 24 | 0, $5) + $0 | 0;
 $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $7, $2);
 $4 = $8 + -32 | 0;
 $8 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 std____2__ios_base__getloc_28_29_20const($5 + 8 | 0, $2);
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $6, $7, $4, $5 + 20 | 0, $5 + 16 | 0, $5 + 8 | 0);
 std____2__locale___locale_28_29($5 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $4, HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], $2, $3);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0) >>> 0 >= $2 >>> 0) {
  label$3 : {
   if ($2 >>> 0 <= 1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $2);
    $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
    break label$3;
   }
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($2);
   $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
   $5 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($6, $5);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $3);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $5);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $2);
  }
  std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($3), $1, $2);
  HEAP32[$4 + 12 >> 2] = 0;
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29(($2 << 2) + $3 | 0, $4 + 12 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28double_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 24 | 0, $0);
 label$2 : {
  if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($4)) {
   break label$2;
  }
  std____2__ios_base__getloc_28_29_20const($2 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
  $6 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($2 + 16 | 0);
  std____2__locale___locale_28_29($2 + 16 | 0);
  $7 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
  $5 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  $3 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($5);
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const($6, HEAP32[$7 >> 2], $5, $3, $1), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($2 + 16 | 0)) {
   break label$2;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($4);
 $3 = $2 + 32 | 0;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 return $0;
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___overflow_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = global$0 - 16 | 0;
 $2 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $2 = 0;
 label$2 : {
  if (($1 | 0) == -1) {
   break label$2;
  }
  $8 = HEAP32[$0 + 8 >> 2];
  $9 = HEAP32[$0 + 12 >> 2];
  $3 = HEAP32[$0 + 24 >> 2];
  $5 = HEAP32[$0 + 28 >> 2];
  label$3 : {
   if (($3 | 0) != ($5 | 0)) {
    $4 = HEAP32[$0 + 44 >> 2];
    break label$3;
   }
   $2 = -1;
   if (!(HEAPU8[$0 + 48 | 0] & 16)) {
    break label$2;
   }
   $6 = HEAP32[$0 + 44 >> 2];
   $5 = HEAP32[$0 + 20 >> 2];
   $2 = $0 + 32 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($2, 0);
   $4 = 10;
   $6 = $6 - $5 | 0;
   $10 = $3 - $5 | 0;
   $4 = HEAP8[$0 + 43 | 0] <= -1 ? (HEAP32[$0 + 40 >> 2] & 2147483647) + -1 | 0 : $4;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($2, $4, 0);
   $3 = HEAP8[$2 + 11 | 0];
   label$7 : {
    if (($3 | 0) <= -1) {
     $2 = HEAP32[$0 + 32 >> 2];
     $3 = HEAP32[$0 + 36 >> 2];
     break label$7;
    }
    $3 = $3 & 255;
   }
   HEAP32[$0 + 20 >> 2] = $2;
   $5 = $3 + $2 | 0;
   HEAP32[$0 + 28 >> 2] = $5;
   $4 = $2 + $6 | 0;
   HEAP32[$0 + 44 >> 2] = $4;
   $3 = $2 + $10 | 0;
   HEAP32[$0 + 24 >> 2] = $3;
  }
  $2 = $3 + 1 | 0;
  HEAP32[$7 + 12 >> 2] = $2;
  $6 = HEAP32[($2 >>> 0 < $4 >>> 0 ? $0 + 44 | 0 : $7 + 12 | 0) >> 2];
  HEAP32[$0 + 44 >> 2] = $6;
  if (HEAPU8[$0 + 48 | 0] & 8) {
   $8 = $9 - $8 | 0;
   $4 = $0 + 32 | 0;
   $4 = HEAP8[$0 + 43 | 0] <= -1 ? HEAP32[$4 >> 2] : $4;
   HEAP32[$0 + 16 >> 2] = $6;
   HEAP32[$0 + 8 >> 2] = $4;
   HEAP32[$0 + 12 >> 2] = $4 + $8;
  }
  if (($3 | 0) == ($5 | 0)) {
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1 & 255) | 0;
   break label$2;
  }
  HEAP32[$0 + 24 >> 2] = $2;
  HEAP8[$3 | 0] = $1;
  $2 = $1 & 255;
 }
 $0 = $7 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function Neo__VM__ScriptBuilder__EmitSysCall_28unsigned_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 $3 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = $5 + 8 | 0;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 4988, 27), $2);
 std____2__ios_base__getloc_28_29_20const($4, $3 + HEAP32[HEAP32[$3 >> 2] + -12 >> 2] | 0);
 $4 = std____2__locale__use_facet_28std____2__locale__id__29_20const($5 + 8 | 0, 25448);
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 28 >> 2]]($4, 10) | 0;
 std____2__locale___locale_28_29($5 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $4);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
 $3 = $1 + 12 | 0;
 neopt__BinaryWriter__Write_28unsigned_20char_29($3, 65);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]]($3, $2 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]]($3, $2 >>> 8 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]]($3, $2 >>> 16 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]]($3, $2 >>> 24 | 0);
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 label$2 : {
  $4 = HEAP32[$1 >> 2];
  $2 = HEAP32[$1 + 4 >> 2] - $4 | 0;
  if ($2) {
   if (($2 | 0) <= -1) {
    break label$2;
   }
   $3 = operator_20new_28unsigned_20long_29($2);
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 4 >> 2] = $3;
   $6 = $2 + $3 | 0;
   HEAP32[$0 + 8 >> 2] = $6;
   memcpy($3, $4, $2);
   HEAP32[$0 + 4 >> 2] = $6;
  }
  HEAP32[$0 + 12 >> 2] = 4532;
  $2 = HEAP32[$1 + 20 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$0 + 20 >> 2] = $2;
  HEAP8[$0 + 24 | 0] = HEAPU8[$1 + 24 | 0];
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____append_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = global$0 - 32 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 label$2 : {
  if (HEAP32[std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____end_cap_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 2 >>> 0 >= $1 >>> 0) {
   std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_at_end_28unsigned_20long_29($0, $1);
   break label$2;
  }
  $2 = std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0);
  $2 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___29($3 + 8 | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($0) + $1 | 0), std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($0), $2);
  std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______construct_at_end_28unsigned_20long_29($2, $1);
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____swap_out_circular_buffer_28std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____29($0, $2);
  std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul________split_buffer_28_29($2);
 }
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0) >>> 0 >= $1 >>> 0) {
  label$3 : {
   if ($1 >>> 0 <= 1) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $1);
    $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
    break label$3;
   }
   $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($1);
   $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
   $5 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($6, $5);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $3);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $5);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $1);
  }
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20unsigned_20long_2c_20wchar_t_29(wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($3), $1, $2);
  HEAP32[$4 + 12 >> 2] = 0;
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29(($1 << 2) + $3 | 0, $4 + 12 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function neopt__vhelper__ToHexString_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $2 = global$0 - 144 | 0;
 $6 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$2 + 64 >> 2] = 2532;
 HEAP32[$2 >> 2] = 2512;
 HEAP32[$2 + 8 >> 2] = 2372;
 HEAP32[$2 + 4 >> 2] = 0;
 $8 = $2 - -64 | 0;
 $4 = $2 + 12 | 0;
 std____2__ios_base__init_28void__29($8, $4);
 HEAP32[$2 + 136 >> 2] = 0;
 HEAP32[$2 + 140 >> 2] = -1;
 HEAP32[$2 + 64 >> 2] = 2392;
 HEAP32[$2 >> 2] = 2352;
 HEAP32[$2 + 8 >> 2] = 2372;
 $9 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($4);
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = 0;
 HEAP32[$2 + 56 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 24;
 HEAP32[$2 + 12 >> 2] = 2672;
 $5 = HEAP32[$1 >> 2];
 if (($5 | 0) != HEAP32[$1 + 4 >> 2]) {
  $10 = $2 + 20 | 0;
  $11 = $2 + 84 | 0;
  $6 = $2 + 8 | 0;
  while (1) {
   $3 = HEAP32[$2 + 8 >> 2] + -12 | 0;
   HEAP32[HEAP32[$3 >> 2] + $11 >> 2] = 48;
   HEAP32[HEAP32[$3 >> 2] + $10 >> 2] = 2;
   $3 = HEAP32[$3 >> 2] + $4 | 0;
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -75 | 8;
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($6, HEAPU8[$5 + $7 | 0]);
   $7 = $7 + 1 | 0;
   $5 = HEAP32[$1 >> 2];
   if ($7 >>> 0 < HEAP32[$1 + 4 >> 2] - $5 >>> 0) {
    continue;
   }
   break;
  }
 }
 std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($0, $4);
 HEAP32[$2 + 64 >> 2] = 2392;
 HEAP32[$2 >> 2] = 2352;
 HEAP32[$2 + 12 >> 2] = 2672;
 HEAP32[$2 + 8 >> 2] = 2372;
 if (HEAP8[$2 + 55 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 + 44 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($9);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($2, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($8);
 $0 = $2 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function neopt__IBinaryReader__ReadBytes_28int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  label$3 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0) != -1) {
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0) < ($2 | 0)) {
     break label$3;
    }
   }
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   if ($2) {
    if (($2 | 0) <= -1) {
     break label$2;
    }
    $5 = operator_20new_28unsigned_20long_29($2);
    HEAP32[$0 >> 2] = $5;
    $4 = $2 + $5 | 0;
    HEAP32[$0 + 8 >> 2] = $4;
    memset($5, 0, $2);
    HEAP32[$0 + 4 >> 2] = $4;
    while (1) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
     HEAP8[HEAP32[$0 >> 2] + $6 | 0] = $2;
     $6 = $6 + 1 | 0;
     if ($6 >>> 0 < HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >>> 0) {
      continue;
     }
     break;
    }
   }
   $0 = $3 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return;
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__endl_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(24288, 3847), $2), 3862), FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1) | 0));
  HEAP32[$3 + 4 >> 2] = 3891;
  HEAP32[$3 >> 2] = 3881;
  iprintf(3084, $3);
  exit(1);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $0 = global$0 - 32 | 0;
 $7 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $6 = $0;
 HEAP32[$6 + 24 >> 2] = 37;
 HEAP32[$6 + 28 >> 2] = 0;
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($6 + 24 | 1, 13878, 0, std____2__ios_base__flags_28_29_20const($2));
 $8 = std____2__ios_base__flags_28_29_20const($2);
 $0 = $6 + -32 | 0;
 $9 = $0;
 $7 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $7 = std____2____cloc_28_29();
 HEAP32[$6 >> 2] = $4;
 HEAP32[$6 + 4 >> 2] = $5;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, ($8 >>> 9 & 1 | 22) + 1 | 0, $7, $6 + 24 | 0, $6) + $0 | 0;
 $5 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $7, $2);
 $8 = $9 + -48 | 0;
 $4 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2__ios_base__getloc_28_29_20const($6 + 8 | 0, $2);
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $5, $7, $8, $6 + 20 | 0, $6 + 16 | 0, $6 + 8 | 0);
 std____2__locale___locale_28_29($6 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $8, HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], $2, $3);
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function void_20std____2____double_or_nothing_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = HEAP32[std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_deleter_28_29($0) >> 2];
 $3 = HEAP32[$2 >> 2] - std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0) | 0;
 label$2 : {
  if ($3 >>> 0 < std____2__numeric_limits_unsigned_20long___max_28_29() >>> 1 >>> 0) {
   $3 = $3 << 1;
   break label$2;
  }
  $3 = std____2__numeric_limits_unsigned_20long___max_28_29();
 }
 $3 = $3 ? $3 : 1;
 $7 = HEAP32[$1 >> 2];
 $8 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 if (($5 | 0) == 167) {
  $6 = 0;
 } else {
  $6 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0);
 }
 $6 = dlrealloc($6, $3);
 if ($6) {
  $7 = $7 - $8 | 0;
  if (($5 | 0) != 167) {
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___release_28_29($0);
  }
  HEAP32[$4 + 4 >> 2] = 166;
  $5 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $6, $4 + 4 | 0);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $5);
  std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($5);
  wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + $7 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0) + $3 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____throw_bad_alloc_28_29();
 abort();
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $8 = HEAP32[$1 + 44 >> 2];
 $9 = HEAP32[$1 + 24 >> 2];
 if ($8 >>> 0 < $9 >>> 0) {
  HEAP32[$1 + 44 >> 2] = $9;
  $8 = $9;
 }
 $12 = -1;
 $13 = -1;
 $6 = $5 & 24;
 label$2 : {
  if (!$6 | (($6 | 0) == 24 ? ($4 | 0) == 1 : 0)) {
   break label$2;
  }
  if ($8) {
   $6 = $1 + 32 | 0;
   $6 = HEAP8[$1 + 43 | 0] <= -1 ? HEAP32[$6 >> 2] : $6;
   $7 = $8 - $6 | 0;
   $6 = $7 >> 31;
   $14 = $7;
   $15 = $6;
  }
  if ($4 >>> 0 > 2) {
   break label$2;
  }
  label$5 : {
   label$6 : {
    switch ($4 - 1 | 0) {
    case 0:
     if ($5 & 8) {
      $7 = HEAP32[$1 + 12 >> 2] - HEAP32[$1 + 8 >> 2] | 0;
      $6 = $7 >> 31;
      $10 = $7;
      $11 = $6;
      break label$5;
     }
     $7 = $9 - HEAP32[$1 + 20 >> 2] | 0;
     $6 = $7 >> 31;
     $10 = $7;
     $11 = $6;
     break label$5;
    case 1:
     break label$6;
    default:
     break label$5;
    }
   }
   $10 = $14;
   $6 = $15;
   $11 = $6;
  }
  $6 = $3;
  $7 = $11;
  $3 = $6 + $7 | 0;
  $7 = $10;
  $2 = $7 + $2 | 0;
  if ($2 >>> 0 < $7 >>> 0) {
   $3 = $3 + 1 | 0;
  }
  $6 = $2;
  if (($3 | 0) < 0 ? 1 : ($3 | 0) <= 0 ? $6 >>> 0 >= 0 ? 0 : 1 : 0) {
   break label$2;
  }
  $7 = $14;
  $6 = $15;
  if (($6 | 0) < ($3 | 0) ? 1 : ($6 | 0) <= ($3 | 0) ? $7 >>> 0 >= $2 >>> 0 ? 0 : 1 : 0) {
   break label$2;
  }
  $4 = $5 & 8;
  $7 = $3;
  label$9 : {
   if (!($3 | $2)) {
    break label$9;
   }
   if (HEAP32[$1 + 12 >> 2] ? 0 : $4) {
    break label$2;
   }
   if (!($5 & 16)) {
    break label$9;
   }
   if (!$9) {
    break label$2;
   }
  }
  if ($4) {
   HEAP32[$1 + 16 >> 2] = $8;
   HEAP32[$1 + 12 >> 2] = $2 + HEAP32[$1 + 8 >> 2];
  }
  if ($5 & 16) {
   HEAP32[$1 + 24 >> 2] = $2 + HEAP32[$1 + 20 >> 2];
   $7 = 0;
  }
  $12 = $2;
  $13 = $3;
 }
 $6 = $0;
 HEAP32[$6 + 8 >> 2] = $12;
 $7 = $13;
 HEAP32[$6 + 12 >> 2] = $7;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $0 = global$0 - 32 | 0;
 $7 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $6 = $0;
 HEAP32[$6 + 24 >> 2] = 37;
 HEAP32[$6 + 28 >> 2] = 0;
 std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($6 + 24 | 1, 13878, 1, std____2__ios_base__flags_28_29_20const($2));
 $8 = std____2__ios_base__flags_28_29_20const($2);
 $0 = $6 + -32 | 0;
 $9 = $0;
 $7 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $7 = std____2____cloc_28_29();
 HEAP32[$6 >> 2] = $4;
 HEAP32[$6 + 4 >> 2] = $5;
 $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, ($8 >>> 9 & 1) + 23 | 0, $7, $6 + 24 | 0, $6) + $0 | 0;
 $5 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $7, $2);
 $8 = $9 + -48 | 0;
 $4 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2__ios_base__getloc_28_29_20const($6 + 8 | 0, $2);
 std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $5, $7, $8, $6 + 20 | 0, $6 + 16 | 0, $6 + 8 | 0);
 std____2__locale___locale_28_29($6 + 8 | 0);
 $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $8, HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], $2, $3);
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function unsigned_20long_20long_20std____2____num_get_unsigned_integral_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = global$0 - 16 | 0;
 $4 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     if (($0 | 0) != ($1 | 0)) {
      label$7 : {
       label$8 : {
        $6 = HEAPU8[$0 | 0];
        if (($6 | 0) != 45) {
         break label$8;
        }
        $0 = $0 + 1 | 0;
        if (($1 | 0) != ($0 | 0)) {
         break label$8;
        }
        break label$7;
       }
       $8 = HEAP32[__errno_location() >> 2];
       wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $0 = strtoull_l($0, $5 + 12 | 0, $3, std____2____cloc_28_29());
       $3 = $0;
       $4 = i64toi32_i32$HIGH_BITS;
       $0 = HEAP32[__errno_location() >> 2];
       label$9 : {
        if ($0) {
         if (HEAP32[$5 + 12 >> 2] != ($1 | 0)) {
          break label$9;
         }
         if (($0 | 0) == 68) {
          break label$4;
         }
         break label$5;
        }
        wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $8, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        if (HEAP32[$5 + 12 >> 2] == ($1 | 0)) {
         break label$5;
        }
       }
      }
     }
     HEAP32[$2 >> 2] = 4;
     $0 = 0;
     break label$2;
    }
    $1 = std____2__numeric_limits_unsigned_20long_20long___max_28_29();
    $0 = i64toi32_i32$HIGH_BITS;
    if (($4 | 0) == ($0 | 0) & $1 >>> 0 >= $3 >>> 0 | $0 >>> 0 > $4 >>> 0) {
     break label$3;
    }
   }
   HEAP32[$2 >> 2] = 4;
   $1 = std____2__numeric_limits_unsigned_20long_20long___max_28_29();
   $7 = $1;
   $0 = i64toi32_i32$HIGH_BITS;
   break label$2;
  }
  $1 = ($6 | 0) == 45;
  $7 = $1 ? 0 - $3 | 0 : $3;
  $0 = $1 ? 0 - ((0 < $3 >>> 0) + $4 | 0) | 0 : $4;
 }
 $3 = $7;
 $4 = $0;
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 $0 = $4;
 i64toi32_i32$HIGH_BITS = $0;
 return $3;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0 >= $3 >>> 0) {
  label$3 : {
   if ($3 >>> 0 <= 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $2);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
    break label$3;
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($3);
   $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
   $6 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($5, $6);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $6);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $2);
  }
  std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($3), $1, $2);
  HEAP8[$4 + 15 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $4 + 15 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function Neo__Cryptography__ECC__ECPoint__ECPoint_28Neo__Cryptography__ECC__ECFieldElement_20const__2c_20Neo__Cryptography__ECC__ECFieldElement_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    $3 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0;
    if ($3) {
     if (($3 | 0) <= -1) {
      break label$3;
     }
     $4 = operator_20new_28unsigned_20long_29($3);
     HEAP32[$0 >> 2] = $4;
     HEAP32[$0 + 4 >> 2] = $4;
     HEAP32[$0 + 8 >> 2] = $3 + $4;
     $5 = HEAP32[$1 >> 2];
     $3 = HEAP32[$1 + 4 >> 2] - $5 | 0;
     if (($3 | 0) >= 1) {
      $4 = memcpy($4, $5, $3) + $3 | 0;
     }
     HEAP32[$0 + 4 >> 2] = $4;
    }
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 0;
    $5 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2] - $5 | 0;
    if ($3) {
     if (($3 | 0) <= -1) {
      break label$2;
     }
     $4 = operator_20new_28unsigned_20long_29($3);
     HEAP32[$0 + 12 >> 2] = $4;
     HEAP32[$0 + 16 >> 2] = $4;
     HEAP32[$0 + 20 >> 2] = $3 + $4;
     $5 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2] - $5 | 0;
     if (($3 | 0) >= 1) {
      $4 = memcpy($4, $5, $3) + $3 | 0;
     }
     HEAP32[$0 + 16 >> 2] = $4;
    }
    if (HEAP32[$2 + 4 >> 2] == ($5 | 0) ? HEAP32[$1 + 4 >> 2] == HEAP32[$1 >> 2] : 0) {
     break label$1;
    }
    return $0;
   }
   std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
   abort();
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($0 + 12 | 0);
  abort();
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__endl_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(24456, 2208));
 __assert_fail(2250, 2256, 79, 2330);
 abort();
}
function Neo__VM__ScriptBuilder__EmitPush_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0;
 label$1 : {
  if ($2 >>> 0 <= 255) {
   $2 = $0 + 12 | 0;
   neopt__BinaryWriter__Write_28unsigned_20char_29($2, 12);
   neopt__BinaryWriter__Write_28unsigned_20char_29($2, HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] & 255);
   $4 = HEAP32[$1 >> 2];
   if (($4 | 0) == HEAP32[$1 + 4 >> 2]) {
    break label$1;
   }
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2, HEAPU8[$3 + $4 | 0]);
    $3 = $3 + 1 | 0;
    $4 = HEAP32[$1 >> 2];
    if ($3 >>> 0 < HEAP32[$1 + 4 >> 2] - $4 >>> 0) {
     continue;
    }
    break;
   }
   break label$1;
  }
  $3 = $0 + 12 | 0;
  if ($2 >>> 0 <= 65535) {
   neopt__BinaryWriter__Write_28unsigned_20char_29($3, 13);
   $2 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 12 >> 2] >> 2]]($3, $2 & 255);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 12 >> 2] >> 2]]($3, ($2 & 65280) >>> 8 | 0);
   $4 = HEAP32[$1 >> 2];
   if (($4 | 0) == HEAP32[$1 + 4 >> 2]) {
    break label$1;
   }
   $2 = 0;
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] >> 2]]($3, HEAPU8[$2 + $4 | 0]);
    $2 = $2 + 1 | 0;
    $4 = HEAP32[$1 >> 2];
    if ($2 >>> 0 < HEAP32[$1 + 4 >> 2] - $4 >>> 0) {
     continue;
    }
    break;
   }
   break label$1;
  }
  neopt__BinaryWriter__Write_28unsigned_20char_29($3, 14);
  $2 = HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 12 >> 2] >> 2]]($3, $2 & 255);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 12 >> 2] >> 2]]($3, $2 >>> 8 & 255);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 12 >> 2] >> 2]]($3, $2 >>> 16 & 255);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 12 >> 2] >> 2]]($3, $2 >>> 24 | 0);
  $4 = HEAP32[$1 >> 2];
  if (($4 | 0) == HEAP32[$1 + 4 >> 2]) {
   break label$1;
  }
  $2 = 0;
  while (1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] >> 2]]($3, HEAPU8[$2 + $4 | 0]);
   $2 = $2 + 1 | 0;
   $4 = HEAP32[$1 >> 2];
   if ($2 >>> 0 < HEAP32[$1 + 4 >> 2] - $4 >>> 0) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0 >= $2 >>> 0) {
  label$3 : {
   if ($2 >>> 0 <= 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $2);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
    break label$3;
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($2);
   $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
   $5 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($6, $5);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $5);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $2);
  }
  std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($3), $1, $2);
  HEAP8[$4 + 15 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $4 + 15 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2____stdinbuf_wchar_t___pbackfail_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 32 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $2 = std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29($1, std____2__char_traits_wchar_t___eof_28_29());
 $4 = HEAPU8[$0 + 52 | 0];
 label$2 : {
  if ($2) {
   $2 = $1;
   if ($4) {
    break label$2;
   }
   $2 = HEAP32[$0 + 48 >> 2];
   wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29($2, std____2__char_traits_wchar_t___eof_28_29()) ^ 1, HEAP8[wasm2js_i32$0 + 52 | 0] = wasm2js_i32$1;
   break label$2;
  }
  if ($4) {
   wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__char_traits_wchar_t___to_char_type_28unsigned_20int_29(HEAP32[$0 + 48 >> 2]), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   $2 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3 + 16 | 0, $3 + 20 | 0, $3 + 12 | 0, $3 + 24 | 0, $3 + 32 | 0, $3 + 20 | 0) + -1 | 0;
   label$5 : {
    label$6 : {
     if ($2 >>> 0 <= 2) {
      if ($2 - 2) {
       break label$6;
      }
      $2 = HEAP32[$0 + 48 >> 2];
      HEAP32[$3 + 20 >> 2] = $3 + 25;
      HEAP8[$3 + 24 | 0] = $2;
     }
     while (1) {
      $2 = HEAP32[$3 + 20 >> 2];
      if ($2 >>> 0 <= $3 + 24 >>> 0) {
       $4 = 1;
       break label$5;
      }
      $2 = $2 + -1 | 0;
      HEAP32[$3 + 20 >> 2] = $2;
      if ((ungetc(HEAP8[$2 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
       continue;
      }
      break;
     }
    }
    $4 = 0;
    $2 = std____2__char_traits_wchar_t___eof_28_29();
   }
   if (!$4) {
    break label$2;
   }
  }
  HEAP8[$0 + 52 | 0] = 1;
  HEAP32[$0 + 48 >> 2] = $1;
  $2 = $1;
 }
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28unsigned_20long_2c_20char_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0 >= $1 >>> 0) {
  label$3 : {
   if ($1 >>> 0 <= 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
    break label$3;
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($1);
   $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
   $5 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($6, $5);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $5);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
  }
  std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29(char__20std____2____to_address_char__28char__29($3), $1, $2);
  HEAP8[$4 + 15 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $3 | 0, $4 + 15 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function __multi3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $15 = $0;
 $10 = $2;
 $9 = $8;
 $9 = __wasm_i64_mul($1, $10, $7, $9);
 $8 = $9;
 $10 = i64toi32_i32$HIGH_BITS;
 $7 = $10;
 $10 = $4;
 $9 = $6;
 $9 = __wasm_i64_mul($3, $10, $5, $9);
 $13 = $9;
 $10 = i64toi32_i32$HIGH_BITS;
 $9 = $10;
 $10 = $7;
 $12 = $10 + $9 | 0;
 $9 = $8;
 $11 = $9 + $13 | 0;
 if ($11 >>> 0 < $13 >>> 0) {
  $12 = $12 + 1 | 0;
 }
 $14 = $11;
 $11 = $12;
 $9 = 0;
 $8 = $9;
 $10 = 0;
 $4 = $10;
 $12 = $6;
 $7 = $12;
 $9 = $2;
 $3 = $9;
 $12 = __wasm_i64_mul($6, $8, $9, $10);
 $13 = $12;
 $10 = i64toi32_i32$HIGH_BITS;
 $12 = $10;
 $10 = $11;
 $11 = $10 + $12 | 0;
 $9 = $14;
 $9 = $9 + $13 | 0;
 if ($9 >>> 0 < $13 >>> 0) {
  $11 = $11 + 1 | 0;
 }
 $16 = $9;
 $17 = $11;
 $10 = $5;
 $5 = $10;
 $9 = 0;
 $6 = $9;
 $11 = $1;
 $1 = $11;
 $10 = 0;
 $2 = $10;
 $10 = $6;
 $11 = $2;
 $11 = __wasm_i64_mul($5, $10, $1, $11);
 $14 = $11;
 $10 = i64toi32_i32$HIGH_BITS;
 $11 = 0;
 $12 = $11;
 $11 = $4;
 $9 = $6;
 $9 = __wasm_i64_mul($3, $11, $5, $9);
 $13 = $9;
 $11 = i64toi32_i32$HIGH_BITS;
 $9 = $11;
 $11 = $12;
 $9 = $9 + $11 | 0;
 $12 = $10 + $13 | 0;
 if ($12 >>> 0 < $13 >>> 0) {
  $9 = $9 + 1 | 0;
 }
 $5 = $12;
 $6 = $9;
 $10 = 0;
 $11 = $10;
 $10 = $17;
 $12 = $10 + $11 | 0;
 $9 = $16;
 $13 = $6;
 $9 = $9 + $13 | 0;
 if ($9 >>> 0 < $13 >>> 0) {
  $12 = $12 + 1 | 0;
 }
 $4 = $9;
 $3 = $12;
 $12 = $2;
 $9 = $8;
 $9 = __wasm_i64_mul($1, $12, $7, $9);
 $12 = i64toi32_i32$HIGH_BITS;
 $1 = $12;
 $10 = $5;
 $13 = $10;
 $12 = $9;
 $11 = $10 + $12 | 0;
 $9 = 0;
 $10 = $9;
 $9 = $1;
 $9 = $10 + $9 | 0;
 $5 = $11;
 $9 = $11 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
 $6 = $9;
 $12 = 0;
 $9 = $12;
 $12 = $3;
 $11 = $9 + $12 | 0;
 $9 = $4;
 $13 = $6;
 $10 = $9 + $13 | 0;
 if ($10 >>> 0 < $13 >>> 0) {
  $11 = $11 + 1 | 0;
 }
 $9 = $15;
 HEAP32[$9 + 8 >> 2] = $10;
 HEAP32[$9 + 12 >> 2] = $11;
 $9 = 0;
 $1 = $9;
 $12 = $14;
 $9 = $12;
 $13 = 0;
 $2 = $9 | $13;
 $9 = $0;
 HEAP32[$9 >> 2] = $2;
 $11 = $5;
 $12 = $1;
 $11 = $11 | $12;
 HEAP32[$9 + 4 >> 2] = $11;
}
function std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20std____2____widen_from_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20__28std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 160 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 152 >> 2] = $1;
 $5 = $4 + 144 | 0;
 label$2 : {
  label$3 : while (1) {
   if ($2 >>> 0 < $3 >>> 0) {
    HEAP32[$4 + 8 >> 2] = $2;
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $4 + 144 | 0, $2, ($3 - $2 | 0) > 32 ? $2 + 32 | 0 : $3, $4 + 8 | 0, $4 + 16 | 0, $5, $4 + 12 | 0) | 0) == 2) {
     break label$2;
    }
    $1 = $4 + 16 | 0;
    if (HEAP32[$4 + 8 >> 2] == ($2 | 0)) {
     break label$2;
    }
    while (1) {
     if ($1 >>> 0 >= HEAPU32[$4 + 12 >> 2]) {
      $2 = HEAP32[$4 + 8 >> 2];
      continue label$3;
     }
     HEAP32[$4 + 4 >> 2] = HEAP32[$1 >> 2];
     std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___operator__28wchar_t___29(std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___operator__28_29($4 + 152 | 0), $4 + 4 | 0);
     $1 = $1 + 4 | 0;
     std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___operator___28_29($4 + 152 | 0);
     continue;
    }
   }
   break;
  }
  $1 = HEAP32[$4 + 152 >> 2];
  $0 = $4 + 160 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return $1;
 }
 std____2____throw_runtime_error_28char_20const__29($4);
 abort();
}
function long_20long_20std____2____num_get_signed_integral_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = global$0 - 16 | 0;
 $4 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  label$3 : {
   label$4 : {
    if (($0 | 0) != ($1 | 0)) {
     $6 = HEAP32[__errno_location() >> 2];
     wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $0 = strtoll_l($0, $5 + 12 | 0, $3, std____2____cloc_28_29());
     $4 = $0;
     $3 = i64toi32_i32$HIGH_BITS;
     $0 = HEAP32[__errno_location() >> 2];
     label$6 : {
      if ($0) {
       if (HEAP32[$5 + 12 >> 2] != ($1 | 0)) {
        break label$6;
       }
       if (($0 | 0) == 68) {
        break label$3;
       }
       break label$4;
      }
      wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $6, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      if (HEAP32[$5 + 12 >> 2] == ($1 | 0)) {
       break label$4;
      }
     }
    }
    HEAP32[$2 >> 2] = 4;
    $4 = 0;
    $3 = 0;
    break label$2;
   }
   $1 = std____2__numeric_limits_long_20long___min_28_29();
   $0 = i64toi32_i32$HIGH_BITS;
   if (($3 | 0) < ($0 | 0) ? 1 : ($3 | 0) <= ($0 | 0) ? $4 >>> 0 >= $1 >>> 0 ? 0 : 1 : 0) {
    break label$3;
   }
   $1 = std____2__numeric_limits_long_20long___max_28_29();
   $0 = i64toi32_i32$HIGH_BITS;
   if (($0 | 0) > ($3 | 0) ? 1 : ($0 | 0) >= ($3 | 0) ? $1 >>> 0 < $4 >>> 0 ? 0 : 1 : 0) {
    break label$2;
   }
  }
  HEAP32[$2 >> 2] = 4;
  if (($3 | 0) > 0 ? 1 : ($3 | 0) >= 0 ? $4 >>> 0 < 1 ? 0 : 1 : 0) {
   $4 = std____2__numeric_limits_long_20long___max_28_29();
   $3 = i64toi32_i32$HIGH_BITS;
   break label$2;
  }
  $4 = std____2__numeric_limits_long_20long___min_28_29();
  $3 = i64toi32_i32$HIGH_BITS;
 }
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 i64toi32_i32$HIGH_BITS = $3;
 return $4;
}
function std____2____stdoutbuf_wchar_t___overflow_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  label$3 : {
   label$4 : {
    if (std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29($1, std____2__char_traits_wchar_t___eof_28_29())) {
     break label$4;
    }
    wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__char_traits_wchar_t___to_char_type_28unsigned_20int_29($1), HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
    if (HEAPU8[$0 + 44 | 0]) {
     if ((fwrite($2 + 20 | 0, 4, 1, HEAP32[$0 + 32 >> 2]) | 0) != 1) {
      break label$3;
     }
     break label$4;
    }
    HEAP32[$2 + 16 >> 2] = $2 + 24;
    $6 = $2 + 32 | 0;
    $4 = $2 + 24 | 0;
    $3 = $2 + 20 | 0;
    while (1) {
     $5 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3, $4, $2 + 12 | 0, $2 + 24 | 0, $6, $2 + 16 | 0);
     if (HEAP32[$2 + 12 >> 2] == ($3 | 0)) {
      break label$3;
     }
     if (($5 | 0) == 3) {
      if ((fwrite($3, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
       break label$4;
      }
      break label$3;
     }
     if ($5 >>> 0 > 1) {
      break label$3;
     }
     $3 = HEAP32[$2 + 16 >> 2] - ($2 + 24 | 0) | 0;
     if (($3 | 0) != (fwrite($2 + 24 | 0, 1, $3, HEAP32[$0 + 32 >> 2]) | 0)) {
      break label$3;
     }
     $3 = HEAP32[$2 + 12 >> 2];
     if (($5 | 0) == 1) {
      continue;
     }
     break;
    }
   }
   $0 = std____2__char_traits_wchar_t___not_eof_28unsigned_20int_29($1);
   break label$2;
  }
  $0 = std____2__char_traits_wchar_t___eof_28_29();
 }
 $1 = $2 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function std____2____stdinbuf_char___pbackfail_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 32 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $2 = std____2__char_traits_char___eq_int_type_28int_2c_20int_29($1, std____2__char_traits_char___eof_28_29());
 $4 = HEAPU8[$0 + 52 | 0];
 label$2 : {
  if ($2) {
   $2 = $1;
   if ($4) {
    break label$2;
   }
   $2 = HEAP32[$0 + 48 >> 2];
   wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__char_traits_char___eq_int_type_28int_2c_20int_29($2, std____2__char_traits_char___eof_28_29()) ^ 1, HEAP8[wasm2js_i32$0 + 52 | 0] = wasm2js_i32$1;
   break label$2;
  }
  if ($4) {
   wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__char_traits_char___to_char_type_28int_29(HEAP32[$0 + 48 >> 2]), HEAP8[wasm2js_i32$0 + 19 | 0] = wasm2js_i32$1;
   $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3 + 19 | 0, $3 + 20 | 0, $3 + 12 | 0, $3 + 24 | 0, $3 + 32 | 0, $3 + 20 | 0) + -1 | 0;
   label$5 : {
    label$6 : {
     if ($2 >>> 0 <= 2) {
      if ($2 - 2) {
       break label$6;
      }
      $2 = HEAP32[$0 + 48 >> 2];
      HEAP32[$3 + 20 >> 2] = $3 + 25;
      HEAP8[$3 + 24 | 0] = $2;
     }
     while (1) {
      $2 = HEAP32[$3 + 20 >> 2];
      if ($2 >>> 0 <= $3 + 24 >>> 0) {
       $4 = 1;
       break label$5;
      }
      $2 = $2 + -1 | 0;
      HEAP32[$3 + 20 >> 2] = $2;
      if ((ungetc(HEAP8[$2 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
       continue;
      }
      break;
     }
    }
    $4 = 0;
    $2 = std____2__char_traits_char___eof_28_29();
   }
   if (!$4) {
    break label$2;
   }
  }
  HEAP8[$0 + 52 | 0] = 1;
  HEAP32[$0 + 48 >> 2] = $1;
  $2 = $1;
 }
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 $0 = global$0 - 208 | 0;
 $5 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP16[$0 + 204 >> 1] = HEAPU8[13894] | HEAPU8[13895] << 8;
 HEAP32[$0 + 200 >> 2] = HEAPU8[13890] | HEAPU8[13891] << 8 | (HEAPU8[13892] << 16 | HEAPU8[13893] << 24);
 $6 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 $7 = $0 + 176 | 0;
 $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 176 | 0, 20, $6, $0 + 200 | 0, $0);
 $4 = $5 + ($0 + 176 | 0) | 0;
 $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($7, $4, $2);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $2);
 $7 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 16 | 0);
 std____2__locale___locale_28_29($0 + 16 | 0);
 std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($7, $0 + 176 | 0, $4, $0 + 16 | 0);
 $5 = ($0 + 16 | 0) + ($5 << 2) | 0;
 $2 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $0 + 16 | 0, ($4 | 0) == ($6 | 0) ? $5 : (($6 - $0 << 2) + $0 | 0) + -688 | 0, $5, $2, $3);
 $0 = $0 + 208 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = $0 + 32 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($3, $1);
 HEAP32[$0 + 44 >> 2] = 0;
 $1 = HEAP32[$0 + 48 >> 2];
 if ($1 & 8) {
  $2 = HEAP8[$3 + 11 | 0];
  label$2 : {
   if (($2 | 0) <= -1) {
    $2 = HEAP32[$0 + 32 >> 2];
    $4 = $2 + HEAP32[$0 + 36 >> 2] | 0;
    break label$2;
   }
   $4 = ($2 & 255) + $3 | 0;
   $2 = $3;
  }
  HEAP32[$0 + 16 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 44 >> 2] = $4;
 }
 label$4 : {
  if (!($1 & 16)) {
   break label$4;
  }
  $4 = $3;
  $1 = HEAP8[$3 + 11 | 0];
  label$5 : {
   if (($1 | 0) >= 0) {
    $1 = $1 & 255;
    HEAP32[$0 + 44 >> 2] = $3 + $1;
    $2 = 10;
    break label$5;
   }
   $1 = HEAP32[$0 + 36 >> 2];
   HEAP32[$0 + 44 >> 2] = $1 + HEAP32[$0 + 32 >> 2];
   $2 = (HEAP32[$0 + 40 >> 2] & 2147483647) + -1 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($4, $2, 0);
  $2 = HEAP8[$3 + 11 | 0];
  label$7 : {
   if (($2 | 0) <= -1) {
    $3 = HEAP32[$0 + 32 >> 2];
    $2 = HEAP32[$0 + 36 >> 2];
    break label$7;
   }
   $2 = $2 & 255;
  }
  HEAP32[$0 + 20 >> 2] = $3;
  HEAP32[$0 + 24 >> 2] = $3;
  HEAP32[$0 + 28 >> 2] = $2 + $3;
  if (!(HEAPU8[$0 + 48 | 0] & 3)) {
   break label$4;
  }
  label$9 : {
   if (($1 | 0) <= -1) {
    $1 = $1 + -2147483647 | 0;
    $2 = ($1 | 0) < 0;
    $3 = $2 ? $3 + -2 | 0 : $3 + 2147483647 | 0;
    HEAP32[$0 + 24 >> 2] = $3;
    $1 = $2 ? 1 : $1;
    break label$9;
   }
   if (!$1) {
    break label$4;
   }
  }
  HEAP32[$0 + 24 >> 2] = $1 + $3;
 }
}
function double_20std____2___28anonymous_20namespace_29__as_float_helper_double_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20double_20_28__29_28char_20const__2c_20char___29__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long__2c_20double_20_28__29_28char_20const__2c_20char___29_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = 0;
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($1);
 wasm2js_i32$0 = $3, wasm2js_i32$1 = HEAP32[__errno_location() >> 2], HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $5 = strtod($1, $3 + 12 | 0);
 std____2__enable_if__28is_move_constructible_int___value_29_20___20_28is_move_assignable_int___value_29_2c_20void___type_20std____2__swap_int__28int__2c_20int__29(__errno_location(), $3 + 8 | 0);
 label$2 : {
  if (HEAP32[$3 + 8 >> 2] != 68) {
   $4 = HEAP32[$3 + 12 >> 2];
   if (($4 | 0) == ($1 | 0)) {
    break label$2;
   }
   if ($2) {
    HEAP32[$2 >> 2] = $4 - $1;
   }
   $0 = $3 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return $5;
  }
  std____2___28anonymous_20namespace_29__throw_from_string_out_of_range_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0);
  abort();
 }
 std____2___28anonymous_20namespace_29__throw_from_string_invalid_arg_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0);
 abort();
}
function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $8 = global$0 - 16 | 0;
 $7 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 label$2 : {
  if (!$0) {
   break label$2;
  }
  $9 = std____2__ios_base__width_28_29_20const($4);
  $7 = $2 - $1 | 0;
  if (($7 | 0) >= 1) {
   $7 = $7 >> 2;
   if (($7 | 0) != (std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputn_28wchar_t_20const__2c_20long_29($0, $1, $7) | 0)) {
    break label$2;
   }
  }
  $6 = $3 - $1 >> 2;
  $1 = ($9 | 0) > ($6 | 0) ? $9 - $6 | 0 : 0;
  if (($1 | 0) >= 1) {
   $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($8, $1, $5);
   $9 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputn_28wchar_t_20const__2c_20long_29($0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29($6), $1);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($6);
   $6 = 0;
   if (($1 | 0) != ($9 | 0)) {
    break label$2;
   }
  }
  $1 = $3 - $2 | 0;
  if (($1 | 0) >= 1) {
   $6 = 0;
   $1 = $1 >> 2;
   if (($1 | 0) != (std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputn_28wchar_t_20const__2c_20long_29($0, $2, $1) | 0)) {
    break label$2;
   }
  }
  std____2__ios_base__width_28long_29($4, 0);
  $6 = $0;
 }
 $0 = $8 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $6;
}
function __extenddftf2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $9 = global$0 - 16 | 0;
 $2 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 wasm2js_scratch_store_f64(+$1);
 $5 = wasm2js_scratch_load_i32(1) | 0;
 $8 = wasm2js_scratch_load_i32(0) | 0;
 $12 = $5;
 $6 = $5 & -2147483648;
 $13 = $6;
 $6 = $5;
 $5 = $8;
 $7 = $6 & 2147483647;
 $4 = $7 + -1048576 | 0;
 $3 = $5;
 if ($3 >>> 0 < 0) {
  $4 = $4 + 1 | 0;
 }
 label$2 : {
  if (($4 | 0) == 2145386495 & $3 >>> 0 <= 4294967295 | $4 >>> 0 < 2145386495) {
   $2 = $5;
   $4 = $2 << 28;
   $10 = $4;
   $4 = $7;
   $2 = $4 >>> 4 | 0;
   $4 = ($4 & 15) << 28 | $5 >>> 4;
   $3 = $2 + 1006632960 | 0;
   $5 = $4;
   if ($4 >>> 0 < 0) {
    $3 = $3 + 1 | 0;
   }
   $11 = $5;
   break label$2;
  }
  $3 = $7;
  $2 = $5;
  if (($3 | 0) == 2146435072 & $2 >>> 0 >= 0 | $3 >>> 0 > 2146435072) {
   $6 = $8;
   $3 = $6 << 28;
   $10 = $3;
   $3 = $12;
   $6 = $3 >>> 4 | 0;
   $2 = $8;
   $3 = ($3 & 15) << 28 | $2 >>> 4;
   $11 = $3;
   $2 = $6 | 2147418112;
   $3 = $2;
   break label$2;
  }
  $2 = $7;
  if (!($2 | $5)) {
   $3 = 0;
   break label$2;
  }
  $2 = $5;
  $8 = ($7 | 0) == 1 & $2 >>> 0 < 0 | $7 >>> 0 < 1 ? Math_clz32($8) + 32 | 0 : Math_clz32($7);
  $2 = $7;
  __ashlti3($9, $5, $2, 0, 0, $8 + 49 | 0);
  $4 = $9;
  $3 = HEAP32[$4 >> 2];
  $14 = $3;
  $2 = HEAP32[$4 + 4 >> 2];
  $10 = $2;
  $3 = HEAP32[$4 + 12 >> 2];
  $2 = HEAP32[$4 + 8 >> 2];
  $4 = $2;
  $2 = $3 ^ 65536;
  $6 = 0;
  $11 = $6 | $4;
  $3 = 15372 - $8 | 0;
  $4 = $3 << 16;
  $3 = $4;
  $4 = $2;
  $3 = $3 | $4;
 }
 $7 = $3;
 $2 = $0;
 HEAP32[$2 >> 2] = $14;
 $3 = $10;
 HEAP32[$2 + 4 >> 2] = $3;
 $6 = $15;
 $5 = $11;
 $4 = $5;
 $0 = $6 | $4;
 $4 = $2;
 HEAP32[$4 + 8 >> 2] = $0;
 $2 = $13;
 $3 = $7;
 $2 = $2 | $3;
 HEAP32[$4 + 12 >> 2] = $2;
 $0 = $9 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function emscripten__internal__Invoker_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $2 = HEAP32[$1 >> 2];
 if ($2 >>> 0 < 4294967280) {
  label$3 : {
   label$4 : {
    if ($2 >>> 0 >= 11) {
     $5 = $2 + 16 & -16;
     $4 = operator_20new_28unsigned_20long_29($5);
     HEAP32[$3 + 8 >> 2] = $5 | -2147483648;
     HEAP32[$3 >> 2] = $4;
     HEAP32[$3 + 4 >> 2] = $2;
     break label$4;
    }
    HEAP8[$3 + 11 | 0] = $2;
    $4 = $3;
    if (!$2) {
     break label$3;
    }
   }
   memcpy($4, $1 + 4 | 0, $2);
  }
  HEAP8[$2 + $4 | 0] = 0;
  FUNCTION_TABLE[$0]($3 + 16 | 0, $3);
  $2 = HEAP8[$3 + 27 | 0];
  label$6 : {
   if (($2 | 0) >= 0) {
    $4 = $2 & 255;
    $2 = dlmalloc($4 + 4 | 0);
    HEAP32[$2 >> 2] = $4;
    memcpy($2 + 4 | 0, $3 + 16 | 0, $4);
    break label$6;
   }
   $4 = HEAP32[$3 + 20 >> 2];
   $2 = dlmalloc($4 + 4 | 0);
   HEAP32[$2 >> 2] = $4;
   $1 = HEAP32[$3 + 16 >> 2];
   memcpy($2 + 4 | 0, $1, $4);
   operator_20delete_28void__29($1);
  }
  if (HEAP8[$3 + 11 | 0] <= -1) {
   operator_20delete_28void__29(HEAP32[$3 >> 2]);
  }
  $0 = $3 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return $2 | 0;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($3);
 abort();
}
function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
  return;
 }
 $7 = HEAPU8[$1 + 53 | 0];
 $6 = HEAP32[$0 + 12 >> 2];
 HEAP8[$1 + 53 | 0] = 0;
 $8 = HEAPU8[$1 + 52 | 0];
 HEAP8[$1 + 52 | 0] = 0;
 $9 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($9, $1, $2, $3, $4, $5);
 $10 = HEAPU8[$1 + 53 | 0];
 $7 = $10 | $7;
 $11 = HEAPU8[$1 + 52 | 0];
 $8 = $11 | $8;
 label$2 : {
  if (($6 | 0) < 2) {
   break label$2;
  }
  $9 = ($6 << 3) + $9 | 0;
  $6 = $0 + 24 | 0;
  while (1) {
   if (HEAPU8[$1 + 54 | 0]) {
    break label$2;
   }
   label$4 : {
    if ($11) {
     if (HEAP32[$1 + 24 >> 2] == 1) {
      break label$2;
     }
     if (HEAPU8[$0 + 8 | 0] & 2) {
      break label$4;
     }
     break label$2;
    }
    if (!$10) {
     break label$4;
    }
    if (!(HEAP8[$0 + 8 | 0] & 1)) {
     break label$2;
    }
   }
   HEAP16[$1 + 52 >> 1] = 0;
   __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4, $5);
   $10 = HEAPU8[$1 + 53 | 0];
   $7 = $10 | $7;
   $11 = HEAPU8[$1 + 52 | 0];
   $8 = $11 | $8;
   $6 = $6 + 8 | 0;
   if ($6 >>> 0 < $9 >>> 0) {
    continue;
   }
   break;
  }
 }
 HEAP8[$1 + 53 | 0] = ($7 & 255) != 0;
 HEAP8[$1 + 52 | 0] = ($8 & 255) != 0;
}
function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 + -64 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 56 >> 2] = $1;
 $5 = $4 + 48 | 0;
 label$2 : {
  label$3 : while (1) {
   if ($2 >>> 0 < $3 >>> 0) {
    HEAP32[$4 + 8 >> 2] = $2;
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4 + 48 | 0, $2, $3, $4 + 8 | 0, $4 + 16 | 0, $5, $4 + 12 | 0) | 0) == 2) {
     break label$2;
    }
    $1 = $4 + 16 | 0;
    if (HEAP32[$4 + 8 >> 2] == ($2 | 0)) {
     break label$2;
    }
    while (1) {
     if ($1 >>> 0 >= HEAPU32[$4 + 12 >> 2]) {
      $2 = HEAP32[$4 + 8 >> 2];
      continue label$3;
     }
     std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28char_20const__29(std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28_29($4 + 56 | 0), $1);
     $1 = $1 + 1 | 0;
     std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator___28_29($4 + 56 | 0);
     continue;
    }
   }
   break;
  }
  $1 = HEAP32[$4 + 56 >> 2];
  $0 = $4 - -64 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return $1;
 }
 std____2____throw_runtime_error_28char_20const__29($1);
 abort();
}
function long_20std____2____num_get_signed_integral_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 label$2 : {
  label$3 : {
   label$4 : {
    if (($0 | 0) != ($1 | 0)) {
     $7 = HEAP32[__errno_location() >> 2];
     wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $3 = strtoll_l($0, $5 + 12 | 0, $3, std____2____cloc_28_29());
     $6 = $3;
     $0 = i64toi32_i32$HIGH_BITS;
     $4 = $0;
     $0 = HEAP32[__errno_location() >> 2];
     label$6 : {
      if ($0) {
       if (HEAP32[$5 + 12 >> 2] != ($1 | 0)) {
        break label$6;
       }
       if (($0 | 0) == 68) {
        break label$3;
       }
       break label$4;
      }
      wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $7, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      if (HEAP32[$5 + 12 >> 2] == ($1 | 0)) {
       break label$4;
      }
     }
    }
    HEAP32[$2 >> 2] = 4;
    $0 = 0;
    break label$2;
   }
   $3 = std____2__numeric_limits_long___min_28_29();
   $0 = $3 >> 31;
   $1 = $6 >>> 0 >= $3 >>> 0 ? 0 : 1;
   $3 = $0;
   if (($4 | 0) < ($3 | 0) ? 1 : ($4 | 0) <= ($3 | 0) ? $1 : 0) {
    break label$3;
   }
   $0 = std____2__numeric_limits_long___max_28_29();
   $3 = $0;
   $0 = $3 >> 31;
   if (($4 | 0) > ($0 | 0) ? 1 : ($4 | 0) >= ($0 | 0) ? $6 >>> 0 <= $3 >>> 0 ? 0 : 1 : 0) {
    break label$3;
   }
   $0 = $6;
   break label$2;
  }
  HEAP32[$2 >> 2] = 4;
  $3 = $6;
  if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? $3 >>> 0 < 1 ? 0 : 1 : 0) {
   $0 = std____2__numeric_limits_long___max_28_29();
   break label$2;
  }
  $0 = std____2__numeric_limits_long___min_28_29();
 }
 $1 = $5 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 $0 = global$0 - 96 | 0;
 $5 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP16[$0 + 92 >> 1] = HEAPU8[13894] | HEAPU8[13895] << 8;
 HEAP32[$0 + 88 >> 2] = HEAPU8[13890] | HEAPU8[13891] << 8 | (HEAPU8[13892] << 16 | HEAPU8[13893] << 24);
 $6 = std____2____cloc_28_29();
 HEAP32[$0 >> 2] = $4;
 $7 = $0 - -64 | 0;
 $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 - -64 | 0, 20, $6, $0 + 88 | 0, $0);
 $4 = $5 + ($0 - -64 | 0) | 0;
 $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($7, $4, $2);
 std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $2);
 $7 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0 + 16 | 0);
 std____2__locale___locale_28_29($0 + 16 | 0);
 std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($7, $0 - -64 | 0, $4, $0 + 16 | 0);
 $5 = ($0 + 16 | 0) + $5 | 0;
 $2 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $0 + 16 | 0, ($4 | 0) == ($6 | 0) ? $5 : (($6 - $0 | 0) + $0 | 0) + -48 | 0, $5, $2, $3);
 $0 = $0 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function Neo__Cryptography__ECC__ECPoint__DecodePoint_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $1 = global$0 - 32 | 0;
 $3 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = Neo__Cryptography__ECC__ECFieldElement__ECFieldElement_28csbigintegerlib__BigInteger_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($1 + 16 | 0, 21936, $2);
 $4 = Neo__Cryptography__ECC__ECFieldElement__ECFieldElement_28csbigintegerlib__BigInteger_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($1, 21936, $2);
 Neo__Cryptography__ECC__ECPoint__ECPoint_28Neo__Cryptography__ECC__ECFieldElement_20const__2c_20Neo__Cryptography__ECC__ECFieldElement_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($0, $3, $4, $2);
 $2 = HEAP32[$4 >> 2];
 if ($2) {
  HEAP32[$4 + 4 >> 2] = $2;
  operator_20delete_28void__29($2);
 }
 $2 = HEAP32[$3 >> 2];
 if ($2) {
  HEAP32[$3 + 4 >> 2] = $2;
  operator_20delete_28void__29($2);
 }
 $0 = $1 + 16 | 0;
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24456, 2135, 72);
 std____2__ios_base__getloc_28_29_20const($0, $2 + HEAP32[HEAP32[$2 >> 2] + -12 >> 2] | 0);
 $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($1 + 16 | 0, 25448);
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
 std____2__locale___locale_28_29($1 + 16 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $3);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 $0 = $1 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____stdoutbuf_char___overflow_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 32 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  label$3 : {
   label$4 : {
    if (std____2__char_traits_char___eq_int_type_28int_2c_20int_29($1, std____2__char_traits_char___eof_28_29())) {
     break label$4;
    }
    wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__char_traits_char___to_char_type_28int_29($1), HEAP8[wasm2js_i32$0 + 23 | 0] = wasm2js_i32$1;
    if (HEAPU8[$0 + 44 | 0]) {
     if ((fwrite($2 + 23 | 0, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) != 1) {
      break label$3;
     }
     break label$4;
    }
    HEAP32[$2 + 16 >> 2] = $2 + 24;
    $6 = $2 + 32 | 0;
    $4 = $2 + 24 | 0;
    $3 = $2 + 23 | 0;
    while (1) {
     $5 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3, $4, $2 + 12 | 0, $2 + 24 | 0, $6, $2 + 16 | 0);
     if (HEAP32[$2 + 12 >> 2] == ($3 | 0)) {
      break label$3;
     }
     if (($5 | 0) == 3) {
      if ((fwrite($3, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
       break label$4;
      }
      break label$3;
     }
     if ($5 >>> 0 > 1) {
      break label$3;
     }
     $3 = HEAP32[$2 + 16 >> 2] - ($2 + 24 | 0) | 0;
     if (($3 | 0) != (fwrite($2 + 24 | 0, 1, $3, HEAP32[$0 + 32 >> 2]) | 0)) {
      break label$3;
     }
     $3 = HEAP32[$2 + 12 >> 2];
     if (($5 | 0) == 1) {
      continue;
     }
     break;
    }
   }
   $0 = std____2__char_traits_char___not_eof_28int_29($1);
   break label$2;
  }
  $0 = std____2__char_traits_char___eof_28_29();
 }
 $1 = $2 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function memmove($0, $1, $2) {
 var $3 = 0, $4 = 0;
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  label$2 : {
   if ($1 + $2 >>> 0 > $0 >>> 0) {
    $4 = $0 + $2 | 0;
    if ($4 >>> 0 > $1 >>> 0) {
     break label$2;
    }
   }
   return memcpy($0, $1, $2);
  }
  $3 = ($0 ^ $1) & 3;
  label$4 : {
   label$5 : {
    if ($0 >>> 0 < $1 >>> 0) {
     if ($3) {
      $3 = $0;
      break label$4;
     }
     if (!($0 & 3)) {
      $3 = $0;
      break label$5;
     }
     $3 = $0;
     while (1) {
      if (!$2) {
       break label$1;
      }
      HEAP8[$3 | 0] = HEAPU8[$1 | 0];
      $1 = $1 + 1 | 0;
      $2 = $2 + -1 | 0;
      $3 = $3 + 1 | 0;
      if ($3 & 3) {
       continue;
      }
      break;
     }
     break label$5;
    }
    label$10 : {
     if ($3) {
      break label$10;
     }
     if ($4 & 3) {
      while (1) {
       if (!$2) {
        break label$1;
       }
       $2 = $2 + -1 | 0;
       $3 = $2 + $0 | 0;
       HEAP8[$3 | 0] = HEAPU8[$1 + $2 | 0];
       if ($3 & 3) {
        continue;
       }
       break;
      }
     }
     if ($2 >>> 0 <= 3) {
      break label$10;
     }
     while (1) {
      $2 = $2 + -4 | 0;
      HEAP32[$2 + $0 >> 2] = HEAP32[$1 + $2 >> 2];
      if ($2 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    if (!$2) {
     break label$1;
    }
    while (1) {
     $2 = $2 + -1 | 0;
     HEAP8[$2 + $0 | 0] = HEAPU8[$1 + $2 | 0];
     if ($2) {
      continue;
     }
     break;
    }
    break label$1;
   }
   if ($2 >>> 0 <= 3) {
    break label$4;
   }
   while (1) {
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $3 = $3 + 4 | 0;
    $2 = $2 + -4 | 0;
    if ($2 >>> 0 > 3) {
     continue;
    }
    break;
   }
  }
  if (!$2) {
   break label$1;
  }
  while (1) {
   HEAP8[$3 | 0] = HEAPU8[$1 | 0];
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function unsigned_20short_20std____2____num_get_unsigned_integral_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     if (($0 | 0) != ($1 | 0)) {
      label$7 : {
       label$8 : {
        $6 = HEAPU8[$0 | 0];
        if (($6 | 0) != 45) {
         break label$8;
        }
        $0 = $0 + 1 | 0;
        if (($1 | 0) != ($0 | 0)) {
         break label$8;
        }
        break label$7;
       }
       $5 = HEAP32[__errno_location() >> 2];
       wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $3 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
       $7 = i64toi32_i32$HIGH_BITS;
       $0 = HEAP32[__errno_location() >> 2];
       label$9 : {
        if ($0) {
         if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
          break label$9;
         }
         if (($0 | 0) == 68) {
          break label$4;
         }
         break label$5;
        }
        wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $5, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
         break label$5;
        }
       }
      }
     }
     HEAP32[$2 >> 2] = 4;
     $0 = 0;
     break label$2;
    }
    if (!$7 & $3 >>> 0 <= std____2__numeric_limits_unsigned_20short___max_28_29() >>> 0 | $7 >>> 0 < 0) {
     break label$3;
    }
   }
   HEAP32[$2 >> 2] = 4;
   $0 = std____2__numeric_limits_unsigned_20short___max_28_29();
   break label$2;
  }
  $0 = $3;
  $0 = ($6 | 0) == 45 ? 0 - $0 | 0 : $0;
 }
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 & 65535;
}
function mbrtowc($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 16 | 0;
 $4 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = $3 ? $3 : 25220;
 $3 = HEAP32[$4 >> 2];
 label$2 : {
  label$3 : {
   label$4 : {
    if (!$1) {
     if ($3) {
      break label$4;
     }
     break label$2;
    }
    $5 = -2;
    if (!$2) {
     break label$2;
    }
    $8 = $0 ? $0 : $6 + 12 | 0;
    label$6 : {
     if ($3) {
      $0 = $2;
      break label$6;
     }
     $3 = HEAPU8[$1 | 0];
     $0 = $3 << 24 >> 24;
     if (($0 | 0) >= 0) {
      HEAP32[$8 >> 2] = $3;
      $5 = ($0 | 0) != 0;
      break label$2;
     }
     $3 = HEAP32[HEAP32[__pthread_self() + 176 >> 2] >> 2];
     $0 = HEAP8[$1 | 0];
     if (!$3) {
      HEAP32[$8 >> 2] = $0 & 57343;
      $5 = 1;
      break label$2;
     }
     $3 = ($0 & 255) + -194 | 0;
     if ($3 >>> 0 > 50) {
      break label$4;
     }
     $3 = HEAP32[($3 << 2) + 8752 >> 2];
     $0 = $2 + -1 | 0;
     if (!$0) {
      break label$3;
     }
     $1 = $1 + 1 | 0;
    }
    $7 = HEAPU8[$1 | 0];
    $9 = $7 >>> 3 | 0;
    if (($9 + -16 | ($3 >> 26) + $9) >>> 0 > 7) {
     break label$4;
    }
    while (1) {
     $0 = $0 + -1 | 0;
     $3 = $7 + -128 | $3 << 6;
     if (($3 | 0) >= 0) {
      HEAP32[$4 >> 2] = 0;
      HEAP32[$8 >> 2] = $3;
      $5 = $2 - $0 | 0;
      break label$2;
     }
     if (!$0) {
      break label$3;
     }
     $1 = $1 + 1 | 0;
     $7 = HEAPU8[$1 | 0];
     if (($7 & 192) == 128) {
      continue;
     }
     break;
    }
   }
   HEAP32[$4 >> 2] = 0;
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 25, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $5 = -1;
   break label$2;
  }
  HEAP32[$4 >> 2] = $3;
 }
 $0 = $6 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5;
}
function unsigned_20long_20std____2____num_get_unsigned_integral_unsigned_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     if (($0 | 0) != ($1 | 0)) {
      label$7 : {
       label$8 : {
        $6 = HEAPU8[$0 | 0];
        if (($6 | 0) != 45) {
         break label$8;
        }
        $0 = $0 + 1 | 0;
        if (($1 | 0) != ($0 | 0)) {
         break label$8;
        }
        break label$7;
       }
       $5 = HEAP32[__errno_location() >> 2];
       wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $3 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
       $7 = i64toi32_i32$HIGH_BITS;
       $0 = HEAP32[__errno_location() >> 2];
       label$9 : {
        if ($0) {
         if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
          break label$9;
         }
         if (($0 | 0) == 68) {
          break label$4;
         }
         break label$5;
        }
        wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $5, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
         break label$5;
        }
       }
      }
     }
     HEAP32[$2 >> 2] = 4;
     $0 = 0;
     break label$2;
    }
    if (!$7 & $3 >>> 0 <= std____2__numeric_limits_unsigned_20long___max_28_29() >>> 0 | $7 >>> 0 < 0) {
     break label$3;
    }
   }
   HEAP32[$2 >> 2] = 4;
   $0 = std____2__numeric_limits_unsigned_20long___max_28_29();
   break label$2;
  }
  $0 = $3;
  $0 = ($6 | 0) == 45 ? 0 - $0 | 0 : $0;
 }
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     if (($0 | 0) != ($1 | 0)) {
      label$7 : {
       label$8 : {
        $6 = HEAPU8[$0 | 0];
        if (($6 | 0) != 45) {
         break label$8;
        }
        $0 = $0 + 1 | 0;
        if (($1 | 0) != ($0 | 0)) {
         break label$8;
        }
        break label$7;
       }
       $5 = HEAP32[__errno_location() >> 2];
       wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $3 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
       $7 = i64toi32_i32$HIGH_BITS;
       $0 = HEAP32[__errno_location() >> 2];
       label$9 : {
        if ($0) {
         if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
          break label$9;
         }
         if (($0 | 0) == 68) {
          break label$4;
         }
         break label$5;
        }
        wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $5, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
         break label$5;
        }
       }
      }
     }
     HEAP32[$2 >> 2] = 4;
     $0 = 0;
     break label$2;
    }
    if (!$7 & $3 >>> 0 <= std____2__numeric_limits_unsigned_20int___max_28_29() >>> 0 | $7 >>> 0 < 0) {
     break label$3;
    }
   }
   HEAP32[$2 >> 2] = 4;
   $0 = std____2__numeric_limits_unsigned_20int___max_28_29();
   break label$2;
  }
  $0 = $3;
  $0 = ($6 | 0) == 45 ? 0 - $0 | 0 : $0;
 }
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function neopt__shelper__ParseHexToShort_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 + -64 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 neopt__shelper__HexToBytes_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($1 + 32 | 0, $0);
 HEAP8[$1 + 16 | 0] = 1;
 HEAP32[$1 + 8 >> 2] = 3412;
 HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 36 >> 2] - HEAP32[$1 + 32 >> 2];
 $0 = operator_20new_28unsigned_20long_29(32);
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0);
 HEAP32[$0 >> 2] = 3556;
 $2 = HEAP32[$1 + 32 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 36 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$1 + 24 >> 2] = $0;
 $2 = operator_20new_28unsigned_20long_29(88);
 HEAP32[$2 + 8 >> 2] = 7260;
 HEAP32[$2 >> 2] = 7240;
 HEAP32[$2 + 4 >> 2] = 0;
 std____2__ios_base__init_28void__29($2 + 8 | 0, $0);
 HEAP32[$2 + 80 >> 2] = 0;
 HEAP32[$2 + 84 >> 2] = -1;
 HEAP32[$1 + 12 >> 2] = $2;
 neopt__IBinaryReader__ReadBytes_28int_29($1 + 48 | 0, $1 + 8 | 0, 2);
 $0 = HEAP32[$1 + 48 >> 2];
 $2 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
 HEAP32[$1 + 52 >> 2] = $0;
 operator_20delete_28void__29($0);
 HEAP32[$1 + 8 >> 2] = 3412;
 label$2 : {
  if (!HEAPU8[$1 + 16 | 0]) {
   break label$2;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  if (!$0) {
   break label$2;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = HEAP32[$1 + 24 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = HEAP32[$1 + 32 >> 2];
 if ($0) {
  HEAP32[$1 + 36 >> 2] = $0;
  operator_20delete_28void__29($0);
 }
 $0 = $1 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 & 65535;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = global$0 - 16 | 0;
 $5 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $7 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($3, $0);
 label$2 : {
  if (!HEAPU8[$3 | 0]) {
   break label$2;
  }
  $6 = $1 + $2 | 0;
  $2 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  $8 = (HEAP32[$2 + 4 >> 2] & 176) == 32 ? $6 : $1;
  $5 = HEAP32[$2 + 24 >> 2];
  $4 = HEAP32[$2 + 76 >> 2];
  if (($4 | 0) == -1) {
   std____2__ios_base__getloc_28_29_20const($3 + 8 | 0, $2);
   $4 = std____2__locale__use_facet_28std____2__locale__id__29_20const($3 + 8 | 0, 25448);
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 28 >> 2]]($4, 32) | 0;
   std____2__locale___locale_28_29($3 + 8 | 0);
   HEAP32[$2 + 76 >> 2] = $4;
  }
  if (std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($5, $1, $8, $6, $2, $4 << 24 >> 24)) {
   break label$2;
  }
  $2 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
  std____2__ios_base__clear_28unsigned_20int_29($2, HEAP32[$2 + 16 >> 2] | 5);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($7);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 16 | 0;
 $9 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 label$2 : {
  if (!$0) {
   break label$2;
  }
  $9 = HEAP32[$4 + 12 >> 2];
  $7 = $2 - $1 | 0;
  if (($7 | 0) >= 1) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $7) | 0) != ($7 | 0)) {
    break label$2;
   }
  }
  $8 = $3 - $1 | 0;
  $1 = ($9 | 0) > ($8 | 0) ? $9 - $8 | 0 : 0;
  if (($1 | 0) >= 1) {
   label$6 : {
    if ($1 >>> 0 >= 11) {
     $8 = $1 + 16 & -16;
     $7 = operator_20new_28unsigned_20long_29($8);
     HEAP32[$6 + 8 >> 2] = $8 | -2147483648;
     HEAP32[$6 >> 2] = $7;
     HEAP32[$6 + 4 >> 2] = $1;
     $9 = $6;
     break label$6;
    }
    HEAP8[$6 + 11 | 0] = $1;
    $7 = $6;
    $9 = $6;
   }
   $8 = 0;
   wasm2js_i32$0 = memset($7, $5, $1) + $1 | 0, wasm2js_i32$1 = 0, HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, HEAP8[$9 + 11 | 0] < 0 ? HEAP32[$6 >> 2] : $6, $1) | 0;
   if (HEAP8[$9 + 11 | 0] <= -1) {
    operator_20delete_28void__29(HEAP32[$6 >> 2]);
   }
   if (($1 | 0) != ($7 | 0)) {
    break label$2;
   }
  }
  $1 = $3 - $2 | 0;
  if (($1 | 0) >= 1) {
   $8 = 0;
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $2, $1) | 0) != ($1 | 0)) {
    break label$2;
   }
  }
  HEAP32[$4 + 12 >> 2] = 0;
  $8 = $0;
 }
 $0 = $6 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $8;
}
function __shgetc($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $3 = HEAP32[$0 + 116 >> 2];
 $5 = $3;
 label$1 : {
  $1 = HEAP32[$0 + 112 >> 2];
  $6 = $1;
  label$2 : {
   if ($3 | $1) {
    $3 = HEAP32[$0 + 120 >> 2];
    $2 = $3;
    $1 = HEAP32[$0 + 124 >> 2];
    $3 = $5;
    if (($1 | 0) > ($3 | 0) ? 1 : ($1 | 0) >= ($3 | 0) ? $2 >>> 0 < $6 >>> 0 ? 0 : 1 : 0) {
     break label$2;
    }
   }
   $8 = __uflow($0);
   if (($8 | 0) > -1) {
    break label$1;
   }
  }
  HEAP32[$0 + 104 >> 2] = 0;
  return -1;
 }
 $9 = HEAP32[$0 + 8 >> 2];
 $1 = HEAP32[$0 + 116 >> 2];
 $5 = $1;
 label$4 : {
  label$5 : {
   $2 = HEAP32[$0 + 112 >> 2];
   $6 = $2;
   if (!($1 | $2)) {
    break label$5;
   }
   $1 = HEAP32[$0 + 120 >> 2];
   $3 = $1 ^ -1;
   $2 = HEAP32[$0 + 124 >> 2];
   $1 = $2 ^ -1;
   $2 = $1;
   $1 = $5;
   $5 = $2;
   $4 = $1 + $5 | 0;
   $2 = $6;
   $1 = $3 + $2 | 0;
   if ($1 >>> 0 < $3 >>> 0) {
    $4 = $4 + 1 | 0;
   }
   $6 = $1;
   $5 = $4;
   $7 = HEAP32[$0 + 4 >> 2];
   $2 = $9 - $7 | 0;
   $4 = $2 >> 31;
   $10 = $4;
   $1 = $6;
   $3 = $2;
   $4 = $5;
   $2 = $10;
   if (($4 | 0) > ($2 | 0) ? 1 : ($4 | 0) >= ($2 | 0) ? $1 >>> 0 < $3 >>> 0 ? 0 : 1 : 0) {
    break label$5;
   }
   HEAP32[$0 + 104 >> 2] = $6 + $7;
   break label$4;
  }
  HEAP32[$0 + 104 >> 2] = $9;
 }
 label$6 : {
  if (!$9) {
   $7 = HEAP32[$0 + 4 >> 2];
   break label$6;
  }
  $6 = $0;
  $1 = HEAP32[$0 + 120 >> 2];
  $3 = $1;
  $4 = HEAP32[$0 + 124 >> 2];
  $2 = $4;
  $7 = HEAP32[$0 + 4 >> 2];
  $1 = ($9 - $7 | 0) + 1 | 0;
  $4 = $1 >> 31;
  $0 = $1;
  $1 = $4;
  $4 = $2;
  $1 = $1 + $4 | 0;
  $2 = $0;
  $5 = $3 + $2 | 0;
  if ($5 >>> 0 < $2 >>> 0) {
   $1 = $1 + 1 | 0;
  }
  $3 = $6;
  HEAP32[$3 + 120 >> 2] = $5;
  HEAP32[$3 + 124 >> 2] = $1;
 }
 $0 = $7 + -1 | 0;
 if (HEAPU8[$0 | 0] != ($8 | 0)) {
  HEAP8[$0 | 0] = $8;
 }
 return $8;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
 if ((std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0) | 0) == (0 - std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0 + 12 | 0) | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
  return;
 }
 $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 24 | 0, $5, $4, 0) - $0 | 0;
 $4 = HEAP32[$1 >> 2];
 if (!($0 | ($4 | 0) != 12)) {
  HEAP32[$1 >> 2] = 0;
  return;
 }
 if (!(($0 | 0) != 12 | ($4 | 0) > 11)) {
  HEAP32[$1 >> 2] = $4 + 12;
 }
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___assign_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0);
 label$2 : {
  if ($3 >>> 0 >= $2 >>> 0) {
   $3 = wchar_t__20std____2____to_address_wchar_t__28wchar_t__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0));
   std____2__char_traits_wchar_t___move_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($3, $1, $2);
   HEAP32[$4 + 12 >> 2] = 0;
   std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29(($2 << 2) + $3 | 0, $4 + 12 | 0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $2);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_iterators_past_28unsigned_20long_29($0, $2);
   break label$2;
  }
  $6 = $2 - $3 | 0;
  $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $3, $6, $5, 0, $5, $2, $1);
 }
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function mbsnrtowcs($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = global$0 - 1040 | 0;
 $5 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $7 = HEAP32[$1 >> 2];
 HEAP32[$6 + 12 >> 2] = $7;
 $8 = $0 ? $0 : $6 + 16 | 0;
 $3 = $0 ? $3 : 256;
 label$2 : {
  if (!$3 | !$7) {
   break label$2;
  }
  $5 = $2 >>> 2 | 0;
  $10 = $5 >>> 0 >= $3 >>> 0;
  if ($5 >>> 0 < $3 >>> 0 ? $2 >>> 0 <= 131 : 0) {
   break label$2;
  }
  while (1) {
   $5 = $10 ? $3 : $5;
   $2 = $2 - $5 | 0;
   $5 = mbsrtowcs($8, $6 + 12 | 0, $5, $4);
   if (($5 | 0) == -1) {
    $3 = 0;
    $7 = HEAP32[$6 + 12 >> 2];
    $9 = -1;
    break label$2;
   }
   $10 = ($6 + 16 | 0) == ($8 | 0);
   $8 = $10 ? $8 : ($5 << 2) + $8 | 0;
   $9 = $5 + $9 | 0;
   $3 = $3 - ($10 ? 0 : $5) | 0;
   $7 = HEAP32[$6 + 12 >> 2];
   if (!$3 | !$7) {
    break label$2;
   }
   $5 = $2 >>> 2 | 0;
   $10 = $5 >>> 0 >= $3 >>> 0;
   if ($2 >>> 0 > 131 | $5 >>> 0 >= $3 >>> 0) {
    continue;
   }
   break;
  }
 }
 label$5 : {
  label$6 : {
   if (!$2 | (!$7 | !$3)) {
    break label$6;
   }
   while (1) {
    $5 = mbrtowc($8, $7, $2, $4);
    if ($5 + 2 >>> 0 <= 2) {
     $2 = $5 + 1 | 0;
     if ($2 >>> 0 <= 1) {
      if ($2 - 1) {
       break label$5;
      }
      HEAP32[$6 + 12 >> 2] = 0;
      break label$6;
     }
     HEAP32[$4 >> 2] = 0;
     break label$6;
    }
    $7 = HEAP32[$6 + 12 >> 2] + $5 | 0;
    HEAP32[$6 + 12 >> 2] = $7;
    $9 = $9 + 1 | 0;
    $3 = $3 + -1 | 0;
    if (!$3) {
     break label$6;
    }
    $8 = $8 + 4 | 0;
    $2 = $2 - $5 | 0;
    $5 = $9;
    if ($2) {
     continue;
    }
    break;
   }
   break label$5;
  }
  $5 = $9;
 }
 if ($0) {
  HEAP32[$1 >> 2] = HEAP32[$6 + 12 >> 2];
 }
 $0 = $6 + 1040 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5;
}
function __stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = HEAP32[$0 + 28 >> 2];
 HEAP32[$3 + 16 >> 2] = $4;
 $5 = HEAP32[$0 + 20 >> 2];
 HEAP32[$3 + 28 >> 2] = $2;
 HEAP32[$3 + 24 >> 2] = $1;
 $1 = $5 - $4 | 0;
 HEAP32[$3 + 20 >> 2] = $1;
 $5 = $1 + $2 | 0;
 $7 = 2;
 $1 = $3 + 16 | 0;
 label$2 : {
  label$3 : {
   label$4 : {
    if (!__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $3 + 16 | 0, 2, $3 + 12 | 0) | 0)) {
     while (1) {
      $4 = HEAP32[$3 + 12 >> 2];
      if (($5 | 0) == ($4 | 0)) {
       break label$4;
      }
      if (($4 | 0) <= -1) {
       break label$3;
      }
      $6 = HEAP32[$1 + 4 >> 2];
      $8 = $4 >>> 0 > $6 >>> 0;
      $1 = $8 ? $1 + 8 | 0 : $1;
      $6 = $4 - ($8 ? $6 : 0) | 0;
      HEAP32[$1 >> 2] = $6 + HEAP32[$1 >> 2];
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - $6;
      $5 = $5 - $4 | 0;
      $7 = $7 - $8 | 0;
      if (!__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $1 | 0, $7 | 0, $3 + 12 | 0) | 0)) {
       continue;
      }
      break;
     }
    }
    HEAP32[$3 + 12 >> 2] = -1;
    if (($5 | 0) != -1) {
     break label$3;
    }
   }
   $1 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 28 >> 2] = $1;
   HEAP32[$0 + 20 >> 2] = $1;
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 48 >> 2] + $1;
   $0 = $2;
   break label$2;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  $0 = 0;
  if (($7 | 0) == 2) {
   break label$2;
  }
  $0 = $2 - HEAP32[$1 + 4 >> 2] | 0;
 }
 $4 = $0;
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2____shared_count____add_shared_28_29($1);
 $4 = std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___unique_ptr_true_2c_20void__28std____2__locale__facet__29($3 + 8 | 0, $1);
 $1 = $0 + 16 | 0;
 if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($1) >>> 0 <= $2 >>> 0) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___resize_28unsigned_20long_29($1, $2 + 1 | 0);
 }
 if (HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___operator_5b_5d_28unsigned_20long_29($1, $2) >> 2]) {
  std____2____shared_count____release_shared_28_29(HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___operator_5b_5d_28unsigned_20long_29($1, $2) >> 2]);
 }
 $0 = std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___release_28_29($4);
 wasm2js_i32$0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___operator_5b_5d_28unsigned_20long_29($1, $2), wasm2js_i32$1 = $0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release____unique_ptr_28_29($4);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function neopt__IBinaryReader__ReadVarInt_28unsigned_20long_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0) | 0;
 $4 = $2 + -253 | 0;
 label$2 : {
  if ($4 >>> 0 > 2) {
   break label$2;
  }
  label$3 : {
   switch ($4 - 1 | 0) {
   default:
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    break label$2;
   case 0:
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
    break label$2;
   case 1:
    break label$3;
   }
  }
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 if ($2 >>> 0 > $1 >>> 0) {
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__endl_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20long_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(24288, 3932), $2), 3949), $1));
  HEAP32[$3 + 4 >> 2] = 3966;
  HEAP32[$3 >> 2] = 3955;
  iprintf(3084, $3);
  exit(1);
  abort();
 }
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function neopt__jhelper__Parse_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($3 + 8 | 0, $1);
 HEAP32[$3 + 24 >> 2] = 2816;
 $1 = operator_20new_28unsigned_20long_29(140);
 HEAP32[$1 + 60 >> 2] = 2992;
 HEAP32[$1 >> 2] = 2972;
 HEAP32[$1 + 4 >> 2] = 0;
 $4 = $1 + 8 | 0;
 std____2__ios_base__init_28void__29($1 + 60 | 0, $4);
 HEAP32[$1 + 132 >> 2] = 0;
 HEAP32[$1 + 136 >> 2] = -1;
 HEAP32[$1 + 60 >> 2] = 2936;
 HEAP32[$1 >> 2] = 2916;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($4);
 HEAP32[$1 + 40 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 2672;
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 52 >> 2] = 0;
 HEAP32[$1 + 56 >> 2] = 8;
 std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($4, $5);
 HEAP32[$3 + 28 >> 2] = $1;
 if (HEAP8[$5 + 11 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$5 >> 2]);
 }
 neopt__jhelper__Parse_28neopt__ITextReader__2c_20int_29($0, $3 + 24 | 0, $2);
 HEAP32[$3 + 24 >> 2] = 2816;
 $1 = HEAP32[$3 + 28 >> 2];
 if ($1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
 }
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
 if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0) == (0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 12 | 0) | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
  return;
 }
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 24 | 0, $5, $4, 0) - $0 | 0;
 $4 = HEAP32[$1 >> 2];
 if (!($0 | ($4 | 0) != 12)) {
  HEAP32[$1 >> 2] = 0;
  return;
 }
 if (!(($0 | 0) != 12 | ($4 | 0) > 11)) {
  HEAP32[$1 >> 2] = $4 + 12;
 }
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $5 = global$0 - 16 | 0;
 $3 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0);
 $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0);
 label$2 : {
  if ($3 - $4 >>> 0 >= $2 >>> 0) {
   if (!$2) {
    break label$2;
   }
   $3 = wchar_t__20std____2____to_address_wchar_t__28wchar_t__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0));
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($3 + ($4 << 2) | 0, $1, $2);
   $2 = $2 + $4 | 0;
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $2);
   HEAP32[$5 + 12 >> 2] = 0;
   std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29(($2 << 2) + $3 | 0, $5 + 12 | 0);
   break label$2;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $3, ($2 + $4 | 0) - $3 | 0, $4, $4, 0, $2, $1);
 }
 $1 = $5 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
 label$2 : {
  if ($3 >>> 0 >= $2 >>> 0) {
   $3 = char__20std____2____to_address_char__28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0));
   std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($3, $1, $2);
   HEAP8[$4 + 15 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $4 + 15 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $2);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_iterators_past_28unsigned_20long_29($0, $2);
   break label$2;
  }
  $6 = $2 - $3 | 0;
  $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $3, $6, $5, 0, $5, $2, $1);
 }
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function scalbnl($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 80 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 label$2 : {
  if (($5 | 0) >= 16384) {
   __multf3($6 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
   $7 = HEAP32[$6 + 40 >> 2];
   $3 = $7;
   $4 = HEAP32[$6 + 44 >> 2];
   $1 = HEAP32[$6 + 32 >> 2];
   $7 = HEAP32[$6 + 36 >> 2];
   $2 = $7;
   if (($5 | 0) < 32767) {
    $5 = $5 + -16383 | 0;
    break label$2;
   }
   $7 = $2;
   __multf3($6 + 16 | 0, $1, $7, $3, $4, 0, 0, 0, 2147352576);
   $5 = (($5 | 0) < 49149 ? $5 : 49149) + -32766 | 0;
   $2 = HEAP32[$6 + 24 >> 2];
   $3 = $2;
   $4 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 16 >> 2];
   $2 = HEAP32[$6 + 20 >> 2];
   break label$2;
  }
  if (($5 | 0) > -16383) {
   break label$2;
  }
  __multf3($6 - -64 | 0, $1, $2, $3, $4, 0, 0, 0, 65536);
  $7 = HEAP32[$6 + 72 >> 2];
  $3 = $7;
  $4 = HEAP32[$6 + 76 >> 2];
  $1 = HEAP32[$6 + 64 >> 2];
  $7 = HEAP32[$6 + 68 >> 2];
  $2 = $7;
  if (($5 | 0) > -32765) {
   $5 = $5 + 16382 | 0;
   break label$2;
  }
  $7 = $2;
  __multf3($6 + 48 | 0, $1, $7, $3, $4, 0, 0, 0, 65536);
  $5 = (($5 | 0) > -49146 ? $5 : -49146) + 32764 | 0;
  $2 = HEAP32[$6 + 56 >> 2];
  $3 = $2;
  $4 = HEAP32[$6 + 60 >> 2];
  $1 = HEAP32[$6 + 48 >> 2];
  $2 = HEAP32[$6 + 52 >> 2];
 }
 $7 = $5 + 16383 << 16;
 __multf3($6, $1, $2, $3, $4, 0, 0, 0, $7);
 $2 = HEAP32[$6 + 12 >> 2];
 $7 = HEAP32[$6 + 8 >> 2];
 $1 = $7;
 $7 = $0;
 HEAP32[$7 + 8 >> 2] = $1;
 HEAP32[$7 + 12 >> 2] = $2;
 $7 = HEAP32[$6 + 4 >> 2];
 $2 = HEAP32[$6 >> 2];
 $1 = $2;
 $2 = $0;
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $7;
 $0 = $6 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____tree_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20std____2____map_value_compare_unsigned_20int_2c_20std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20std____2__less_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___20__20___destroy_28std____2____tree_node_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20void____29($0, $1) {
 if ($1) {
  std____2____tree_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20std____2____map_value_compare_unsigned_20int_2c_20std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20std____2__less_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___20__20___destroy_28std____2____tree_node_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20void____29($0, HEAP32[$1 >> 2]);
  std____2____tree_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20std____2____map_value_compare_unsigned_20int_2c_20std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20std____2__less_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___20__20___destroy_28std____2____tree_node_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20void____29($0, HEAP32[$1 + 4 >> 2]);
  operator_20delete_28void__29($1);
 }
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_percent_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $0 = global$0 - 16 | 0;
 $5 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$0 + 8 >> 2] = $2;
 $2 = 6;
 label$2 : {
  label$3 : {
   if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($1, $0 + 8 | 0)) {
    break label$3;
   }
   $2 = 4;
   if ((std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($4, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($1), 0) | 0) != 37) {
    break label$3;
   }
   $2 = 2;
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($1), $0 + 8 | 0)) {
    break label$2;
   }
  }
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | $2;
 }
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function pop_arg($0, $1, $2, $3) {
 label$1 : {
  label$2 : {
   if ($1 >>> 0 > 20) {
    break label$2;
   }
   $1 = $1 + -9 | 0;
   if ($1 >>> 0 > 9) {
    break label$2;
   }
   label$3 : {
    switch ($1 - 1 | 0) {
    default:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     return;
    case 0:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP32[$1 >> 2];
     $2 = $1 >> 31;
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $2;
     return;
    case 1:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $2 = HEAP32[$1 >> 2];
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 3:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP16[$1 >> 1];
     $2 = $1 >> 31;
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $2;
     return;
    case 4:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $2 = HEAPU16[$1 >> 1];
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 5:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP8[$1 | 0];
     $2 = $1 >> 31;
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $2;
     return;
    case 6:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $2 = HEAPU8[$1 | 0];
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 2:
    case 7:
     break label$1;
    case 8:
     break label$3;
    }
   }
   FUNCTION_TABLE[$3]($0, $2);
  }
  return;
 }
 $1 = HEAP32[$2 >> 2] + 7 & -8;
 HEAP32[$2 >> 2] = $1 + 8;
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
}
function mbtowc($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = global$0 - 16 | 0;
 $3 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = 0;
 label$2 : {
  if (!$1) {
   break label$2;
  }
  label$3 : {
   if (!$2) {
    break label$3;
   }
   $0 = $0 ? $0 : $5 + 12 | 0;
   $3 = HEAPU8[$1 | 0];
   $4 = $3 << 24 >> 24;
   if (($4 | 0) >= 0) {
    HEAP32[$0 >> 2] = $3;
    $3 = ($4 | 0) != 0;
    break label$2;
   }
   $3 = HEAP32[HEAP32[__pthread_self_3() + 176 >> 2] >> 2];
   $4 = HEAP8[$1 | 0];
   if (!$3) {
    HEAP32[$0 >> 2] = $4 & 57343;
    $3 = 1;
    break label$2;
   }
   $3 = ($4 & 255) + -194 | 0;
   if ($3 >>> 0 > 50) {
    break label$3;
   }
   $3 = HEAP32[($3 << 2) + 8752 >> 2];
   if ($3 << Math_imul($2, 6) + -6 < 0 ? $2 >>> 0 <= 3 : 0) {
    break label$3;
   }
   $4 = HEAPU8[$1 + 1 | 0];
   $2 = $4 >>> 3 | 0;
   if (($2 + -16 | ($3 >> 26) + $2) >>> 0 > 7) {
    break label$3;
   }
   $2 = $4 + -128 | $3 << 6;
   if (($2 | 0) >= 0) {
    HEAP32[$0 >> 2] = $2;
    $3 = 2;
    break label$2;
   }
   $3 = HEAPU8[$1 + 2 | 0] + -128 | 0;
   if ($3 >>> 0 > 63) {
    break label$3;
   }
   $2 = $2 << 6 | $3;
   if (($2 | 0) >= 0) {
    HEAP32[$0 >> 2] = $2;
    $3 = 3;
    break label$2;
   }
   $1 = HEAPU8[$1 + 3 | 0] + -128 | 0;
   if ($1 >>> 0 > 63) {
    break label$3;
   }
   HEAP32[$0 >> 2] = $2 << 6 | $1;
   $3 = 4;
   break label$2;
  }
  wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 25, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $3 = -1;
 }
 $1 = $3;
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_char__20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 12 >> 2] = $3;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20const___28std____2____default_init_tag___2c_20std____2__allocator_char__20const__29($0, $5 + 8 | 0, $4);
 $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
 if ($4 >>> 0 < $2 >>> 0) {
  std____2____basic_string_common_true_____throw_out_of_range_28_29_20const($0);
  abort();
 }
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1);
 HEAP32[$5 + 4 >> 2] = $4 - $2;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1 + $2 | 0, HEAP32[unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($5 + 12 | 0, $5 + 4 | 0) >> 2]);
 $1 = $5 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function neopt__JNumber__ToString_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 144 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 64 >> 2] = 2532;
 HEAP32[$2 >> 2] = 2512;
 HEAP32[$2 + 8 >> 2] = 2372;
 HEAP32[$2 + 4 >> 2] = 0;
 $5 = $2 - -64 | 0;
 $4 = $2 + 12 | 0;
 std____2__ios_base__init_28void__29($5, $4);
 HEAP32[$2 + 136 >> 2] = 0;
 HEAP32[$2 + 140 >> 2] = -1;
 HEAP32[$2 + 64 >> 2] = 2392;
 HEAP32[$2 >> 2] = 2352;
 HEAP32[$2 + 8 >> 2] = 2372;
 $3 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($4);
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = 0;
 HEAP32[$2 + 56 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 24;
 HEAP32[$2 + 12 >> 2] = 2672;
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28double_29($2 + 8 | 0, HEAPF64[$1 + 16 >> 3]);
 std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($0, $4);
 HEAP32[$2 + 64 >> 2] = 2392;
 HEAP32[$2 >> 2] = 2352;
 HEAP32[$2 + 12 >> 2] = 2672;
 HEAP32[$2 + 8 >> 2] = 2372;
 if (HEAP8[$2 + 55 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$2 + 44 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($3);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($2, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($5);
 $0 = $2 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function wcsnrtombs($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $6 = global$0 - 272 | 0;
 $4 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $7 = HEAP32[$1 >> 2];
 HEAP32[$6 + 12 >> 2] = $7;
 $8 = $0 ? $0 : $6 + 16 | 0;
 $3 = $0 ? $3 : 256;
 label$2 : {
  if (!$3 | !$7) {
   break label$2;
  }
  $5 = $3 >>> 0 <= $2 >>> 0;
  if (!($5 | $2 >>> 0 > 32)) {
   break label$2;
  }
  while (1) {
   $5 = $5 & 1 ? $3 : $2;
   $2 = $2 - $5 | 0;
   $5 = wcsrtombs($8, $6 + 12 | 0, $5, 0);
   if (($5 | 0) == -1) {
    $3 = 0;
    $7 = HEAP32[$6 + 12 >> 2];
    $9 = -1;
    break label$2;
   }
   $4 = ($6 + 16 | 0) == ($8 | 0);
   $8 = $4 ? $8 : $5 + $8 | 0;
   $9 = $5 + $9 | 0;
   $3 = $3 - ($4 ? 0 : $5) | 0;
   $7 = HEAP32[$6 + 12 >> 2];
   if (!$3 | !$7) {
    break label$2;
   }
   $5 = $2 >>> 0 >= $3 >>> 0;
   if ($5 | $2 >>> 0 >= 33) {
    continue;
   }
   break;
  }
 }
 label$7 : {
  label$8 : {
   if (!$2 | (!$7 | !$3)) {
    break label$8;
   }
   while (1) {
    $5 = wcrtomb($8, HEAP32[$7 >> 2], 0);
    if ($5 + 1 >>> 0 <= 1) {
     $4 = -1;
     if ($5) {
      break label$7;
     }
     HEAP32[$6 + 12 >> 2] = 0;
     break label$8;
    }
    $7 = HEAP32[$6 + 12 >> 2] + 4 | 0;
    HEAP32[$6 + 12 >> 2] = $7;
    $9 = $5 + $9 | 0;
    $3 = $3 - $5 | 0;
    if (!$3) {
     break label$8;
    }
    $8 = $5 + $8 | 0;
    $4 = $9;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
   break label$7;
  }
  $4 = $9;
 }
 if ($0) {
  HEAP32[$1 >> 2] = HEAP32[$6 + 12 >> 2];
 }
 $0 = $6 + 272 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $5 = global$0 - 16 | 0;
 $3 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
 $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
 label$2 : {
  if ($3 - $4 >>> 0 >= $2 >>> 0) {
   if (!$2) {
    break label$2;
   }
   $3 = char__20std____2____to_address_char__28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0));
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($3 + $4 | 0, $1, $2);
   $2 = $2 + $4 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $2);
   HEAP8[$5 + 15 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $5 + 15 | 0);
   break label$2;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $3, ($2 + $4 | 0) - $3 | 0, $4, $4, 0, $2, $1);
 }
 $1 = $5 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_white_space_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $0 = global$0 - 16 | 0;
 $5 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$0 + 8 >> 2] = $2;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($1, $0 + 8 | 0)) {
    break label$3;
   }
   if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($4, 8192, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($1))) {
    break label$3;
   }
   std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($1);
   continue;
  }
  break;
 }
 if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($1, $0 + 8 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsgetn_28wchar_t__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 while (1) {
  label$3 : {
   if (($5 | 0) >= ($2 | 0)) {
    break label$3;
   }
   $3 = HEAP32[$0 + 12 >> 2];
   $6 = HEAP32[$0 + 16 >> 2];
   label$4 : {
    if ($3 >>> 0 < $6 >>> 0) {
     HEAP32[$4 + 12 >> 2] = 2147483647;
     HEAP32[$4 + 8 >> 2] = $6 - $3 >> 2;
     HEAP32[$4 + 4 >> 2] = $2 - $5;
     $3 = long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 8 | 0, $4 + 4 | 0));
     $3 = HEAP32[$3 >> 2];
     std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($1, HEAP32[$0 + 12 >> 2], $3);
     std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___gbump_28int_29($0, $3);
     $1 = ($3 << 2) + $1 | 0;
     break label$4;
    }
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
    if (($3 | 0) == -1) {
     break label$3;
    }
    wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__char_traits_wchar_t___to_char_type_28unsigned_20int_29($3), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $3 = 1;
    $1 = $1 + 4 | 0;
   }
   $5 = $3 + $5 | 0;
   continue;
  }
  break;
 }
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 16 | 0;
 $6 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$4 + 12 >> 2] = 0;
 std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______compressed_pair_std__nullptr_t_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul____28std__nullptr_t___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___29($0 + 12 | 0, $4 + 12 | 0, $3);
 if ($1) {
  $5 = std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20unsigned_20long_29(std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______alloc_28_29($0), $1);
 }
 HEAP32[$0 >> 2] = $5;
 $2 = ($2 << 2) + $5 | 0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $2;
 wasm2js_i32$0 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______end_cap_28_29($0), wasm2js_i32$1 = ($1 << 2) + $5 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_percent_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $0 = global$0 - 16 | 0;
 $5 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$0 + 8 >> 2] = $2;
 $2 = 6;
 label$2 : {
  label$3 : {
   if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($1, $0 + 8 | 0)) {
    break label$3;
   }
   $2 = 4;
   if ((std____2__ctype_char___narrow_28char_2c_20char_29_20const($4, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($1), 0) | 0) != 37) {
    break label$3;
   }
   $2 = 2;
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($1), $0 + 8 | 0)) {
    break label$2;
   }
  }
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | $2;
 }
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function Neo__Cryptography__ECC__ECPoint__ECPoint_28Neo__Cryptography__ECC__ECCurve_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 48 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 $3 = csbigintegerlib__BigInteger__BigInteger_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__2c_20bool_2c_20bool_29($2 + 32 | 0, $2 + 16 | 0, 0, 0);
 Neo__Cryptography__ECC__ECFieldElement__ECFieldElement_28csbigintegerlib__BigInteger_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($0, $3, $1);
 $4 = HEAP32[$3 >> 2];
 if ($4) {
  HEAP32[$3 + 4 >> 2] = $4;
  operator_20delete_28void__29($4);
 }
 $3 = HEAP32[$2 + 16 >> 2];
 if ($3) {
  HEAP32[$2 + 20 >> 2] = $3;
  operator_20delete_28void__29($3);
 }
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $4 = $0 + 12 | 0;
 $3 = csbigintegerlib__BigInteger__BigInteger_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__2c_20bool_2c_20bool_29($2 + 32 | 0, $2, 0, 0);
 Neo__Cryptography__ECC__ECFieldElement__ECFieldElement_28csbigintegerlib__BigInteger_20const__2c_20Neo__Cryptography__ECC__ECCurve_20const__29($4, $3, $1);
 $1 = HEAP32[$3 >> 2];
 if ($1) {
  HEAP32[$3 + 4 >> 2] = $1;
  operator_20delete_28void__29($1);
 }
 $1 = HEAP32[$2 >> 2];
 if ($1) {
  HEAP32[$2 + 4 >> 2] = $1;
  operator_20delete_28void__29($1);
 }
 $1 = $2 + 48 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function Neo__VM__ScriptBuilder__ToArray_28_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $2 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $3 = $4 + 8 | 0;
 $2 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 4781, 55);
 std____2__ios_base__getloc_28_29_20const($3, $2 + HEAP32[HEAP32[$2 >> 2] + -12 >> 2] | 0);
 $3 = std____2__locale__use_facet_28std____2__locale__id__29_20const($4 + 8 | 0, 25448);
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, 10) | 0;
 std____2__locale___locale_28_29($4 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($2, $3);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($2);
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 label$2 : {
  $3 = HEAP32[$1 >> 2];
  $2 = HEAP32[$1 + 4 >> 2] - $3 | 0;
  if ($2) {
   if (($2 | 0) <= -1) {
    break label$2;
   }
   $1 = operator_20new_28unsigned_20long_29($2);
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $1;
   $5 = $1 + $2 | 0;
   HEAP32[$0 + 8 >> 2] = $5;
   memcpy($1, $3, $2);
   HEAP32[$0 + 4 >> 2] = $5;
  }
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_white_space_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0;
 $0 = global$0 - 16 | 0;
 $5 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$0 + 8 >> 2] = $2;
 while (1) {
  label$3 : {
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($1, $0 + 8 | 0)) {
    break label$3;
   }
   if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($4, 8192, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($1))) {
    break label$3;
   }
   std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($1);
   continue;
  }
  break;
 }
 if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($1, $0 + 8 | 0)) {
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 }
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function neopt__shelper__HexToBytes_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $4 = HEAP32[$1 + 4 >> 2];
 $2 = HEAPU8[$1 + 11 | 0];
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $4 = $2 << 24 >> 24 < 0 ? $4 : $2;
 $2 = $4 >>> 1 | 0;
 if ($2) {
  $5 = operator_20new_28unsigned_20long_29($2);
  HEAP32[$0 >> 2] = $5;
  $6 = $2 + $5 | 0;
  HEAP32[$0 + 8 >> 2] = $6;
  memset($5, 0, $2);
  HEAP32[$0 + 4 >> 2] = $6;
 }
 if ($4) {
  $0 = 0;
  while (1) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_char__20const__29($3, $1, $0, 2, $1);
   wasm2js_i32$0 = ($0 >>> 1 | 0) + $5 | 0, wasm2js_i32$1 = strtol(HEAP8[$3 + 11 | 0] < 0 ? HEAP32[$3 >> 2] : $3, 0, 16), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   if (HEAP8[$3 + 11 | 0] <= -1) {
    operator_20delete_28void__29(HEAP32[$3 >> 2]);
   }
   $0 = $0 + 2 | 0;
   $2 = HEAPU8[$1 + 11 | 0];
   if ($0 >>> 0 < ($2 << 24 >> 24 < 0 ? HEAP32[$1 + 4 >> 2] : $2) >>> 0) {
    continue;
   }
   break;
  }
 }
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __vfprintf_internal($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 - 208 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 204 >> 2] = $2;
 $2 = 0;
 memset($5 + 160 | 0, 0, 40);
 HEAP32[$5 + 200 >> 2] = HEAP32[$5 + 204 >> 2];
 label$2 : {
  if ((printf_core(0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4) | 0) < 0) {
   $1 = -1;
   break label$2;
  }
  if (HEAP32[$0 + 76 >> 2] >= 0) {
   $2 = __lockfile($0);
  }
  $7 = HEAP32[$0 >> 2];
  if (HEAP8[$0 + 74 | 0] <= 0) {
   HEAP32[$0 >> 2] = $7 & -33;
  }
  $7 = $7 & 32;
  label$6 : {
   if (HEAP32[$0 + 48 >> 2]) {
    $4 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
    break label$6;
   }
   HEAP32[$0 + 48 >> 2] = 80;
   HEAP32[$0 + 16 >> 2] = $5 + 80;
   HEAP32[$0 + 28 >> 2] = $5;
   HEAP32[$0 + 20 >> 2] = $5;
   $6 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 44 >> 2] = $5;
   $1 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
   $4 = $1;
   if (!$6) {
    break label$6;
   }
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 44 >> 2] = $6;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   $3 = HEAP32[$0 + 20 >> 2];
   HEAP32[$0 + 20 >> 2] = 0;
   $4 = $3 ? $1 : -1;
  }
  $3 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $7 | $3;
  $1 = $4;
  $1 = $3 & 32 ? -1 : $1;
  if (!$2) {
   break label$2;
  }
  __unlockfile($0);
 }
 $0 = $5 + 208 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function Neo__Helper__HexToBytes_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $4 = HEAP32[$1 + 4 >> 2];
 $2 = HEAPU8[$1 + 11 | 0];
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $4 = $2 << 24 >> 24 < 0 ? $4 : $2;
 $2 = $4 >>> 1 | 0;
 if ($2) {
  $5 = operator_20new_28unsigned_20long_29($2);
  HEAP32[$0 >> 2] = $5;
  $6 = $2 + $5 | 0;
  HEAP32[$0 + 8 >> 2] = $6;
  memset($5, 0, $2);
  HEAP32[$0 + 4 >> 2] = $6;
 }
 if ($4) {
  $0 = 0;
  while (1) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_char__20const__29($3, $1, $0, 2, $1);
   wasm2js_i32$0 = ($0 >>> 1 | 0) + $5 | 0, wasm2js_i32$1 = strtol(HEAP8[$3 + 11 | 0] < 0 ? HEAP32[$3 >> 2] : $3, 0, 16), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   if (HEAP8[$3 + 11 | 0] <= -1) {
    operator_20delete_28void__29(HEAP32[$3 >> 2]);
   }
   $0 = $0 + 2 | 0;
   $2 = HEAPU8[$1 + 11 | 0];
   if ($0 >>> 0 < ($2 << 24 >> 24 < 0 ? HEAP32[$1 + 4 >> 2] : $2) >>> 0) {
    continue;
   }
   break;
  }
 }
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_at_end_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = global$0 - 16 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $1 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20____ConstructTransaction___ConstructTransaction_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___2c_20unsigned_20long_29($3, $0, $1);
 $2 = HEAP32[$1 + 4 >> 2];
 while (1) {
  if (HEAP32[$1 + 8 >> 2] != ($2 | 0)) {
   void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___construct_std____2__locale__facet___28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0), std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29(HEAP32[$1 + 4 >> 2]));
   $2 = HEAP32[$1 + 4 >> 2] + 4 | 0;
   HEAP32[$1 + 4 >> 2] = $2;
   continue;
  }
  break;
 }
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20____ConstructTransaction____ConstructTransaction_28_29($1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function memset($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $3 = $0 + $2 | 0;
  HEAP8[$3 + -1 | 0] = $1;
  HEAP8[$0 | 0] = $1;
  if ($2 >>> 0 < 3) {
   break label$1;
  }
  HEAP8[$3 + -2 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1;
  HEAP8[$3 + -3 | 0] = $1;
  HEAP8[$0 + 2 | 0] = $1;
  if ($2 >>> 0 < 7) {
   break label$1;
  }
  HEAP8[$3 + -4 | 0] = $1;
  HEAP8[$0 + 3 | 0] = $1;
  if ($2 >>> 0 < 9) {
   break label$1;
  }
  $4 = 0 - $0 & 3;
  $3 = $4 + $0 | 0;
  $1 = Math_imul($1 & 255, 16843009);
  HEAP32[$3 >> 2] = $1;
  $4 = $2 - $4 & -4;
  $2 = $4 + $3 | 0;
  HEAP32[$2 + -4 >> 2] = $1;
  if ($4 >>> 0 < 9) {
   break label$1;
  }
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$2 + -8 >> 2] = $1;
  HEAP32[$2 + -12 >> 2] = $1;
  if ($4 >>> 0 < 25) {
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$2 + -16 >> 2] = $1;
  HEAP32[$2 + -20 >> 2] = $1;
  HEAP32[$2 + -24 >> 2] = $1;
  HEAP32[$2 + -28 >> 2] = $1;
  $6 = $3 & 4 | 24;
  $2 = $4 - $6 | 0;
  if ($2 >>> 0 < 32) {
   break label$1;
  }
  $5 = $1;
  $4 = $1;
  $1 = $3 + $6 | 0;
  while (1) {
   HEAP32[$1 + 24 >> 2] = $5;
   $3 = $4;
   HEAP32[$1 + 28 >> 2] = $3;
   HEAP32[$1 + 16 >> 2] = $5;
   HEAP32[$1 + 20 >> 2] = $3;
   HEAP32[$1 + 8 >> 2] = $5;
   HEAP32[$1 + 12 >> 2] = $3;
   HEAP32[$1 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $3;
   $1 = $1 + 32 | 0;
   $2 = $2 + -32 | 0;
   if ($2 >>> 0 > 31) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsgetn_28char__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 while (1) {
  label$3 : {
   if (($5 | 0) >= ($2 | 0)) {
    break label$3;
   }
   $3 = HEAP32[$0 + 12 >> 2];
   $6 = HEAP32[$0 + 16 >> 2];
   label$4 : {
    if ($3 >>> 0 < $6 >>> 0) {
     HEAP32[$4 + 12 >> 2] = 2147483647;
     HEAP32[$4 + 8 >> 2] = $6 - $3;
     HEAP32[$4 + 4 >> 2] = $2 - $5;
     $3 = long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 8 | 0, $4 + 4 | 0));
     $3 = HEAP32[$3 >> 2];
     std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($1, HEAP32[$0 + 12 >> 2], $3);
     std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___gbump_28int_29($0, $3);
     break label$4;
    }
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
    if (($3 | 0) == -1) {
     break label$3;
    }
    wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__char_traits_char___to_char_type_28int_29($3), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    $3 = 1;
   }
   $1 = $1 + $3 | 0;
   $5 = $3 + $5 | 0;
   continue;
  }
  break;
 }
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28unsigned_20long_2c_20char_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 if ($1) {
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
  $6 = $5 + $1 | 0;
  if ($3 - $5 >>> 0 < $1 >>> 0) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $3, $6 - $3 | 0, $5, $5, 0, 0);
  }
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0);
  std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29(char__20std____2____to_address_char__28char__29($3) + $5 | 0, $1, $2);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $6);
  HEAP8[$4 + 15 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($3 + $6 | 0, $4 + 15 | 0);
 }
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$2;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   label$6 : {
    if (HEAP32[$1 + 44 >> 2] == 4) {
     break label$6;
    }
    HEAP16[$1 + 52 >> 1] = 0;
    $0 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $2, 1, $4);
    if (HEAPU8[$1 + 53 | 0]) {
     HEAP32[$1 + 44 >> 2] = 3;
     if (!HEAPU8[$1 + 52 | 0]) {
      break label$6;
     }
     break label$2;
    }
    HEAP32[$1 + 44 >> 2] = 4;
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4);
 }
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $7 = std____2__char_traits_wchar_t___eof_28_29();
 while (1) {
  label$3 : {
   if (($5 | 0) >= ($2 | 0)) {
    break label$3;
   }
   $3 = HEAP32[$0 + 24 >> 2];
   $6 = HEAP32[$0 + 28 >> 2];
   if ($3 >>> 0 >= $6 >>> 0) {
    if (((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(HEAP32[$1 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($7 | 0)) {
     break label$3;
    }
    $5 = $5 + 1 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   HEAP32[$4 + 12 >> 2] = $6 - $3 >> 2;
   HEAP32[$4 + 8 >> 2] = $2 - $5;
   $3 = long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, $4 + 8 | 0);
   $3 = HEAP32[$3 >> 2];
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(HEAP32[$0 + 24 >> 2], $1, $3);
   $6 = $3 << 2;
   HEAP32[$0 + 24 >> 2] = $6 + HEAP32[$0 + 24 >> 2];
   $5 = $5 + $3 | 0;
   $1 = $1 + $6 | 0;
   continue;
  }
  break;
 }
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0;
 $6 = global$0 - 32 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $7 = HEAP32[3523];
 $8 = HEAP32[3522];
 HEAP32[$6 + 24 >> 2] = $8;
 HEAP32[$6 + 28 >> 2] = $7;
 $8 = HEAP32[3521];
 $7 = HEAP32[3520];
 HEAP32[$6 + 16 >> 2] = $7;
 HEAP32[$6 + 20 >> 2] = $8;
 $7 = HEAP32[3519];
 $8 = HEAP32[3518];
 HEAP32[$6 + 8 >> 2] = $8;
 HEAP32[$6 + 12 >> 2] = $7;
 $8 = HEAP32[3517];
 $7 = HEAP32[3516];
 HEAP32[$6 >> 2] = $7;
 HEAP32[$6 + 4 >> 2] = $8;
 $0 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $6 + 32 | 0);
 $1 = $6 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2__operator__char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20char_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___get_allocator_28_29_20const($1);
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__allocator_char__20const__29($0, $3 + 8 | 0);
 $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
 $4 = std____2__char_traits_char___length_28char_20const__29($2);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_2c_20unsigned_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1), $5, $5 + $4 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, $2, $4);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function Neo__SmartContract__Contract__API_CreateSignatureRedeemScript_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 + -64 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = $2 + 40 | 0;
 $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2 + 24 | 0, $1);
 Neo__Cryptography__ECC__ECPoint__API_FromJsonStr_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29($3, $1);
 if (HEAP8[$1 + 11 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$1 >> 2]);
 }
 Neo__SmartContract__Contract__CreateSignatureRedeemScript_28Neo__Cryptography__ECC__ECPoint__29($2 + 8 | 0, $2 + 40 | 0);
 neopt__vhelper__ToHexString_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__29($0, $2 + 8 | 0);
 $1 = HEAP32[$2 + 8 >> 2];
 if ($1) {
  HEAP32[$2 + 12 >> 2] = $1;
  operator_20delete_28void__29($1);
 }
 $1 = HEAP32[$2 + 52 >> 2];
 if ($1) {
  HEAP32[$2 + 56 >> 2] = $1;
  operator_20delete_28void__29($1);
 }
 $1 = HEAP32[$2 + 40 >> 2];
 if ($1) {
  HEAP32[$2 + 44 >> 2] = $1;
  operator_20delete_28void__29($1);
 }
 $0 = $2 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_all_iterators_28_29($0);
 label$2 : {
  if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
   $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0);
   HEAP32[$1 + 12 >> 2] = 0;
   std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($2, $1 + 12 | 0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, 0);
   break label$2;
  }
  $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
  HEAP32[$1 + 8 >> 2] = 0;
  std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($2, $1 + 8 | 0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, 0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____erase_to_end_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 label$2 : {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0);
   HEAP8[$2 + 15 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $3 | 0, $2 + 15 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
   break label$2;
  }
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
  HEAP8[$2 + 14 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $3 | 0, $2 + 14 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_iterators_past_28unsigned_20long_29($0, $1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsputn_28char_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $7 = std____2__char_traits_char___eof_28_29();
 while (1) {
  label$3 : {
   if (($5 | 0) >= ($2 | 0)) {
    break label$3;
   }
   $3 = HEAP32[$0 + 24 >> 2];
   $6 = HEAP32[$0 + 28 >> 2];
   if ($3 >>> 0 >= $6 >>> 0) {
    if (((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_28char_29(HEAP8[$1 | 0]), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($7 | 0)) {
     break label$3;
    }
    $5 = $5 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   HEAP32[$4 + 12 >> 2] = $6 - $3;
   HEAP32[$4 + 8 >> 2] = $2 - $5;
   $3 = long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, $4 + 8 | 0);
   $3 = HEAP32[$3 >> 2];
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 24 >> 2], $1, $3);
   HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + $3;
   $5 = $3 + $5 | 0;
   $1 = $1 + $3 | 0;
   continue;
  }
  break;
 }
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______construct_at_end_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = global$0 - 16 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $1 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul______ConstructTransaction___ConstructTransaction_28std____2__locale__facet____2c_20unsigned_20long_29($3, $0 + 8 | 0, $1);
 $2 = HEAP32[$1 >> 2];
 while (1) {
  if (HEAP32[$1 + 4 >> 2] != ($2 | 0)) {
   void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___construct_std____2__locale__facet___28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29(std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______alloc_28_29($0), std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29(HEAP32[$1 >> 2]));
   $2 = HEAP32[$1 >> 2] + 4 | 0;
   HEAP32[$1 >> 2] = $2;
   continue;
  }
  break;
 }
 std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul______ConstructTransaction____ConstructTransaction_28_29($1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function long_20double_20std____2____num_get_float_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 32 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 label$2 : {
  if (($1 | 0) != ($2 | 0)) {
   $9 = HEAP32[__errno_location() >> 2];
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   long_20double_20std____2____do_strtod_long_20double__28char_20const__2c_20char___29($4, $1, $4 + 28 | 0);
   $6 = HEAP32[$4 + 8 >> 2];
   $1 = HEAP32[$4 + 12 >> 2];
   $7 = $1;
   $1 = HEAP32[$4 >> 2];
   $5 = $1;
   $8 = HEAP32[$4 + 4 >> 2];
   $1 = HEAP32[__errno_location() >> 2];
   label$4 : {
    if ($1) {
     if (HEAP32[$4 + 28 >> 2] != ($2 | 0)) {
      break label$4;
     }
     if (($1 | 0) != 68) {
      break label$2;
     }
     HEAP32[$3 >> 2] = 4;
     break label$2;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $9, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if (HEAP32[$4 + 28 >> 2] == ($2 | 0)) {
     break label$2;
    }
   }
  }
  HEAP32[$3 >> 2] = 4;
  $5 = 0;
  $8 = 0;
  $6 = 0;
  $7 = 0;
 }
 $1 = $0;
 HEAP32[$1 >> 2] = $5;
 HEAP32[$1 + 4 >> 2] = $8;
 HEAP32[$1 + 8 >> 2] = $6;
 HEAP32[$1 + 12 >> 2] = $7;
 $0 = $4 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 label$1 : {
  if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | ($2 - $1 | 0) < 5) {
   break label$1;
  }
  void_20std____2__reverse_unsigned_20int___28unsigned_20int__2c_20unsigned_20int__29($1, $2);
  $4 = $2 + -4 | 0;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0);
  $5 = $2 + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0;
  while (1) {
   label$3 : {
    $0 = HEAP8[$2 | 0];
    if ($1 >>> 0 >= $4 >>> 0) {
     break label$3;
    }
    label$4 : {
     if (($0 | 0) < 1) {
      break label$4;
     }
     if (($0 | 0) >= (std____2__numeric_limits_char___max_28_29() | 0) | HEAP32[$1 >> 2] == HEAP8[$2 | 0]) {
      break label$4;
     }
     HEAP32[$3 >> 2] = 4;
     return;
    }
    $2 = ($5 - $2 | 0) > 1 ? $2 + 1 | 0 : $2;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  }
  if (($0 | 0) < 1) {
   break label$1;
  }
  if (($0 | 0) >= (std____2__numeric_limits_char___max_28_29() | 0) | HEAP32[$4 >> 2] + -1 >>> 0 < HEAP8[$2 | 0] >>> 0) {
   break label$1;
  }
  HEAP32[$3 >> 2] = 4;
 }
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 288 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 287) {
  HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 12;
 }
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 168 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 167) {
  HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 7;
 }
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_all_iterators_28_29($0);
 label$2 : {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0);
   HEAP8[$1 + 15 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($2, $1 + 15 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, 0);
   break label$2;
  }
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
  HEAP8[$1 + 14 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($2, $1 + 14 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, 0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
 label$2 : {
  if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($4)) {
   break label$2;
  }
  $3 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2, $0);
  std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29(std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29($3), $1);
  if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($3)) {
   break label$2;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
 }
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($4);
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 8 >> 2] = $1;
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = HEAP32[$6 + 8 >> 2];
 $1 = $6 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 8 >> 2] = $1;
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = HEAP32[$6 + 8 >> 2];
 $1 = $6 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function neopt__Buffer__BlockCopy_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__2c_20int_2c_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $1 = global$0 - 16 | 0;
 $5 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $0 = HEAP32[$0 >> 2];
 $2 = HEAP32[$2 >> 2];
 if (($0 | 0) == ($2 | 0)) {
  __assert_fail(4837, 4862, 21, 4938);
  abort();
 }
 memcpy($2 + $3 | 0, $0, $4);
 $0 = $1 + 8 | 0;
 $3 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 4948, 39);
 std____2__ios_base__getloc_28_29_20const($0, $3 + HEAP32[HEAP32[$3 >> 2] + -12 >> 2] | 0);
 $4 = std____2__locale__use_facet_28std____2__locale__id__29_20const($1 + 8 | 0, 25448);
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 28 >> 2]]($4, 10) | 0;
 std____2__locale___locale_28_29($1 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($3, $4);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($3);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_8ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $0 = global$0 - 16 | 0;
 $4 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$0 + 8 >> 2] = $1;
 while (1) {
  if ($2 >>> 0 < $3 >>> 0) {
   std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28char_20const__29(std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28_29($0 + 8 | 0), $2);
   $2 = $2 + 1 | 0;
   std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator___28_29($0 + 8 | 0);
   continue;
  }
  break;
 }
 $2 = HEAP32[$0 + 8 >> 2];
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 8 >> 2] = $1;
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 20 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = HEAP32[$6 + 8 >> 2];
 $1 = $6 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function __extendsftf2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $8 = global$0 - 16 | 0;
 $2 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $2 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
 $9 = $2 & -2147483648;
 $5 = $2 & 2147483647;
 label$2 : {
  if ($5 + -8388608 >>> 0 <= 2130706431) {
   $2 = $5 >>> 7 | 0;
   $4 = $5 << 25;
   $3 = $2 + 1065353216 | 0;
   $6 = $4;
   if ($4 >>> 0 < 0) {
    $3 = $3 + 1 | 0;
   }
   $7 = $3;
   break label$2;
  }
  if ($5 >>> 0 >= 2139095040) {
   $4 = $2 >>> 7 | 0;
   $3 = $2 << 25;
   $6 = $3;
   $2 = $4 | 2147418112;
   $7 = $2;
   break label$2;
  }
  if (!$5) {
   $7 = 0;
   break label$2;
  }
  $2 = $5;
  $5 = Math_clz32($5);
  __ashlti3($8, $2, 0, 0, 0, $5 + 81 | 0);
  $4 = $8;
  $3 = HEAP32[$4 >> 2];
  $10 = $3;
  $2 = HEAP32[$4 + 4 >> 2];
  $11 = $2;
  $3 = HEAP32[$4 + 12 >> 2];
  $2 = HEAP32[$4 + 8 >> 2];
  $6 = $2;
  $2 = $3 ^ 65536;
  $7 = $2;
  $3 = 16265 - $5 | 0;
  $4 = $3 << 16;
  $3 = $4;
  $2 = $6;
  $6 = $2;
  $4 = $7;
  $3 = $4 | $3;
  $7 = $3;
 }
 $2 = $0;
 HEAP32[$2 >> 2] = $10;
 $3 = $11;
 HEAP32[$2 + 4 >> 2] = $3;
 $3 = $2;
 HEAP32[$2 + 8 >> 2] = $6;
 $4 = $9;
 $2 = $7;
 $4 = $4 | $2;
 HEAP32[$3 + 12 >> 2] = $4;
 $0 = $8 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____widen_from_utf8_8ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $0 = global$0 - 16 | 0;
 $4 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$0 + 8 >> 2] = $1;
 while (1) {
  if ($2 >>> 0 < $3 >>> 0) {
   std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28char_20const__29(std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28_29($0 + 8 | 0), $2);
   $2 = $2 + 1 | 0;
   std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator___28_29($0 + 8 | 0);
   continue;
  }
  break;
 }
 $2 = HEAP32[$0 + 8 >> 2];
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_delete_28_29_20const($0) {
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0), std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($0) << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0) << 2) | 0);
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
 return std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($6), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($6) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($6) << 2) | 0) | 0;
}
function csbigintegerlib__BigInteger__IsEven_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 32 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 std____2__to_string_28int_29($1 + 16 | 0, 2);
 $3 = csbigintegerlib__BigInteger__BigInteger_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($1, $1 + 16 | 0, 10);
 if (HEAP8[$1 + 27 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$1 + 16 >> 2]);
 }
 csbigintegerlib__BigInteger__operator__28csbigintegerlib__BigInteger_20const__29_20const_2($1 + 16 | 0, $0, $3);
 $0 = HEAP32[$3 >> 2];
 if ($0) {
  HEAP32[$3 + 4 >> 2] = $0;
  operator_20delete_28void__29($0);
 }
 $4 = HEAP32[$1 + 20 >> 2];
 $2 = HEAP32[$1 + 16 >> 2];
 $3 = HEAP32[5484];
 label$4 : {
  if (($4 - $2 | 0) != (HEAP32[5485] - $3 | 0)) {
   break label$4;
  }
  if (($2 | 0) == ($4 | 0)) {
   $5 = 1;
   break label$4;
  }
  $0 = $2;
  while (1) {
   if (HEAPU8[$0 | 0] != HEAPU8[$3 | 0]) {
    $5 = 0;
    break label$4;
   }
   $5 = 1;
   $3 = $3 + 1 | 0;
   $0 = $0 + 1 | 0;
   if (($4 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
 if ($2) {
  HEAP32[$1 + 20 >> 2] = $2;
  operator_20delete_28void__29($2);
 }
 $0 = $1 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5;
}
function bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 while (1) {
  label$3 : {
   $0 = !bool_20std____2__operator___wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($3 + 24 | 0, $3 + 16 | 0);
   $2 = 1;
   label$4 : {
    if ($0) {
     break label$4;
    }
    if (std____2____equal_to_wchar_t_2c_20wchar_t___operator_28_29_28wchar_t_20const__2c_20wchar_t_20const__29_20const($3, std____2____wrap_iter_wchar_t____operator__28_29_20const($3 + 24 | 0), std____2____wrap_iter_wchar_t____operator__28_29_20const($3 + 8 | 0))) {
     break label$3;
    }
    $2 = 0;
   }
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return $2;
  }
  std____2____wrap_iter_wchar_t____operator___28_29($3 + 24 | 0);
  std____2____wrap_iter_wchar_t____operator___28_29($3 + 8 | 0);
  continue;
 }
}
function unique_ref__ucref_Neo__Cryptography__ECC__ECPoint___ucref_28unique_ref__ucref_Neo__Cryptography__ECC__ECPoint__20const___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAP32[$1 >> 2];
 $1 = operator_20new_28unsigned_20long_29(24);
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  label$2 : {
   $5 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2] - $5 | 0;
   if ($3) {
    if (($3 | 0) <= -1) {
     break label$2;
    }
    $4 = operator_20new_28unsigned_20long_29($3);
    HEAP32[$1 >> 2] = $4;
    HEAP32[$1 + 4 >> 2] = $4;
    $6 = $3 + $4 | 0;
    HEAP32[$1 + 8 >> 2] = $6;
    memcpy($4, $5, $3);
    HEAP32[$1 + 4 >> 2] = $6;
   }
   HEAP32[$1 + 20 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$1 + 16 >> 2] = 0;
   $4 = HEAP32[$2 + 12 >> 2];
   $2 = HEAP32[$2 + 16 >> 2] - $4 | 0;
   if ($2) {
    if (($2 | 0) <= -1) {
     break label$1;
    }
    $3 = operator_20new_28unsigned_20long_29($2);
    HEAP32[$1 + 12 >> 2] = $3;
    HEAP32[$1 + 16 >> 2] = $3;
    $5 = $2 + $3 | 0;
    HEAP32[$1 + 20 >> 2] = $5;
    memcpy($3, $4, $2);
    HEAP32[$1 + 16 >> 2] = $5;
   }
   HEAP32[$0 >> 2] = $1;
   return $0;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($1);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($1 + 12 | 0);
 abort();
}
function unique_ref__ucref_Neo__Cryptography__ECC__ECPoint___ucref_28unique_ref__ucref_Neo__Cryptography__ECC__ECPoint__20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAP32[$1 >> 2];
 $1 = operator_20new_28unsigned_20long_29(24);
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  label$2 : {
   $5 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2] - $5 | 0;
   if ($3) {
    if (($3 | 0) <= -1) {
     break label$2;
    }
    $4 = operator_20new_28unsigned_20long_29($3);
    HEAP32[$1 >> 2] = $4;
    HEAP32[$1 + 4 >> 2] = $4;
    $6 = $3 + $4 | 0;
    HEAP32[$1 + 8 >> 2] = $6;
    memcpy($4, $5, $3);
    HEAP32[$1 + 4 >> 2] = $6;
   }
   HEAP32[$1 + 20 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAP32[$1 + 16 >> 2] = 0;
   $4 = HEAP32[$2 + 12 >> 2];
   $2 = HEAP32[$2 + 16 >> 2] - $4 | 0;
   if ($2) {
    if (($2 | 0) <= -1) {
     break label$1;
    }
    $3 = operator_20new_28unsigned_20long_29($2);
    HEAP32[$1 + 12 >> 2] = $3;
    HEAP32[$1 + 16 >> 2] = $3;
    $5 = $2 + $3 | 0;
    HEAP32[$1 + 20 >> 2] = $5;
    memcpy($3, $4, $2);
    HEAP32[$1 + 16 >> 2] = $5;
   }
   HEAP32[$0 >> 2] = $1;
   return $0;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($1);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($1 + 12 | 0);
 abort();
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 288 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 287) {
  HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 12;
 }
}
function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29($0) {
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 if (std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0)) {
  $1 = std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__sentry_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($2 + 8 | 0, $0);
  label$3 : {
   if (!std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__operator_20bool_28_29_20const($1)) {
    break label$3;
   }
   if ((std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___pubsync_28_29(std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0)) | 0) != -1) {
    break label$3;
   }
   std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
  }
  std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry___sentry_28_29($1);
 }
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___str_28_29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  label$2 : {
   $3 = HEAP32[$1 + 48 >> 2];
   if ($3 & 16) {
    $3 = HEAP32[$1 + 44 >> 2];
    $2 = HEAP32[$1 + 24 >> 2];
    if ($3 >>> 0 < $2 >>> 0) {
     HEAP32[$1 + 44 >> 2] = $2;
     $3 = $2;
    }
    $1 = HEAP32[$1 + 20 >> 2];
    $2 = $3 - $1 | 0;
    if ($2 >>> 0 >= 4294967280) {
     break label$2;
    }
    break label$1;
   }
   if ($3 & 8) {
    $3 = HEAP32[$1 + 16 >> 2];
    $1 = HEAP32[$1 + 8 >> 2];
    $2 = $3 - $1 | 0;
    if ($2 >>> 0 >= 4294967280) {
     break label$2;
    }
    break label$1;
   }
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   return;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
  abort();
 }
 label$6 : {
  if ($2 >>> 0 <= 10) {
   HEAP8[$0 + 11 | 0] = $2;
   break label$6;
  }
  $4 = $2 + 16 & -16;
  $5 = operator_20new_28unsigned_20long_29($4);
  HEAP32[$0 + 8 >> 2] = $4 | -2147483648;
  HEAP32[$0 >> 2] = $5;
  HEAP32[$0 + 4 >> 2] = $2;
  $0 = $5;
 }
 if (($1 | 0) != ($3 | 0)) {
  while (1) {
   HEAP8[$0 | 0] = HEAPU8[$1 | 0];
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP8[$0 | 0] = 0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 8 >> 2] = $1;
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = HEAP32[$6 + 8 >> 2];
 $1 = $6 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 8 >> 2] = $1;
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = HEAP32[$6 + 8 >> 2];
 $1 = $6 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
 $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 168 | 0, $5, $4, 0) - $0 | 0;
 if (($0 | 0) <= 167) {
  HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 7;
 }
}
function Neo__Cryptography__ECC__ECCurve___ECCurve_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 + 36 >> 2];
 HEAP32[$0 + 36 >> 2] = 0;
 if ($1) {
  $2 = HEAP32[$1 + 12 >> 2];
  if ($2) {
   HEAP32[$1 + 16 >> 2] = $2;
   operator_20delete_28void__29($2);
  }
  $2 = HEAP32[$1 >> 2];
  if ($2) {
   HEAP32[$1 + 4 >> 2] = $2;
   operator_20delete_28void__29($2);
  }
  operator_20delete_28void__29($1);
 }
 $1 = HEAP32[$0 + 32 >> 2];
 HEAP32[$0 + 32 >> 2] = 0;
 if ($1) {
  $2 = HEAP32[$1 + 12 >> 2];
  if ($2) {
   HEAP32[$1 + 16 >> 2] = $2;
   operator_20delete_28void__29($2);
  }
  $2 = HEAP32[$1 >> 2];
  if ($2) {
   HEAP32[$1 + 4 >> 2] = $2;
   operator_20delete_28void__29($2);
  }
  operator_20delete_28void__29($1);
 }
 $1 = HEAP32[$0 + 20 >> 2];
 if ($1) {
  HEAP32[$0 + 24 >> 2] = $1;
  operator_20delete_28void__29($1);
 }
 $1 = HEAP32[$0 + 16 >> 2];
 HEAP32[$0 + 16 >> 2] = 0;
 if ($1) {
  $2 = HEAP32[$1 >> 2];
  if ($2) {
   HEAP32[$1 + 4 >> 2] = $2;
   operator_20delete_28void__29($2);
  }
  operator_20delete_28void__29($1);
 }
 $1 = HEAP32[$0 + 12 >> 2];
 HEAP32[$0 + 12 >> 2] = 0;
 if ($1) {
  $2 = HEAP32[$1 >> 2];
  if ($2) {
   HEAP32[$1 + 4 >> 2] = $2;
   operator_20delete_28void__29($2);
  }
  operator_20delete_28void__29($1);
 }
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  HEAP32[$0 + 4 >> 2] = $1;
  operator_20delete_28void__29($1);
 }
 return $0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 8 >> 2] = $1;
 std____2__ios_base__getloc_28_29_20const($6, $3);
 $3 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
 std____2__locale___locale_28_29($6);
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 20 | 0, $6 + 8 | 0, $2, $4, $3);
 $0 = HEAP32[$6 + 8 >> 2];
 $1 = $6 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function unique_ref__ucref_Neo__Cryptography__ECC__ECPoint___ucref_28Neo__Cryptography__ECC__ECPoint_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = operator_20new_28unsigned_20long_29(24);
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 label$1 : {
  label$2 : {
   $5 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 4 >> 2] - $5 | 0;
   if ($3) {
    if (($3 | 0) <= -1) {
     break label$2;
    }
    $4 = operator_20new_28unsigned_20long_29($3);
    HEAP32[$2 >> 2] = $4;
    HEAP32[$2 + 4 >> 2] = $4;
    $6 = $3 + $4 | 0;
    HEAP32[$2 + 8 >> 2] = $6;
    memcpy($4, $5, $3);
    HEAP32[$2 + 4 >> 2] = $6;
   }
   HEAP32[$2 + 20 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   HEAP32[$2 + 16 >> 2] = 0;
   $4 = HEAP32[$1 + 12 >> 2];
   $1 = HEAP32[$1 + 16 >> 2] - $4 | 0;
   if ($1) {
    if (($1 | 0) <= -1) {
     break label$1;
    }
    $3 = operator_20new_28unsigned_20long_29($1);
    HEAP32[$2 + 12 >> 2] = $3;
    HEAP32[$2 + 16 >> 2] = $3;
    $5 = $1 + $3 | 0;
    HEAP32[$2 + 20 >> 2] = $5;
    memcpy($3, $4, $1);
    HEAP32[$2 + 16 >> 2] = $5;
   }
   HEAP32[$0 >> 2] = $2;
   return $0;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($2);
  abort();
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($2 + 12 | 0);
 abort();
}
function __dynamic_cast($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 + -64 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = HEAP32[$0 >> 2];
 $6 = HEAP32[$5 + -4 >> 2];
 $5 = HEAP32[$5 + -8 >> 2];
 HEAP32[$4 + 20 >> 2] = $3;
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $2;
 $1 = 0;
 memset($4 + 24 | 0, 0, 39);
 $0 = $0 + $5 | 0;
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($6, $2, 0)) {
   HEAP32[$4 + 56 >> 2] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 20 >> 2]]($6, $4 + 8 | 0, $0, $0, 1, 0);
   $1 = HEAP32[$4 + 32 >> 2] == 1 ? $0 : 0;
   break label$2;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($6, $4 + 8 | 0, $0, 1, 0);
  $0 = HEAP32[$4 + 44 >> 2];
  if ($0 >>> 0 > 1) {
   break label$2;
  }
  if ($0 - 1) {
   $1 = HEAP32[$4 + 48 >> 2] == 1 ? HEAP32[$4 + 36 >> 2] == 1 ? HEAP32[$4 + 40 >> 2] == 1 ? HEAP32[$4 + 28 >> 2] : 0 : 0 : 0;
   break label$2;
  }
  if (HEAP32[$4 + 32 >> 2] != 1) {
   if (HEAP32[$4 + 48 >> 2] | HEAP32[$4 + 36 >> 2] != 1 | HEAP32[$4 + 40 >> 2] != 1) {
    break label$2;
   }
  }
  $1 = HEAP32[$4 + 24 >> 2];
 }
 $0 = $4 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 while (1) {
  label$3 : {
   $0 = !bool_20std____2__operator___char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($3 + 24 | 0, $3 + 16 | 0);
   $2 = 1;
   label$4 : {
    if ($0) {
     break label$4;
    }
    if (std____2____equal_to_char_2c_20char___operator_28_29_28char_20const__2c_20char_20const__29_20const($3, std____2____wrap_iter_char____operator__28_29_20const($3 + 24 | 0), std____2____wrap_iter_char____operator__28_29_20const($3 + 8 | 0))) {
     break label$3;
    }
    $2 = 0;
   }
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return $2;
  }
  std____2____wrap_iter_char____operator___28_29($3 + 24 | 0);
  std____2____wrap_iter_char____operator___28_29($3 + 8 | 0);
  continue;
 }
}
function __lshrti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 label$1 : {
  if ($5 & 64) {
   $7 = $4;
   $8 = $3;
   $9 = $5 + -64 | 0;
   $6 = $9 & 31;
   if (32 <= ($9 & 63) >>> 0) {
    $1 = $7 >>> $6 | 0;
   } else {
    $10 = $7 >>> $6 | 0;
    $1 = ((1 << $6) - 1 & $7) << 32 - $6 | $8 >>> $6;
   }
   $2 = $10;
   $3 = 0;
   $4 = 0;
   break label$1;
  }
  if (!$5) {
   break label$1;
  }
  $10 = $4;
  $7 = $3;
  $9 = 64 - $5 | 0;
  $6 = $9 & 31;
  if (32 <= ($9 & 63) >>> 0) {
   $8 = $7 << $6;
   $11 = 0;
  } else {
   $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $10 << $6;
   $11 = $7 << $6;
  }
  $12 = $8;
  $8 = $2;
  $10 = $1;
  $7 = 0;
  $13 = $5;
  $9 = $5;
  $6 = $9 & 31;
  if (32 <= ($9 & 63) >>> 0) {
   $9 = $8 >>> $6 | 0;
  } else {
   $7 = $8 >>> $6 | 0;
   $9 = ((1 << $6) - 1 & $8) << 32 - $6 | $10 >>> $6;
  }
  $10 = $7;
  $8 = $11;
  $1 = $8 | $9;
  $7 = $12;
  $10 = $7 | $10;
  $2 = $10;
  $10 = $4;
  $7 = $3;
  $8 = 0;
  $9 = $13;
  $6 = $9 & 31;
  if (32 <= ($9 & 63) >>> 0) {
   $3 = $10 >>> $6 | 0;
  } else {
   $8 = $10 >>> $6 | 0;
   $3 = ((1 << $6) - 1 & $10) << 32 - $6 | $7 >>> $6;
  }
  $4 = $8;
 }
 $7 = $0;
 HEAP32[$7 >> 2] = $1;
 $8 = $2;
 HEAP32[$7 + 4 >> 2] = $8;
 HEAP32[$7 + 8 >> 2] = $3;
 $8 = $4;
 HEAP32[$7 + 12 >> 2] = $8;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0) {
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 if (std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0)) {
  $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
  label$3 : {
   if (!std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($1)) {
    break label$3;
   }
   if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pubsync_28_29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0)) | 0) != -1) {
    break label$3;
   }
   std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($1);
 }
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function __newlocale($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 32 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 label$2 : {
  label$3 : {
   if (__loc_is_allocated($2)) {
    while (1) {
     if ($0 >>> $3 & 1) {
      wasm2js_i32$0 = ($3 << 2) + $2 | 0, wasm2js_i32$1 = __get_locale($3, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) != 6) {
      continue;
     }
     break;
    }
    break label$3;
   }
   while (1) {
    $8 = ($4 + 8 | 0) + ($3 << 2) | 0;
    $6 = 1 << $3 & $0;
    $5 = HEAP32[($3 << 2) + $2 >> 2];
    label$8 : {
     if (!($6 | !$2)) {
      break label$8;
     }
     $5 = __get_locale($3, $6 ? $1 : 9272);
    }
    $6 = $5;
    HEAP32[$8 >> 2] = $6;
    $7 = (($6 | 0) != 0) + $7 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != 6) {
     continue;
    }
    break;
   }
   if ($7 >>> 0 > 1) {
    break label$3;
   }
   $0 = 9104;
   if ($7 - 1) {
    break label$2;
   }
   if (HEAP32[$4 + 8 >> 2] != 9076) {
    break label$3;
   }
   $0 = 9128;
   break label$2;
  }
  $0 = $2;
 }
 $3 = $0;
 $0 = $4 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
 return std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($6), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($6) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) | 0) | 0;
}
function std____2__enable_if__28is_move_constructible_std____2__locale__facet_____value_29_20___20_28is_move_assignable_std____2__locale__facet_____value_29_2c_20void___type_20std____2__swap_std____2__locale__facet____28std____2__locale__facet____2c_20std____2__locale__facet____29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[std____2__remove_reference_std____2__locale__facet______type___20std____2__move_std____2__locale__facet_____28std____2__locale__facet____29($0) >> 2], HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[std____2__remove_reference_std____2__locale__facet______type___20std____2__move_std____2__locale__facet_____28std____2__locale__facet____29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = HEAP32[std____2__remove_reference_std____2__locale__facet______type___20std____2__move_std____2__locale__facet_____28std____2__locale__facet____29($2 + 12 | 0) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __ashlti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 label$1 : {
  if ($5 & 64) {
   $7 = $2;
   $8 = $1;
   $9 = $5 + -64 | 0;
   $6 = $9 & 31;
   if (32 <= ($9 & 63) >>> 0) {
    $10 = $8 << $6;
    $3 = 0;
   } else {
    $10 = (1 << $6) - 1 & $8 >>> 32 - $6 | $7 << $6;
    $3 = $8 << $6;
   }
   $4 = $10;
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  if (!$5) {
   break label$1;
  }
  $10 = $4;
  $7 = $3;
  $11 = $5;
  $9 = $5;
  $6 = $9 & 31;
  if (32 <= ($9 & 63) >>> 0) {
   $8 = $7 << $6;
   $3 = 0;
  } else {
   $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $10 << $6;
   $3 = $7 << $6;
  }
  $4 = $8;
  $8 = $2;
  $10 = $1;
  $7 = 0;
  $9 = 64 - $5 | 0;
  $6 = $9 & 31;
  if (32 <= ($9 & 63) >>> 0) {
   $9 = $8 >>> $6 | 0;
  } else {
   $7 = $8 >>> $6 | 0;
   $9 = ((1 << $6) - 1 & $8) << 32 - $6 | $10 >>> $6;
  }
  $10 = $7;
  $8 = $3;
  $3 = $8 | $9;
  $7 = $4;
  $10 = $7 | $10;
  $4 = $10;
  $10 = $2;
  $7 = $1;
  $9 = $11;
  $6 = $9 & 31;
  if (32 <= ($9 & 63) >>> 0) {
   $8 = $7 << $6;
   $1 = 0;
  } else {
   $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $10 << $6;
   $1 = $7 << $6;
  }
  $2 = $8;
 }
 $7 = $0;
 HEAP32[$7 >> 2] = $1;
 $8 = $2;
 HEAP32[$7 + 4 >> 2] = $8;
 HEAP32[$7 + 8 >> 2] = $3;
 $8 = $4;
 HEAP32[$7 + 12 >> 2] = $8;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_new_28unsigned_20long_29_20const($0, $1) {
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0), std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0) + ($1 << 2) | 0);
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_shrink_28unsigned_20long_29_20const($0, $1) {
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0), std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0) << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0) + ($1 << 2) | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0) + (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($0) << 2) | 0);
}
function neopt__IBinaryWriter__Write_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $1 = HEAP32[$1 >> 2];
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 label$2 : {
  if ($3) {
   if (($3 | 0) <= -1) {
    break label$2;
   }
   $2 = $1 + $2 | 0;
   $5 = $3 + $2 | 0;
   $1 = operator_20new_28unsigned_20long_29($3);
   HEAP32[$4 >> 2] = $1;
   HEAP32[$4 + 4 >> 2] = $1;
   HEAP32[$4 + 8 >> 2] = $1 + $3;
   while (1) {
    HEAP8[$1 | 0] = HEAPU8[$2 | 0];
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
   HEAP32[$4 + 4 >> 2] = $1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, $4);
  $1 = HEAP32[$4 >> 2];
  if ($1) {
   HEAP32[$4 + 4 >> 2] = $1;
   operator_20delete_28void__29($1);
  }
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($4);
 abort();
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vallocate_28unsigned_20long_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___max_size_28_29_20const($0) >>> 0 < $1 >>> 0) {
  std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
  abort();
 }
 $2 = std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20unsigned_20long_29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0), $1);
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $2;
 wasm2js_i32$0 = std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____end_cap_28_29($0), wasm2js_i32$1 = ($1 << 2) + $2 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_new_28unsigned_20long_29_20const($0, 0);
}
function std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 std____2__ios_base__getloc_28_29_20const($5 + 8 | 0, $1);
 std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const(std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($5 + 8 | 0), 13840, 13872, $2);
 $2 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($5 + 8 | 0);
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__numpunct_wchar_t___decimal_point_28_29_20const($2), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__numpunct_wchar_t___thousands_sep_28_29_20const($2), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 std____2__numpunct_wchar_t___grouping_28_29_20const($0, $2);
 std____2__locale___locale_28_29($5 + 8 | 0);
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___get_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$0 + 4 >> 2] = 0;
 $3 = std____2__char_traits_char___eof_28_29();
 if (std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const(std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___2c_20bool_29($1 + 8 | 0, $0, 1))) {
  $2 = 6;
  $3 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0));
  if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29($3, std____2__char_traits_char___eof_28_29())) {
   HEAP32[$0 + 4 >> 2] = 1;
   $2 = 0;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $2);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function __stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 16 >> 2] = $1;
 $4 = HEAP32[$0 + 48 >> 2];
 HEAP32[$3 + 20 >> 2] = $2 - (($4 | 0) != 0);
 $5 = HEAP32[$0 + 44 >> 2];
 HEAP32[$3 + 28 >> 2] = $4;
 HEAP32[$3 + 24 >> 2] = $5;
 label$2 : {
  label$3 : {
   label$4 : {
    if (__wasi_syscall_ret(__wasi_fd_read(HEAP32[$0 + 60 >> 2], $3 + 16 | 0, 2, $3 + 12 | 0) | 0)) {
     HEAP32[$3 + 12 >> 2] = -1;
     $2 = -1;
     break label$4;
    }
    $4 = HEAP32[$3 + 12 >> 2];
    if (($4 | 0) > 0) {
     break label$3;
    }
    $2 = $4;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $2 & 48 ^ 16;
   break label$2;
  }
  $6 = HEAP32[$3 + 20 >> 2];
  if ($4 >>> 0 <= $6 >>> 0) {
   $2 = $4;
   break label$2;
  }
  $5 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 4 >> 2] = $5;
  HEAP32[$0 + 8 >> 2] = ($4 - $6 | 0) + $5;
  if (!HEAP32[$0 + 48 >> 2]) {
   break label$2;
  }
  HEAP32[$0 + 4 >> 2] = $5 + 1;
  HEAP8[($1 + $2 | 0) + -1 | 0] = HEAPU8[$5 | 0];
 }
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry___sentry_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 4 >> 2];
 label$1 : {
  if (!std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const($1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0)) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if (!std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___good_28_29_20const($1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0)) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if (!(std____2__ios_base__flags_28_29_20const($1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0) & 8192)) {
   break label$1;
  }
  if (std__uncaught_exception_28_29()) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if ((std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___pubsync_28_29(std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const($1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0)) | 0) != -1) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___setstate_28unsigned_20int_29($1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0, 1);
 }
 return $0;
}
function std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 std____2__ios_base__getloc_28_29_20const($5 + 8 | 0, $1);
 std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const(std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($5 + 8 | 0), 13840, 13872, $2);
 $2 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($5 + 8 | 0);
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__numpunct_char___decimal_point_28_29_20const($2), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
 wasm2js_i32$0 = $4, wasm2js_i32$1 = std____2__numpunct_char___thousands_sep_28_29_20const($2), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
 std____2__numpunct_char___grouping_28_29_20const($0, $2);
 std____2__locale___locale_28_29($5 + 8 | 0);
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___peek_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$0 + 4 >> 2] = 0;
 $3 = std____2__char_traits_char___eof_28_29();
 if (std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const(std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___2c_20bool_29($1 + 8 | 0, $0, 1))) {
  $3 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetc_28_29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0));
  $2 = std____2__char_traits_char___eq_int_type_28int_2c_20int_29($3, std____2__char_traits_char___eof_28_29());
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $2 ? 2 : 0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function strtox_1($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $4 = global$0 - 160 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 memset($4 + 16 | 0, 0, 144);
 HEAP32[$4 + 92 >> 2] = -1;
 HEAP32[$4 + 60 >> 2] = $1;
 HEAP32[$4 + 24 >> 2] = -1;
 HEAP32[$4 + 20 >> 2] = $1;
 __shlim($4 + 16 | 0, 0, 0);
 __floatscan($4, $4 + 16 | 0, $3, 1);
 $3 = HEAP32[$4 + 8 >> 2];
 $7 = $3;
 $5 = HEAP32[$4 + 12 >> 2];
 $8 = $5;
 $5 = HEAP32[$4 >> 2];
 $9 = $5;
 $3 = HEAP32[$4 + 4 >> 2];
 $10 = $3;
 if ($2) {
  $3 = HEAP32[$4 + 136 >> 2];
  $11 = $3;
  $5 = HEAP32[$4 + 140 >> 2];
  $12 = $5;
  $3 = HEAP32[$4 + 20 >> 2] - HEAP32[$4 + 24 >> 2] | 0;
  $5 = $3 >> 31;
  $6 = $3;
  $13 = $2;
  $3 = $5;
  $5 = $12;
  $3 = $3 + $5 | 0;
  $2 = $11;
  $2 = $6 + $2 | 0;
  if ($2 >>> 0 < $6 >>> 0) {
   $3 = $3 + 1 | 0;
  }
  HEAP32[$13 >> 2] = $3 | $2 ? $2 + $1 | 0 : $1;
 }
 $2 = $0;
 HEAP32[$2 >> 2] = $9;
 $3 = $10;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $7;
 $3 = $8;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $4 + 160 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___read_28char__2c_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$0 + 4 >> 2] = 0;
 $5 = !std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const(std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___2c_20bool_29($4 + 8 | 0, $0, 1));
 $3 = 4;
 label$2 : {
  if ($5) {
   break label$2;
  }
  $1 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetn_28char__2c_20long_29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0), $1, $2);
  HEAP32[$0 + 4 >> 2] = $1;
  $3 = ($1 | 0) == ($2 | 0) ? 0 : 6;
 }
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $3);
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $2 = global$0 - 416 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $2 + 416;
 std____2____time_put____do_put_28wchar_t__2c_20wchar_t___2c_20tm_20const__2c_20char_2c_20char_29_20const($0 + 8 | 0, $2 + 16 | 0, $2 + 12 | 0, $4, $5, $6);
 $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($2 + 16 | 0, HEAP32[$2 + 12 >> 2], $1);
 $0 = $2 + 416 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 8 >> 2] = 624576549;
 HEAP32[$6 + 12 >> 2] = 1394948685;
 $0 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $6 + 8 | 0, $6 + 16 | 0);
 $1 = $6 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function memchr($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = ($2 | 0) != 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if (!$2 | !($0 & 3)) {
      break label$4;
     }
     $4 = $1 & 255;
     while (1) {
      if (HEAPU8[$0 | 0] == ($4 | 0)) {
       break label$3;
      }
      $0 = $0 + 1 | 0;
      $2 = $2 + -1 | 0;
      $3 = ($2 | 0) != 0;
      if (!$2) {
       break label$4;
      }
      if ($0 & 3) {
       continue;
      }
      break;
     }
    }
    if (!$3) {
     break label$2;
    }
   }
   if (HEAPU8[$0 | 0] == ($1 & 255)) {
    break label$1;
   }
   label$6 : {
    if ($2 >>> 0 >= 4) {
     $4 = Math_imul($1 & 255, 16843009);
     while (1) {
      $3 = HEAP32[$0 >> 2] ^ $4;
      if (($3 ^ -1) & $3 + -16843009 & -2139062144) {
       break label$6;
      }
      $0 = $0 + 4 | 0;
      $2 = $2 + -4 | 0;
      if ($2 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    if (!$2) {
     break label$2;
    }
   }
   $3 = $1 & 255;
   while (1) {
    if (HEAPU8[$0 | 0] == ($3 | 0)) {
     break label$1;
    }
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  return 0;
 }
 return $0;
}
function float_20std____2____num_get_float_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  if (($0 | 0) != ($1 | 0)) {
   $4 = HEAP32[__errno_location() >> 2];
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $5 = float_20std____2____do_strtod_float__28char_20const__2c_20char___29($0, $3 + 12 | 0);
   $0 = HEAP32[__errno_location() >> 2];
   label$4 : {
    if ($0) {
     if (HEAP32[$3 + 12 >> 2] != ($1 | 0)) {
      break label$4;
     }
     if (($0 | 0) != 68) {
      break label$2;
     }
     HEAP32[$2 >> 2] = 4;
     break label$2;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $4, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if (HEAP32[$3 + 12 >> 2] == ($1 | 0)) {
     break label$2;
    }
   }
  }
  HEAP32[$2 >> 2] = 4;
  $5 = Math_fround(0);
 }
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 4 >> 2];
 label$1 : {
  if (!std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0)) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if (!std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const($1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0)) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if (!(std____2__ios_base__flags_28_29_20const($1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0) & 8192)) {
   break label$1;
  }
  if (std__uncaught_exception_28_29()) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pubsync_28_29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0)) | 0) != -1) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29($1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0, 1);
 }
 return $0;
}
function double_20std____2____num_get_float_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  if (($0 | 0) != ($1 | 0)) {
   $4 = HEAP32[__errno_location() >> 2];
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $5 = double_20std____2____do_strtod_double__28char_20const__2c_20char___29($0, $3 + 12 | 0);
   $0 = HEAP32[__errno_location() >> 2];
   label$4 : {
    if ($0) {
     if (HEAP32[$3 + 12 >> 2] != ($1 | 0)) {
      break label$4;
     }
     if (($0 | 0) != 68) {
      break label$2;
     }
     HEAP32[$2 >> 2] = 4;
     break label$2;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $4, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if (HEAP32[$3 + 12 >> 2] == ($1 | 0)) {
     break label$2;
    }
   }
  }
  HEAP32[$2 >> 2] = 4;
  $5 = 0;
 }
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5;
}
function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______compressed_pair_std__nullptr_t_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul____28std__nullptr_t___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___29($0, $1, $2) {
 std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($1));
 std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_201_2c_20false_____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___29($0 + 4 | 0, std____2____sso_allocator_std____2__locale__facet__2c_2028ul___20std____2__forward_std____2____sso_allocator_std____2__locale__facet__2c_2028ul____28std____2__remove_reference_std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____type__29($2));
 return $0;
}
function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_wchar_t__20const___28std____2____default_init_tag___2c_20std____2__allocator_wchar_t__20const__29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_wchar_t__20const__2c_20void__28std____2__allocator_wchar_t__20const__29($0, std____2__allocator_wchar_t__20const__20std____2__forward_std____2__allocator_wchar_t__20const___28std____2__remove_reference_std____2__allocator_wchar_t__20const____type__29($2));
 return $0;
}
function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $2 = global$0 - 128 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $2 + 116;
 std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0 + 8 | 0, $2 + 16 | 0, $2 + 12 | 0, $4, $5, $6);
 $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($2 + 16 | 0, HEAP32[$2 + 12 >> 2], $1);
 $0 = $2 + 128 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___max_size_28_29_20const($0) {
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___max_size_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20const__29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29_20const($0)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__numeric_limits_long___max_28_29(), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $0 = HEAP32[unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($1 + 12 | 0, $1 + 8 | 0) >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2__enable_if__28is_move_constructible_unsigned_20int___value_29_20___20_28is_move_assignable_unsigned_20int___value_29_2c_20void___type_20std____2__swap_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[std____2__remove_reference_unsigned_20int____type___20std____2__move_unsigned_20int___28unsigned_20int__29($0) >> 2], HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[std____2__remove_reference_unsigned_20int____type___20std____2__move_unsigned_20int___28unsigned_20int__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = HEAP32[std____2__remove_reference_unsigned_20int____type___20std____2__move_unsigned_20int___28unsigned_20int__29($2 + 12 | 0) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__iterator_traits_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const____difference_type_20std____2__distance_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const___28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29($0, $1) {
 return std____2__iterator_traits_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const____difference_type_20std____2____distance_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const___28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function std____2__stod_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($2, 20341);
 $4 = double_20std____2___28anonymous_20namespace_29__as_float_double_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long__29($3, $0, $1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4;
}
function std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29($0);
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 >> 2] = 8644;
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___getloc_28_29_20const($3 + 8 | 0, $4);
 $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($3 + 8 | 0);
 std____2__locale___locale_28_29($3 + 8 | 0);
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 36 >> 2] = $1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function neopt__JObject__AsString_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $3 = operator_20new_28unsigned_20long_29(16);
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = 15;
 HEAP32[$0 + 8 >> 2] = -2147483632;
 $0 = HEAPU8[4218] | HEAPU8[4219] << 8 | (HEAPU8[4220] << 16 | HEAPU8[4221] << 24);
 $1 = HEAPU8[4214] | HEAPU8[4215] << 8 | (HEAPU8[4216] << 16 | HEAPU8[4217] << 24);
 $2 = $1;
 $1 = $3;
 HEAP8[$1 + 7 | 0] = $2;
 HEAP8[$1 + 8 | 0] = $2 >>> 8;
 HEAP8[$1 + 9 | 0] = $2 >>> 16;
 HEAP8[$1 + 10 | 0] = $2 >>> 24;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP8[$1 + 12 | 0] = $0 >>> 8;
 HEAP8[$1 + 13 | 0] = $0 >>> 16;
 HEAP8[$1 + 14 | 0] = $0 >>> 24;
 $1 = HEAPU8[4211] | HEAPU8[4212] << 8 | (HEAPU8[4213] << 16 | HEAPU8[4214] << 24);
 $0 = HEAPU8[4207] | HEAPU8[4208] << 8 | (HEAPU8[4209] << 16 | HEAPU8[4210] << 24);
 $2 = $0;
 $0 = $3;
 HEAP8[$0 | 0] = $2;
 HEAP8[$0 + 1 | 0] = $2 >>> 8;
 HEAP8[$0 + 2 | 0] = $2 >>> 16;
 HEAP8[$0 + 3 | 0] = $2 >>> 24;
 HEAP8[$0 + 4 | 0] = $1;
 HEAP8[$0 + 5 | 0] = $1 >>> 8;
 HEAP8[$0 + 6 | 0] = $1 >>> 16;
 HEAP8[$0 + 7 | 0] = $1 >>> 24;
 HEAP8[$0 + 15 | 0] = 0;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____recommend_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $1;
 $3 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___max_size_28_29_20const($0);
 if ($3 >>> 0 >= $1 >>> 0) {
  $0 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0);
  if ($0 >>> 0 < $3 >>> 1 >>> 0) {
   HEAP32[$2 + 8 >> 2] = $0 << 1;
   $3 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 12 | 0) >> 2];
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return $3;
 }
 std____2____vector_base_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_wchar_t__2c_20void__28wchar_t__2c_20wchar_t__2c_20std____2__allocator_wchar_t__20const__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_wchar_t__20const___28std____2____default_init_tag___2c_20std____2__allocator_wchar_t__20const__29($0, $4 + 8 | 0, $3);
 std____2__enable_if___is_cpp17_forward_iterator_wchar_t____value_2c_20void___type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2);
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0);
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 >> 2] = 8540;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($3 + 8 | 0, $4);
 $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($3 + 8 | 0);
 std____2__locale___locale_28_29($3 + 8 | 0);
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 36 >> 2] = $1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20const___28std____2____default_init_tag___2c_20std____2__allocator_char__20const__29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_char__20const__2c_20void__28std____2__allocator_char__20const__29($0, std____2__allocator_char__20const__20std____2__forward_std____2__allocator_char__20const___28std____2__remove_reference_std____2__allocator_char__20const____type__29($2));
 return $0;
}
function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
  return;
 }
 $4 = HEAP32[$0 + 12 >> 2];
 $5 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($5, $1, $2, $3);
 label$2 : {
  if (($4 | 0) < 2) {
   break label$2;
  }
  $4 = ($4 << 3) + $5 | 0;
  $0 = $0 + 24 | 0;
  while (1) {
   __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
   if (HEAPU8[$1 + 54 | 0]) {
    break label$2;
   }
   $0 = $0 + 8 | 0;
   if ($0 >>> 0 < $4 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_wchar_t_20const__2c_20void__28wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
 std____2__enable_if___is_cpp17_forward_iterator_wchar_t_20const____value_2c_20void___type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__locale____imp_____imp_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 14128;
 $1 = $0 + 16 | 0;
 while (1) {
  if ($2 >>> 0 < std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($1) >>> 0) {
   if (HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___operator_5b_5d_28unsigned_20long_29($1, $2) >> 2]) {
    std____2____shared_count____release_shared_28_29(HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___operator_5b_5d_28unsigned_20long_29($1, $2) >> 2]);
   }
   $2 = $2 + 1 | 0;
   continue;
  }
  break;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 176 | 0);
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20____vector_28_29($1);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}
function std____2____call_once_28unsigned_20long_20volatile__2c_20void__2c_20void_20_28__29_28void__29_29($0, $1, $2) {
 std____2____libcpp_mutex_lock_28pthread_mutex_t__29(27216);
 while (1) {
  if (HEAP32[$0 >> 2] == 1) {
   std____2____libcpp_condvar_wait_28pthread_cond_t__2c_20pthread_mutex_t__29(27244, 27216);
   continue;
  }
  break;
 }
 if (!HEAP32[$0 >> 2]) {
  void_20std____2___28anonymous_20namespace_29____libcpp_relaxed_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_29($0);
  std____2____libcpp_mutex_unlock_28pthread_mutex_t__29(27216);
  FUNCTION_TABLE[$2]($1);
  std____2____libcpp_mutex_lock_28pthread_mutex_t__29(27216);
  void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_2c_20int_29($0);
  std____2____libcpp_mutex_unlock_28pthread_mutex_t__29(27216);
  std____2____libcpp_condvar_broadcast_28pthread_cond_t__29(27244);
  return;
 }
 std____2____libcpp_mutex_unlock_28pthread_mutex_t__29(27216);
}
function std____2____time_put____do_put_28wchar_t__2c_20wchar_t___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 144 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 28 >> 2] = $6 + 132;
 std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $6 + 32 | 0, $6 + 28 | 0, $3, $4, $5);
 HEAP32[$6 + 16 >> 2] = 0;
 HEAP32[$6 + 20 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = $6 + 32;
 $0 = std____2____libcpp_mbsrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($1, $6 + 12 | 0, unsigned_20long_20std____2___28anonymous_20namespace_29__countof_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__29($1, HEAP32[$2 >> 2]), $6 + 16 | 0, HEAP32[$0 >> 2]);
 if (($0 | 0) == -1) {
  std____2____throw_runtime_error_28char_20const__29($6);
  abort();
 }
 HEAP32[$2 >> 2] = ($0 << 2) + $1;
 $0 = $6 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_constexpr_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 while (1) {
  if (($0 | 0) != ($1 | 0)) {
   $2 = HEAP32[$0 >> 2];
   std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29(std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29($3 + 8 | 0), $2);
   $0 = $0 + 4 | 0;
   std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($3 + 8 | 0);
   continue;
  }
  break;
 }
 $0 = HEAP32[$3 + 8 >> 2];
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function void_20std____2__call_once_std____2___28anonymous_20namespace_29____fake_bind__28std____2__once_flag__2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 if ((unsigned_20long_20std____2____libcpp_acquire_load_unsigned_20long__28unsigned_20long_20const__29($0) | 0) != -1) {
  std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____call_once_param_28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____29($2, std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____tuple_std____2___28anonymous_20namespace_29____fake_bind_2c_20false_2c_20false__28std____2___28anonymous_20namespace_29____fake_bind___29($2 + 8 | 0, $1));
  std____2____call_once_28unsigned_20long_20volatile__2c_20void__2c_20void_20_28__29_28void__29_29($0, $2, 169);
 }
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2 : {
  if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   break label$2;
  }
  if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
   if (($3 | 0) != 1) {
    break label$2;
   }
   HEAP32[$1 + 32 >> 2] = 1;
   return;
  }
  HEAP32[$1 + 20 >> 2] = $2;
  HEAP32[$1 + 32 >> 2] = $3;
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
  if (!(HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2)) {
   HEAP8[$1 + 54 | 0] = 1;
  }
  HEAP32[$1 + 44 >> 2] = 4;
 }
}
function neopt__BinaryWriter__Flush_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $0 = global$0 - 16 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 $2 = $0 + 8 | 0;
 $1 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29(24288, 4781, 55);
 std____2__ios_base__getloc_28_29_20const($2, $1 + HEAP32[HEAP32[$1 >> 2] + -12 >> 2] | 0);
 $2 = std____2__locale__use_facet_28std____2__locale__id__29_20const($0 + 8 | 0, 25448);
 $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, 10) | 0;
 std____2__locale___locale_28_29($0 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($1, $2);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($1);
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____difference_type_20std____2__distance_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 return std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____difference_type_20std____2____distance_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 + -64 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = 1;
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0)) {
   break label$2;
  }
  $4 = 0;
  if (!$1) {
   break label$2;
  }
  $1 = __dynamic_cast($1, 20736, 20784, 0);
  if (!$1) {
   break label$2;
  }
  HEAP32[$3 + 20 >> 2] = -1;
  HEAP32[$3 + 16 >> 2] = $0;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = $1;
  memset($3 + 24 | 0, 0, 39);
  HEAP32[$3 + 56 >> 2] = 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $3 + 8 | 0, HEAP32[$2 >> 2], 1);
  if (HEAP32[$3 + 32 >> 2] != 1) {
   break label$2;
  }
  HEAP32[$2 >> 2] = HEAP32[$3 + 24 >> 2];
  $4 = 1;
 }
 $0 = $3 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function neopt__IBinaryReader__Read_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 32 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 if ($2 + $3 >>> 0 <= HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >>> 0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($4 + 16 | 0, $0, $3);
  $5 = HEAP32[$4 + 16 >> 2];
  if (($3 | 0) >= 1) {
   $0 = 0;
   while (1) {
    HEAP8[HEAP32[$1 >> 2] + ($0 + $2 | 0) | 0] = HEAPU8[$0 + $5 | 0];
    $5 = HEAP32[$4 + 16 >> 2];
    $0 = $0 + 1 | 0;
    if (($3 | 0) != ($0 | 0)) {
     continue;
    }
    break;
   }
  }
  if ($5) {
   HEAP32[$4 + 20 >> 2] = $5;
   operator_20delete_28void__29($5);
  }
  $0 = $4 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 HEAP32[$4 + 4 >> 2] = 3794;
 HEAP32[$4 >> 2] = 3173;
 iprintf(3084, $4);
 exit(1);
 abort();
}
function wcrtomb($0, $1, $2) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = 1;
 label$1 : {
  if ($0) {
   if ($1 >>> 0 <= 127) {
    break label$1;
   }
   label$3 : {
    if (!HEAP32[HEAP32[__pthread_self_1() + 176 >> 2] >> 2]) {
     if (($1 & -128) == 57216) {
      break label$1;
     }
     break label$3;
    }
    if ($1 >>> 0 <= 2047) {
     HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 6 | 192;
     return 2;
    }
    if (!(($1 & -8192) != 57344 ? $1 >>> 0 >= 55296 : 0)) {
     HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 12 | 224;
     HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
     return 3;
    }
    if ($1 + -65536 >>> 0 <= 1048575) {
     HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 18 | 240;
     HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
     HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
     return 4;
    }
   }
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 25, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $2 = -1;
  }
  return $2;
 }
 HEAP8[$0 | 0] = $1;
 return 1;
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20__28std____2____default_init_tag___2c_20std____2__allocator_char____29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_char__2c_20void__28std____2__allocator_char____29($0, std____2__allocator_char____20std____2__forward_std____2__allocator_char__20__28std____2__remove_reference_std____2__allocator_char__20___type__29($2));
 return $0;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$4 >> 2] = $2;
 $2 = 2;
 $1 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5 + 12 | 0, 0, $1, HEAP32[$0 + 8 >> 2]);
 label$2 : {
  if ($1 + 1 >>> 0 < 2) {
   break label$2;
  }
  $2 = 1;
  $1 = $1 + -1 | 0;
  if ($1 >>> 0 > $3 - HEAP32[$4 >> 2] >>> 0) {
   break label$2;
  }
  $2 = $5 + 12 | 0;
  while (1) {
   if ($1) {
    $0 = HEAPU8[$2 | 0];
    $3 = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $3 + 1;
    HEAP8[$3 | 0] = $0;
    $1 = $1 + -1 | 0;
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  }
  $2 = 0;
 }
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char_20const__2c_20void__28char_20const__2c_20char_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
 std____2__enable_if___is_cpp17_forward_iterator_char_20const____value_2c_20void___type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char_20const___28char_20const__2c_20char_20const__29($0, $1, $2);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__enable_if__28is_move_constructible_wchar_t___value_29_20___20_28is_move_assignable_wchar_t___value_29_2c_20void___type_20std____2__swap_wchar_t__28wchar_t__2c_20wchar_t__29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[std____2__remove_reference_wchar_t____type___20std____2__move_wchar_t___28wchar_t__29($0) >> 2], HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[std____2__remove_reference_wchar_t____type___20std____2__move_wchar_t___28wchar_t__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = HEAP32[std____2__remove_reference_wchar_t____type___20std____2__move_wchar_t___28wchar_t__29($2 + 12 | 0) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char__2c_20void__28char__2c_20char__2c_20std____2__allocator_char__20const__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20const___28std____2____default_init_tag___2c_20std____2__allocator_char__20const__29($0, $4 + 8 | 0, $3);
 std____2__enable_if___is_cpp17_forward_iterator_char____value_2c_20void___type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char___28char__2c_20char__29($0, $1, $2);
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0, $1, $2) {
 return std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29(wchar_t__20std____2____unwrap_iter_wchar_t___28wchar_t__29($0), wchar_t__20std____2____unwrap_iter_wchar_t___28wchar_t__29($1), std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____unwrap_iter_std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($2));
}
function vsnprintf($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = global$0 - 160 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 memcpy($4 + 8 | 0, 9816, 144);
 label$2 : {
  label$3 : {
   if ($1 + -1 >>> 0 >= 2147483647) {
    if ($1) {
     break label$3;
    }
    $1 = 1;
    $0 = $4 + 159 | 0;
   }
   HEAP32[$4 + 52 >> 2] = $0;
   HEAP32[$4 + 28 >> 2] = $0;
   $5 = -2 - $0 | 0;
   $1 = $1 >>> 0 > $5 >>> 0 ? $5 : $1;
   HEAP32[$4 + 56 >> 2] = $1;
   $0 = $0 + $1 | 0;
   HEAP32[$4 + 36 >> 2] = $0;
   HEAP32[$4 + 24 >> 2] = $0;
   $0 = vfprintf($4 + 8 | 0, $2, $3);
   if (!$1) {
    break label$2;
   }
   $1 = HEAP32[$4 + 28 >> 2];
   HEAP8[$1 - (HEAP32[$4 + 24 >> 2] == ($1 | 0)) | 0] = 0;
   break label$2;
  }
  wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 61, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $0 = -1;
 }
 $1 = $4 + 160 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_constexpr_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 while (1) {
  if (($0 | 0) != ($1 | 0)) {
   $2 = HEAP8[$0 | 0];
   std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29(std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29($3 + 8 | 0), $2);
   $0 = $0 + 1 | 0;
   std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($3 + 8 | 0);
   continue;
  }
  break;
 }
 $0 = HEAP32[$3 + 8 >> 2];
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 return $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $2 + 8 | 0, $2);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_wchar_t___length_28wchar_t_20const__29($1));
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP8[$6 + 15 | 0] = 0;
 HEAP8[$6 + 14 | 0] = $5;
 HEAP8[$6 + 13 | 0] = $4;
 HEAP8[$6 + 12 | 0] = 37;
 if ($5) {
  std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($6 + 13 | 0, $6 + 14 | 0);
 }
 wasm2js_i32$0 = $2, wasm2js_i32$1 = (strftime_l($1 | 0, unsigned_20long_20std____2___28anonymous_20namespace_29__countof_char__28char_20const__2c_20char_20const__29($1, HEAP32[$2 >> 2]) | 0, $6 + 12 | 0, $3 | 0, HEAP32[$0 >> 2]) | 0) + $1 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = $6 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = global$0 - 16 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $5;
 $5 = std____2__utf16_to_utf8_28unsigned_20short_20const__2c_20unsigned_20short_20const__2c_20unsigned_20short_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0, 1114111, 0);
 HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = global$0 - 16 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $5;
 $5 = std____2__utf8_to_utf16_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20short__2c_20unsigned_20short__2c_20unsigned_20short___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0, 1114111, 0);
 HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = global$0 - 16 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $5;
 $5 = std____2__ucs4_to_utf8_28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20int_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0, 1114111, 0);
 HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $0 = global$0 - 16 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $5;
 $5 = std____2__utf8_to_ucs4_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0, 1114111, 0);
 HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAPU8[std____2__remove_reference_char____type___20std____2__move_char___28char__29($0) | 0], HEAP8[wasm2js_i32$0 + 15 | 0] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAPU8[std____2__remove_reference_char____type___20std____2__move_char___28char__29($1) | 0], HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = HEAPU8[std____2__remove_reference_char____type___20std____2__move_char___28char__29($2 + 15 | 0) | 0], HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char__2c_20void__28char__2c_20char__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
 std____2__enable_if___is_cpp17_forward_iterator_char____value_2c_20void___type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char___28char__2c_20char__29($0, $1, $2);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__enable_if__28is_move_constructible_int___value_29_20___20_28is_move_assignable_int___value_29_2c_20void___type_20std____2__swap_int__28int__2c_20int__29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[std____2__remove_reference_int____type___20std____2__move_int___28int__29($0) >> 2], HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[std____2__remove_reference_int____type___20std____2__move_int___28int__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = HEAP32[std____2__remove_reference_int____type___20std____2__move_int___28int__29($2 + 12 | 0) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function double_20std____2___28anonymous_20namespace_29__as_float_double_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long__29($0, $1, $2) {
 return double_20std____2___28anonymous_20namespace_29__as_float_helper_double_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20double_20_28__29_28char_20const__2c_20char___29__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long__2c_20double_20_28__29_28char_20const__2c_20char___29_29($0, $1, $2);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $2 + 8 | 0, $2);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_char___length_28char_20const__29($1));
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function __strchrnul($0, $1) {
 var $2 = 0, $3 = 0;
 label$1 : {
  $3 = $1 & 255;
  if ($3) {
   if ($0 & 3) {
    while (1) {
     $2 = HEAPU8[$0 | 0];
     if (!$2 | ($1 & 255) == ($2 | 0)) {
      break label$1;
     }
     $0 = $0 + 1 | 0;
     if ($0 & 3) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 >> 2];
   label$5 : {
    if (($2 ^ -1) & $2 + -16843009 & -2139062144) {
     break label$5;
    }
    $3 = Math_imul($3, 16843009);
    while (1) {
     $2 = $2 ^ $3;
     if (($2 ^ -1) & $2 + -16843009 & -2139062144) {
      break label$5;
     }
     $2 = HEAP32[$0 + 4 >> 2];
     $0 = $0 + 4 | 0;
     if (!($2 + -16843009 & ($2 ^ -1) & -2139062144)) {
      continue;
     }
     break;
    }
   }
   while (1) {
    $2 = $0;
    $3 = HEAPU8[$2 | 0];
    if ($3) {
     $0 = $2 + 1 | 0;
     if (($1 & 255) != ($3 | 0)) {
      continue;
     }
    }
    break;
   }
   return $2;
  }
  return strlen($0) + $0 | 0;
 }
 return $0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20std____2__back_inserter_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = HEAP32[std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___back_insert_iterator_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29($1 + 8 | 0, $0) >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function neopt__StringReader__Peek_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 $3 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 label$2 : {
  label$3 : {
   $0 = HEAP32[$0 + 4 >> 2];
   if (!(HEAPU8[($0 + HEAP32[HEAP32[$0 >> 2] + -12 >> 2] | 0) + 16 | 0] & 2)) {
    $2 = std____2__basic_istream_char_2c_20std____2__char_traits_char__20___peek_28_29($0);
    if (HEAPU8[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 16 | 0] & 5) {
     break label$3;
    }
    if (($2 | 0) <= 0) {
     break label$2;
    }
   }
   $0 = $1 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return $2 << 24 >> 24;
  }
  HEAP32[$1 + 20 >> 2] = 3110;
  HEAP32[$1 + 16 >> 2] = 3105;
  iprintf(3084, $1 + 16 | 0);
  exit(1);
  abort();
 }
 HEAP32[$1 + 4 >> 2] = 3136;
 HEAP32[$1 >> 2] = 3105;
 iprintf(3084, $1);
 exit(1);
 abort();
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0, $1, $2) {
 return std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29(char__20std____2____unwrap_iter_char___28char__29($0), char__20std____2____unwrap_iter_char___28char__29($1), std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____unwrap_iter_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($2));
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__endl_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0) {
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 std____2__ios_base__getloc_28_29_20const($2 + 8 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 $1 = std____2__locale__use_facet_28std____2__locale__id__29_20const($2 + 8 | 0, 25448);
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, 10) | 0;
 std____2__locale___locale_28_29($2 + 8 | 0);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $1);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28unsigned_20long_2c_20wchar_t_29($0, $1, $2);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2____stdoutbuf_wchar_t___sync_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 16 | 0;
 $3 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = $1 + 16 | 0;
 label$2 : {
  while (1) {
   $3 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $1 + 8 | 0, $5, $1 + 4 | 0);
   $4 = -1;
   $2 = HEAP32[$1 + 4 >> 2] - ($1 + 8 | 0) | 0;
   if (($2 | 0) != (fwrite($1 + 8 | 0, 1, $2, HEAP32[$0 + 32 >> 2]) | 0)) {
    break label$2;
   }
   $2 = $3 + -1 | 0;
   if ($2 >>> 0 <= 1) {
    if ($2 - 1) {
     continue;
    }
    break label$2;
   }
   break;
  }
  $4 = fflush(HEAP32[$0 + 32 >> 2]) ? -1 : 0;
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 4);
 if (!(HEAPU8[$4 | 0] & 4)) {
  HEAP32[$1 >> 2] = (($2 | 0) < 69 ? $2 + 2e3 | 0 : ($2 | 0) < 100 ? $2 + 1900 | 0 : $2) + -1900;
 }
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 3);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 365 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!($2 + -1 >>> 0 > 11 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!($2 + -1 >>> 0 > 30 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}



function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 12 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2 + -1;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29($0, $1, $2) {
 return std____2__enable_if__28is_same_std____2__remove_const_wchar_t_20const___type_2c_20wchar_t___value_29_20___20_28is_trivially_copy_assignable_wchar_t___value_29_2c_20wchar_t____type_20std____2____copy_wchar_t_20const_2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t__29(std____2__enable_if_is_trivially_copy_assignable_wchar_t___value_2c_20wchar_t_20const____type_20std____2____unwrap_iter_wchar_t__28std____2____wrap_iter_wchar_t_20const___29($0), std____2__enable_if_is_trivially_copy_assignable_wchar_t___value_2c_20wchar_t_20const____type_20std____2____unwrap_iter_wchar_t__28std____2____wrap_iter_wchar_t_20const___29($1), wchar_t__20std____2____unwrap_iter_wchar_t___28wchar_t__29($2));
}
function std____2____stdoutbuf_char___sync_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 16 | 0;
 $3 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = $1 + 16 | 0;
 label$2 : {
  while (1) {
   $3 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $1 + 8 | 0, $5, $1 + 4 | 0);
   $4 = -1;
   $2 = HEAP32[$1 + 4 >> 2] - ($1 + 8 | 0) | 0;
   if (($2 | 0) != (fwrite($1 + 8 | 0, 1, $2, HEAP32[$0 + 32 >> 2]) | 0)) {
    break label$2;
   }
   $2 = $3 + -1 | 0;
   if ($2 >>> 0 <= 1) {
    if ($2 - 1) {
     continue;
    }
    break label$2;
   }
   break;
  }
  $4 = fflush(HEAP32[$0 + 32 >> 2]) ? -1 : 0;
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 1);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 6 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 60 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 59 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 23 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $1;
 std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29_____compressed_pair_unsigned_20char___2c_20void_20_28__29_28void__29__28unsigned_20char___2c_20void_20_28____29_28void__29_29($0, $3 + 12 | 0, std____2__remove_reference_void_20_28___29_28void__29___type___20std____2__move_void_20_28___29_28void__29__28void_20_28___29_28void__29_29($2));
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 if (($0 | 0) != ($1 | 0)) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____copy_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__2c_20unsigned_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1));
 }
 return $0;
}
function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2__back_inserter_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = HEAP32[std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___back_insert_iterator_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29($1 + 8 | 0, $0) >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28unsigned_20int__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $1;
 std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29_____compressed_pair_unsigned_20int___2c_20void_20_28__29_28void__29__28unsigned_20int___2c_20void_20_28____29_28void__29_29($0, $3 + 12 | 0, std____2__remove_reference_void_20_28___29_28void__29___type___20std____2__move_void_20_28___29_28void__29__28void_20_28___29_28void__29_29($2));
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______destruct_at_end_28std____2__locale__facet___2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
 var $2 = 0, $3 = 0;
 while (1) {
  if (HEAP32[$0 + 8 >> 2] != ($1 | 0)) {
   $3 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______alloc_28_29($0);
   $2 = HEAP32[$0 + 8 >> 2] + -4 | 0;
   HEAP32[$0 + 8 >> 2] = $2;
   void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___destroy_std____2__locale__facet___28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29($3, std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29($2));
   continue;
  }
  break;
 }
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28unsigned_20long_2c_20char_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28unsigned_20long_2c_20char_29($0, $1, $2);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_acquire_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 if (!$28anonymous_20namespace_29__AtomicInt_unsigned_20char___load_28std____2___28anonymous_20namespace_29____libcpp_atomic_order_29($28anonymous_20namespace_29__AtomicInt_unsigned_20char___AtomicInt_28unsigned_20char__29($1 + 8 | 0, HEAP32[$0 + 4 >> 2]))) {
  $3 = __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__acquire_init_byte_28_29(__cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___derived_28_29($0));
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($1));
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__2c_201_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0 + 16 | 0);
 return $0;
}
function __fwritex($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = HEAP32[$2 + 16 >> 2];
 label$1 : {
  if (!$3) {
   if (__towrite($2)) {
    break label$1;
   }
   $3 = HEAP32[$2 + 16 >> 2];
  }
  $5 = HEAP32[$2 + 20 >> 2];
  if ($3 - $5 >>> 0 < $1 >>> 0) {
   return FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $1) | 0;
  }
  label$5 : {
   if (HEAP8[$2 + 75 | 0] < 0) {
    break label$5;
   }
   $4 = $1;
   while (1) {
    $3 = $4;
    if (!$3) {
     break label$5;
    }
    $4 = $3 + -1 | 0;
    if (HEAPU8[$4 + $0 | 0] != 10) {
     continue;
    }
    break;
   }
   $4 = FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $3) | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    break label$1;
   }
   $1 = $1 - $3 | 0;
   $0 = $0 + $3 | 0;
   $5 = HEAP32[$2 + 20 >> 2];
   $6 = $3;
  }
  memcpy($5, $0, $1);
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + $1;
  $4 = $1 + $6 | 0;
 }
 return $4;
}
function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
 HEAP8[$1 + 53 | 0] = 1;
 label$1 : {
  if (HEAP32[$1 + 4 >> 2] != ($3 | 0)) {
   break label$1;
  }
  HEAP8[$1 + 52 | 0] = 1;
  $3 = HEAP32[$1 + 16 >> 2];
  if (!$3) {
   HEAP32[$1 + 36 >> 2] = 1;
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 16 >> 2] = $2;
   if (($4 | 0) != 1 | HEAP32[$1 + 48 >> 2] != 1) {
    break label$1;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  if (($2 | 0) == ($3 | 0)) {
   $3 = HEAP32[$1 + 24 >> 2];
   if (($3 | 0) == 2) {
    HEAP32[$1 + 24 >> 2] = $4;
    $3 = $4;
   }
   if (HEAP32[$1 + 48 >> 2] != 1 | ($3 | 0) != 1) {
    break label$1;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  HEAP8[$1 + 54 | 0] = 1;
  HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
 }
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__allocator_char__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2__allocator_char__20const___28std____2____default_init_tag___2c_20std____2__allocator_char__20const__29($0, $2 + 8 | 0, $1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($0);
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_release_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $28anonymous_20namespace_29__AtomicInt_unsigned_20char___store_28unsigned_20char_2c_20std____2___28anonymous_20namespace_29____libcpp_atomic_order_29($28anonymous_20namespace_29__AtomicInt_unsigned_20char___AtomicInt_28unsigned_20char__29($1 + 8 | 0, HEAP32[$0 + 4 >> 2]));
 __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__release_init_byte_28_29(__cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___derived_28_29($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function neopt__IBinaryWriter__WriteVarInt_28long_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 if (($1 | 0) > -1) {
  label$3 : {
   if (($1 | 0) <= 252) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1 & 255);
    break label$3;
   }
   $3 = HEAP32[HEAP32[$0 >> 2] >> 2];
   if (($1 | 0) <= 65535) {
    FUNCTION_TABLE[$3]($0, 253);
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1 & 65535);
    break label$3;
   }
   FUNCTION_TABLE[$3]($0, 254);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow();
  }
  global$0 = $0;
  return;
 }
 HEAP32[$2 + 4 >> 2] = 4726;
 HEAP32[$2 >> 2] = 4714;
 iprintf(3084, $2);
 exit(1);
 abort();
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 4);
 if (!(HEAPU8[$4 | 0] & 4)) {
  HEAP32[$1 >> 2] = (($2 | 0) < 69 ? $2 + 2e3 | 0 : ($2 | 0) < 100 ? $2 + 1900 | 0 : $2) + -1900;
 }
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 3);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 365 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!($2 + -1 >>> 0 > 11 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 12 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2 + -1;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28wchar_t__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $1;
 std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29_____compressed_pair_wchar_t___2c_20void_20_28__29_28void__29__28wchar_t___2c_20void_20_28____29_28void__29_29($0, $3 + 12 | 0, std____2__remove_reference_void_20_28___29_28void__29___type___20std____2__move_void_20_28___29_28void__29__28void_20_28___29_28void__29_29($2));
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!($2 + -1 >>> 0 > 30 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2___28anonymous_20namespace_29__throw_from_string_invalid_arg_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2__operator__char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20char_20const__29($1, $0, 20346);
 void_20std____2___28anonymous_20namespace_29__throw_helper_std__invalid_argument__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($1);
 abort();
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 1);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 6 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 60 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 59 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function std____2___28anonymous_20namespace_29__throw_from_string_out_of_range_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2__operator__char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20char_20const__29($1, $0, 20366);
 void_20std____2___28anonymous_20namespace_29__throw_helper_std__out_of_range__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($1);
 abort();
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destruct_at_end_28std____2__locale__facet___29($0, $1) {
 var $2 = 0;
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____invalidate_iterators_past_28std____2__locale__facet___29($0, $1);
 $2 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($0);
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destruct_at_end_28std____2__locale__facet___29($0, $1);
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_shrink_28unsigned_20long_29_20const($0, $2);
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 2);
 $3 = HEAP32[$4 >> 2];
 if (!(($2 | 0) > 23 | $3 & 4)) {
  HEAP32[$1 >> 2] = $2;
  return;
 }
 HEAP32[$4 >> 2] = $3 | 4;
}
function __floatsitf($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = global$0 - 16 | 0;
 $5 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = $0;
 label$2 : {
  if (!$1) {
   break label$2;
  }
  $2 = $1 >> 31;
  $2 = $2 ^ $1 + $2;
  $4 = $2;
  $2 = Math_clz32($2);
  __ashlti3($3, $4, 0, 0, 0, $2 + 81 | 0);
  $2 = (HEAP32[$3 + 12 >> 2] ^ 65536) + (16414 - $2 << 16) | 0;
  $4 = 0 + HEAP32[$3 + 8 >> 2] | 0;
  if ($4 >>> 0 < $8 >>> 0) {
   $2 = $2 + 1 | 0;
  }
  $6 = $2;
  $2 = $4;
  $7 = 0 | $2;
  $4 = $1 & -2147483648 | $6;
  $6 = HEAP32[$3 >> 2];
  $2 = HEAP32[$3 + 4 >> 2];
 }
 HEAP32[$5 >> 2] = $6;
 HEAP32[$5 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $7;
 $2 = $4;
 HEAP32[$0 + 12 >> 2] = $2;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1 + 8 | 0, $1);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____zero_28_29($0);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if ($2 & 2048) {
  HEAP8[$0 | 0] = 43;
  $0 = $0 + 1 | 0;
 }
 if ($2 & 1024) {
  HEAP8[$0 | 0] = 35;
  $0 = $0 + 1 | 0;
 }
 $3 = $2 & 260;
 if (($3 | 0) != 260) {
  HEAP8[$0 | 0] = 10798;
  HEAP8[$0 + 1 | 0] = 42;
  $5 = 1;
  $0 = $0 + 2 | 0;
 }
 $4 = $2 & 16384;
 while (1) {
  $2 = HEAPU8[$1 | 0];
  if ($2) {
   HEAP8[$0 | 0] = $2;
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 label$6 : {
  label$7 : {
   if (($3 | 0) != 256) {
    if (($3 | 0) != 4) {
     break label$7;
    }
    $1 = $4 ? 70 : 102;
    break label$6;
   }
   $1 = $4 ? 69 : 101;
   break label$6;
  }
  $1 = $4 ? 65 : 97;
  if (($3 | 0) == 260) {
   break label$6;
  }
  $1 = $4 ? 71 : 103;
 }
 HEAP8[$0 | 0] = $1;
 return $5;
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20______vector_base_28_29($0) {
 if (HEAP32[$0 >> 2]) {
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___clear_28_29($0);
  std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0), HEAP32[$0 >> 2], std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0));
 }
 return $0;
}
function std____2____stdinbuf_wchar_t_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29($0);
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 >> 2] = 8440;
 $1 = std____2__char_traits_wchar_t___eof_28_29();
 HEAP8[$0 + 52 | 0] = 0;
 HEAP32[$0 + 48 >> 2] = $1;
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___getloc_28_29_20const($3 + 8 | 0, $4);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 8 | 0);
 std____2__locale___locale_28_29($3 + 8 | 0);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($2, $3, $4, $5, 4);
 if (!(HEAPU8[$4 | 0] & 4)) {
  HEAP32[$1 >> 2] = $2 + -1900;
 }
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul________split_buffer_28_29($0) {
 std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____clear_28_29($0);
 if (HEAP32[$0 >> 2]) {
  std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29(std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______alloc_28_29($0), HEAP32[$0 >> 2], std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____capacity_28_29_20const($0));
 }
 return $0;
}
function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___unique_ptr_true_2c_20void__28char__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_void_20_28__29_28void__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $1;
 std____2____compressed_pair_char__2c_20void_20_28__29_28void__29_____compressed_pair_char___2c_20void_20_28__29_28void__29__28char___2c_20void_20_28____29_28void__29_29($0, $3 + 12 | 0, std____2__remove_reference_void_20_28___29_28void__29___type___20std____2__move_void_20_28___29_28void__29__28void_20_28___29_28void__29_29($2));
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destruct_at_end_28std____2__locale__facet___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $3 = std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0);
   $2 = $2 + -4 | 0;
   void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___destroy_std____2__locale__facet___28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29($3, std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29($2));
   continue;
  }
  break;
 }
 HEAP32[$0 + 4 >> 2] = $1;
}
function neopt__BinaryReader__ReadByte_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $3 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 label$2 : {
  if (HEAP32[$0 + 12 >> 2]) {
   $2 = HEAP32[$0 + 4 >> 2];
   if (HEAP32[($2 + HEAP32[HEAP32[$2 >> 2] + -12 >> 2] | 0) + 16 >> 2]) {
    break label$2;
   }
   std____2__basic_istream_char_2c_20std____2__char_traits_char__20___read_28char__2c_20long_29($2, $1 + 15 | 0, 1);
   $2 = HEAPU8[$1 + 15 | 0];
   $3 = HEAP32[$0 + 12 >> 2];
   if (($3 | 0) >= 1) {
    HEAP32[$0 + 12 >> 2] = $3 + -1;
   }
   $0 = $1 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow();
   }
   global$0 = $0;
   return $2 & 255;
  }
  __assert_fail(3672, 3687, 194, 3769);
  abort();
 }
 __assert_fail(3778, 3687, 195, 3769);
 abort();
}
function std____2____stdinbuf_char_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0);
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 >> 2] = 8300;
 $1 = std____2__char_traits_char___eof_28_29();
 HEAP8[$0 + 52 | 0] = 0;
 HEAP32[$0 + 48 >> 2] = $1;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($3 + 8 | 0, $4);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 8 | 0);
 std____2__locale___locale_28_29($3 + 8 | 0);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29($0, $1, $2) {
 return std____2__enable_if__28is_same_std____2__remove_const_char_20const___type_2c_20char___value_29_20___20_28is_trivially_copy_assignable_char___value_29_2c_20char____type_20std____2____copy_char_20const_2c_20char__28char_20const__2c_20char_20const__2c_20char__29(std____2__enable_if_is_trivially_copy_assignable_char___value_2c_20char_20const____type_20std____2____unwrap_iter_char__28std____2____wrap_iter_char_20const___29($0), std____2__enable_if_is_trivially_copy_assignable_char___value_2c_20char_20const____type_20std____2____unwrap_iter_char__28std____2____wrap_iter_char_20const___29($1), char__20std____2____unwrap_iter_char___28char__29($2));
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2___28anonymous_20namespace_29__i_to_string_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int__28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 std____2__to_chars_result_20std____2__to_chars_int_2c_200__28char__2c_20char__2c_20int_29($2 + 8 | 0, $2 + 21 | 0, $2 + 32 | 0, $1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char__2c_20void__28char__2c_20char__29($0, $2 + 21 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vector_base_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 std____2____vector_base_common_true_____vector_base_common_28_29($0);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0 + 16 | 0, $1 + 12 | 0, $1 + 8 | 0);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___reset_28unsigned_20int__29($0, std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___release_28_29($1));
 $1 = HEAP32[void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29(std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_deleter_28_29($1)) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___second_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($0) {
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  std____2__allocator_traits_std____2__allocator_wchar_t__20___deallocate_28std____2__allocator_wchar_t___2c_20wchar_t__2c_20unsigned_20long_29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_cap_28_29_20const($0));
 }
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1 + 8 | 0, $1);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($0);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 HEAP32[$0 + 36 >> 2] = $1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($1), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const(HEAP32[$0 + 36 >> 2]), HEAP8[wasm2js_i32$0 + 53 | 0] = wasm2js_i32$1;
 if (HEAP32[$0 + 44 >> 2] >= 9) {
  std____2____throw_runtime_error_28char_20const__29(8392);
  abort();
 }
}
function std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2__ios_base__getloc_28_29_20const($3 + 8 | 0, $1);
 $1 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($3 + 8 | 0);
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__numpunct_wchar_t___thousands_sep_28_29_20const($1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 std____2__numpunct_wchar_t___grouping_28_29_20const($0, $1);
 std____2__locale___locale_28_29($3 + 8 | 0);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29_____compressed_pair_unsigned_20char___2c_20void_20_28__29_28void__29__28unsigned_20char___2c_20void_20_28____29_28void__29_29($0, $1, $2) {
 std____2____compressed_pair_elem_unsigned_20char__2c_200_2c_20false_____compressed_pair_elem_unsigned_20char___2c_20void__28unsigned_20char___29($0, unsigned_20char___20std____2__forward_unsigned_20char____28std____2__remove_reference_unsigned_20char_____type__29($1));
 std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_void_20_28__29_28void__29_2c_20void__28void_20_28____29_28void__29_29($0 + 4 | 0, void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($2));
 return $0;
}
function std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 label$1 : {
  if (!HEAPU8[$0 + 44 | 0]) {
   $2 = ($2 | 0) > 0 ? $2 : 0;
   while (1) {
    if (($2 | 0) == ($3 | 0)) {
     break label$1;
    }
    if (((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(HEAP32[$1 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == (std____2__char_traits_wchar_t___eof_28_29() | 0)) {
     return $3 | 0;
    } else {
     $1 = $1 + 4 | 0;
     $3 = $3 + 1 | 0;
     continue;
    }
   }
  }
  $2 = fwrite($1, 4, $2, HEAP32[$0 + 32 >> 2]);
 }
 return $2 | 0;
}
function std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29_____compressed_pair_unsigned_20int___2c_20void_20_28__29_28void__29__28unsigned_20int___2c_20void_20_28____29_28void__29_29($0, $1, $2) {
 std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____compressed_pair_elem_unsigned_20int___2c_20void__28unsigned_20int___29($0, unsigned_20int___20std____2__forward_unsigned_20int____28std____2__remove_reference_unsigned_20int_____type__29($1));
 std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_void_20_28__29_28void__29_2c_20void__28void_20_28____29_28void__29_29($0 + 4 | 0, void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($2));
 return $0;
}
function std____2____stdinbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 HEAP32[$0 + 36 >> 2] = $1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($1), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const(HEAP32[$0 + 36 >> 2]), HEAP8[wasm2js_i32$0 + 53 | 0] = wasm2js_i32$1;
 if (HEAP32[$0 + 44 >> 2] >= 9) {
  std____2____throw_runtime_error_28char_20const__29(8392);
  abort();
 }
}
function __emscripten_environ_constructor() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = global$0 - 16 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 label$2 : {
  if (__wasi_environ_sizes_get($0 + 12 | 0, $0 + 8 | 0)) {
   break label$2;
  }
  $2 = dlmalloc((HEAP32[$0 + 12 >> 2] << 2) + 4 | 0);
  HEAP32[6306] = $2;
  if (!$2) {
   break label$2;
  }
  label$3 : {
   $2 = dlmalloc(HEAP32[$0 + 8 >> 2]);
   if ($2) {
    $1 = HEAP32[6306];
    if ($1) {
     break label$3;
    }
   }
   HEAP32[6306] = 0;
   break label$2;
  }
  HEAP32[(HEAP32[$0 + 12 >> 2] << 2) + $1 >> 2] = 0;
  if (!__wasi_environ_get(HEAP32[6306], $2 | 0)) {
   break label$2;
  }
  HEAP32[6306] = 0;
 }
 $1 = $0 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
 $2 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($2, $3, $4, $5, 4);
 if (!(HEAPU8[$4 | 0] & 4)) {
  HEAP32[$1 >> 2] = $2 + -1900;
 }
}
function std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($0, $1, $2) {
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 std____2__ios_base__getloc_28_29_20const($3 + 8 | 0, $1);
 $1 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($3 + 8 | 0);
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__numpunct_char___thousands_sep_28_29_20const($1), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
 std____2__numpunct_char___grouping_28_29_20const($0, $1);
 std____2__locale___locale_28_29($3 + 8 | 0);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__locale__id____get_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 168;
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 4 >> 2] = $2;
 void_20std____2__call_once_std____2___28anonymous_20namespace_29____fake_bind__28std____2__once_flag__2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, std____2___28anonymous_20namespace_29____fake_bind____fake_bind_28void_20_28std____2__locale__id____29_28_29_2c_20std____2__locale__id__29($1 + 16 | 0, $1, $0));
 $0 = HEAP32[$0 + 4 >> 2];
 $2 = $1 + 32 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 + -1 | 0;
}
function std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 label$1 : {
  if (!HEAPU8[$0 + 44 | 0]) {
   $2 = ($2 | 0) > 0 ? $2 : 0;
   while (1) {
    if (($2 | 0) == ($3 | 0)) {
     break label$1;
    }
    if (((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_28char_29(HEAP8[$1 | 0]), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == (std____2__char_traits_char___eof_28_29() | 0)) {
     return $3 | 0;
    } else {
     $1 = $1 + 1 | 0;
     $3 = $3 + 1 | 0;
     continue;
    }
   }
  }
  $2 = fwrite($1, 1, $2, HEAP32[$0 + 32 >> 2]);
 }
 return $2 | 0;
}
function virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
 HEAP32[$0 + 64 >> 2] = 2392;
 HEAP32[$0 >> 2] = 2352;
 HEAP32[$0 + 12 >> 2] = 2672;
 HEAP32[$0 + 8 >> 2] = 2372;
 if (HEAP8[$0 + 55 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 44 >> 2]);
 }
 $1 = $0 - -64 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 12 | 0);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($0, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 operator_20delete_28void__29($0);
}
function __floatunsitf($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = $0;
 label$2 : {
  if (!$1) {
   $4 = 0;
   break label$2;
  }
  $5 = $1;
  $1 = Math_clz32($1) ^ 31;
  __ashlti3($2, $5, 0, 0, 0, 112 - $1 | 0);
  $1 = (HEAP32[$2 + 12 >> 2] ^ 65536) + ($1 + 16383 << 16) | 0;
  $6 = 0 + HEAP32[$2 + 8 >> 2] | 0;
  if ($6 >>> 0 < $4 >>> 0) {
   $1 = $1 + 1 | 0;
  }
  $5 = $1;
  $7 = HEAP32[$2 + 4 >> 2];
  $1 = HEAP32[$2 >> 2];
  $4 = $1;
 }
 $1 = $3;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $7;
 HEAP32[$0 + 8 >> 2] = $6;
 HEAP32[$1 + 12 >> 2] = $5;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($0, std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___release_28_29($1));
 $1 = HEAP32[void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29(std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_deleter_28_29($1)) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___second_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___pbackfail_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = HEAP32[$0 + 44 >> 2];
 $2 = HEAP32[$0 + 24 >> 2];
 if ($3 >>> 0 < $2 >>> 0) {
  HEAP32[$0 + 44 >> 2] = $2;
  $3 = $2;
 }
 $4 = HEAP32[$0 + 12 >> 2];
 $2 = -1;
 label$2 : {
  if (HEAPU32[$0 + 8 >> 2] >= $4 >>> 0) {
   break label$2;
  }
  if (($1 | 0) == -1) {
   HEAP32[$0 + 16 >> 2] = $3;
   HEAP32[$0 + 12 >> 2] = $4 + -1;
   return 0;
  }
  if (!(HEAPU8[$0 + 48 | 0] & 16)) {
   $2 = -1;
   if (HEAPU8[$4 + -1 | 0] != ($1 & 255)) {
    break label$2;
   }
  }
  HEAP32[$0 + 16 >> 2] = $3;
  $2 = $4 + -1 | 0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP8[$2 | 0] = $1;
  $2 = $1;
 }
 return $2 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0));
 }
 return $0;
}
function fmt_u($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0;
 label$1 : {
  if (($1 | 0) == 1 & $3 >>> 0 < 0 | $1 >>> 0 < 1) {
   $5 = $0;
   $3 = $1;
   $6 = $3;
   break label$1;
  }
  while (1) {
   $2 = $2 + -1 | 0;
   $3 = $1;
   $5 = __wasm_i64_udiv($0, $3, 10, 0);
   $3 = i64toi32_i32$HIGH_BITS;
   $6 = $3;
   $3 = __wasm_i64_mul($5, $3, 10, 0);
   HEAP8[$2 | 0] = $0 - $3 | 48;
   $3 = $0;
   $4 = ($1 | 0) == 9 & $3 >>> 0 > 4294967295 | $1 >>> 0 > 9;
   $0 = $5;
   $3 = $6;
   $1 = $3;
   if ($4) {
    continue;
   }
   break;
  }
 }
 $4 = $5;
 if ($4) {
  while (1) {
   $2 = $2 + -1 | 0;
   $0 = ($4 >>> 0) / 10 | 0;
   HEAP8[$2 | 0] = $4 - Math_imul($0, 10) | 48;
   $1 = $4 >>> 0 > 9;
   $4 = $0;
   if ($1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP8[$2 + 15 | 0] = $1;
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($0, $2 + 15 | 0, 1);
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function non_virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 2372;
 $2 = $0 + 56 | 0;
 HEAP32[$2 >> 2] = 2392;
 $1 = $0 + -8 | 0;
 HEAP32[$1 >> 2] = 2352;
 $3 = $0 + 4 | 0;
 HEAP32[$3 >> 2] = 2672;
 if (HEAP8[$0 + 47 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$1 + 44 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($3);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($1, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($2);
 operator_20delete_28void__29($1);
}
function std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___back_insert_iterator_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___20std____2__addressof_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29($1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
 HEAP32[$0 + 64 >> 2] = 2392;
 HEAP32[$0 >> 2] = 2352;
 HEAP32[$0 + 12 >> 2] = 2672;
 HEAP32[$0 + 8 >> 2] = 2372;
 if (HEAP8[$0 + 55 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 44 >> 2]);
 }
 $1 = $0 - -64 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 12 | 0);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($0, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 return $0 | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = HEAP32[std____2____wrap_iter_wchar_t_20const______wrap_iter_28wchar_t_20const__29($1 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29_20const($0) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0) << 2) | 0) >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__sentry_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP8[$0 | 0] = 0;
 if (std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___good_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0)) {
  if (std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0)) {
   std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29(std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0));
  }
  HEAP8[$0 | 0] = 1;
 }
 return $0;
}
function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($0, std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___release_28_29($1));
 $1 = HEAP32[void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29(std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_deleter_28_29($1)) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function std____2__to_chars_result_20std____2____to_chars_itoa_unsigned_20int__28char__2c_20char__2c_20unsigned_20int_2c_20std____2__integral_constant_bool_2c_20false__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = $0;
 label$1 : {
  label$2 : {
   $4 = $2 - $1 | 0;
   if (($4 | 0) <= 9) {
    if ((std____2____itoa____traits_base_unsigned_20int_2c_20void_____width_28unsigned_20int_29($3) | 0) > ($4 | 0)) {
     break label$2;
    }
   }
   wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2____itoa____traits_base_unsigned_20int_2c_20void_____convert_28unsigned_20int_2c_20char__29($3, $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $1 = 0;
   break label$1;
  }
  HEAP32[$0 >> 2] = $2;
  $1 = 61;
 }
 HEAP32[$5 + 4 >> 2] = $1;
}
function virtual_20thunk_20to_20std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
 HEAP32[$0 + 60 >> 2] = 2936;
 HEAP32[$0 >> 2] = 2916;
 HEAP32[$0 + 8 >> 2] = 2672;
 if (HEAP8[$0 + 51 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 40 >> 2]);
 }
 $1 = $0 + 60 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 8 | 0);
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0, 2948);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 operator_20delete_28void__29($0);
}
function std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29_____compressed_pair_wchar_t___2c_20void_20_28__29_28void__29__28wchar_t___2c_20void_20_28____29_28void__29_29($0, $1, $2) {
 std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____compressed_pair_elem_wchar_t___2c_20void__28wchar_t___29($0, wchar_t___20std____2__forward_wchar_t____28std____2__remove_reference_wchar_t_____type__29($1));
 std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_void_20_28__29_28void__29_2c_20void__28void_20_28____29_28void__29_29($0 + 4 | 0, void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($2));
 return $0;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 while (1) {
  label$2 : {
   if (($2 | 0) == ($3 | 0) | $6 >>> 0 >= $4 >>> 0) {
    break label$2;
   }
   $5 = std____2____libcpp_mbrlen_l_28char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($2, $3 - $2 | 0, $1, HEAP32[$0 + 8 >> 2]);
   $7 = $5 + 2 | 0;
   if ($7 >>> 0 <= 2) {
    $5 = 1;
    if ($7 - 2) {
     break label$2;
    }
   }
   $6 = $6 + 1 | 0;
   $8 = $5 + $8 | 0;
   $2 = $2 + $5 | 0;
   continue;
  }
  break;
 }
 return $8 | 0;
}
function std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release_____compressed_pair_std____2__locale__facet___2c_20std____2____default_init_tag__28std____2__locale__facet___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____compressed_pair_elem_std____2__locale__facet__2c_200_2c_20false_____compressed_pair_elem_std____2__locale__facet___2c_20void__28std____2__locale__facet___29($0, std____2__locale__facet___20std____2__forward_std____2__locale__facet____28std____2__remove_reference_std____2__locale__facet_____type__29($1));
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 return $0;
}
function non_virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 HEAP32[$0 >> 2] = 2372;
 $2 = $0 + 56 | 0;
 HEAP32[$2 >> 2] = 2392;
 $1 = $0 + -8 | 0;
 HEAP32[$1 >> 2] = 2352;
 $3 = $0 + 4 | 0;
 HEAP32[$3 >> 2] = 2672;
 if (HEAP8[$0 + 47 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$1 + 44 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($3);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($1, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($2);
 return $1 | 0;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___clear_28_29($0) {
 var $1 = 0;
 $1 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($0);
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___clear_28_29($0);
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_shrink_28unsigned_20long_29_20const($0, $1);
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____invalidate_all_iterators_28_29($0);
}
function std____2____tuple_impl_std____2____tuple_indices_0ul__2c_20std____2___28anonymous_20namespace_29____fake_bind_______tuple_impl_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20std____2___28anonymous_20namespace_29____fake_bind__28std____2____tuple_indices_0ul__2c_20std____2____tuple_types_std____2___28anonymous_20namespace_29____fake_bind____2c_20std____2____tuple_indices___2c_20std____2____tuple_types___2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
 std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false_____tuple_leaf_std____2___28anonymous_20namespace_29____fake_bind_2c_20void__28std____2___28anonymous_20namespace_29____fake_bind___29($0, $1);
 return $0;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___resize_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($0);
 if ($2 >>> 0 < $1 >>> 0) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____append_28unsigned_20long_29($0, $1 - $2 | 0);
  return;
 }
 if ($2 >>> 0 > $1 >>> 0) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destruct_at_end_28std____2__locale__facet___29($0, HEAP32[$0 >> 2] + ($1 << 2) | 0);
 }
}
function std____2__init_wam_pm_28_29() {
 var $0 = 0;
 label$1 : {
  if (HEAP8[26696] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26696)) {
   break label$1;
  }
  $0 = 26672;
  while (1) {
   $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 26696) {
    continue;
   }
   break;
  }
  __cxa_guard_release(26696);
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26672, 19896);
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(26684, 19908);
}
function virtual_20thunk_20to_20std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $0 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
 HEAP32[$0 + 60 >> 2] = 2936;
 HEAP32[$0 >> 2] = 2916;
 HEAP32[$0 + 8 >> 2] = 2672;
 if (HEAP8[$0 + 51 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 40 >> 2]);
 }
 $1 = $0 + 60 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 8 | 0);
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0, 2948);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 return $0 | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = HEAP32[std____2____wrap_iter_wchar_t______wrap_iter_28wchar_t__29($1 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0) + (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0) << 2) | 0) >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP8[$0 | 0] = 0;
 if (std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0)) {
  if (std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0)) {
   std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0));
  }
  HEAP8[$0 | 0] = 1;
 }
 return $0;
}
function std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___unique_ptr_true_2c_20void__28std____2__locale__facet__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $1;
 std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release_____compressed_pair_std____2__locale__facet___2c_20std____2____default_init_tag__28std____2__locale__facet___2c_20std____2____default_init_tag___29($0, $2 + 12 | 0, $2 + 8 | 0);
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = HEAP32[std____2____wrap_iter_char_20const______wrap_iter_28char_20const__29($1 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0) >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2____compressed_pair_char__2c_20void_20_28__29_28void__29_____compressed_pair_char___2c_20void_20_28__29_28void__29__28char___2c_20void_20_28____29_28void__29_29($0, $1, $2) {
 std____2____compressed_pair_elem_char__2c_200_2c_20false_____compressed_pair_elem_char___2c_20void__28char___29($0, char___20std____2__forward_char____28std____2__remove_reference_char_____type__29($1));
 std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_void_20_28__29_28void__29_2c_20void__28void_20_28____29_28void__29_29($0 + 4 | 0, void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($2));
 return $0;
}
function std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____tuple_std____2___28anonymous_20namespace_29____fake_bind_2c_20false_2c_20false__28std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
 std____2____tuple_impl_std____2____tuple_indices_0ul__2c_20std____2___28anonymous_20namespace_29____fake_bind_______tuple_impl_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20std____2___28anonymous_20namespace_29____fake_bind__28std____2____tuple_indices_0ul__2c_20std____2____tuple_types_std____2___28anonymous_20namespace_29____fake_bind____2c_20std____2____tuple_indices___2c_20std____2____tuple_types___2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $1);
 return $0;
}
function fflush($0) {
 var $1 = 0, $2 = 0;
 label$1 : {
  if ($0) {
   if (HEAP32[$0 + 76 >> 2] <= -1) {
    return __fflush_unlocked($0);
   }
   $2 = __lockfile($0);
   $1 = __fflush_unlocked($0);
   if (!$2) {
    break label$1;
   }
   __unlockfile($0);
   return $1;
  }
  if (HEAP32[5386]) {
   $1 = fflush(HEAP32[5386]);
  }
  $0 = HEAP32[__ofl_lock() >> 2];
  if ($0) {
   while (1) {
    $2 = 0;
    if (HEAP32[$0 + 76 >> 2] >= 0) {
     $2 = __lockfile($0);
    }
    if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
     $1 = __fflush_unlocked($0) | $1;
    }
    if ($2) {
     __unlockfile($0);
    }
    $0 = HEAP32[$0 + 56 >> 2];
    if ($0) {
     continue;
    }
    break;
   }
  }
  __ofl_unlock();
 }
 return $1;
}
function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___back_insert_iterator_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___20std____2__addressof_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29($1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function neopt__IBinaryWriter__Write_28std____2__vector_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__2c_20std____2__allocator_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__20__20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, (HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0) / 12 | 0);
 $2 = HEAP32[$1 >> 2];
 if (($2 | 0) != HEAP32[$1 + 4 >> 2]) {
  while (1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, Math_imul($3, 12) + $2 | 0);
   $3 = $3 + 1 | 0;
   $2 = HEAP32[$1 >> 2];
   if ($3 >>> 0 < (HEAP32[$1 + 4 >> 2] - $2 | 0) / 12 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function std____2__enable_if__28__is_cpp17_forward_iterator_wchar_t____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_wchar_t____value_29_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____append_forward_unsafe_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2);
}
function wchar_t_20const__20std____2____num_get_wchar_t_____do_widen_p_wchar_t__28std____2__ios_base__2c_20wchar_t__29_20const($0, $1, $2) {
 var $3 = 0;
 $0 = global$0 - 16 | 0;
 $3 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $1);
 std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const(std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0 + 8 | 0), 13840, 13866, $2);
 std____2__locale___locale_28_29($0 + 8 | 0);
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 + 64 >> 2] = 2392;
 HEAP32[$0 >> 2] = 2352;
 HEAP32[$0 + 12 >> 2] = 2672;
 HEAP32[$0 + 8 >> 2] = 2372;
 if (HEAP8[$0 + 55 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 44 >> 2]);
 }
 $1 = $0 - -64 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 12 | 0);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($0, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 operator_20delete_28void__29($0);
}
function neopt__IBinaryReader__ReadUInt64_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($1, $0, 8);
 $0 = HEAP32[$1 >> 2];
 $3 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 $2 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
 HEAP32[$1 + 4 >> 2] = $0;
 operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 i64toi32_i32$HIGH_BITS = $2;
 return $3 | 0;
}
function std____2__init_am_pm_28_29() {
 var $0 = 0;
 label$1 : {
  if (HEAP8[26664] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(26664)) {
   break label$1;
  }
  $0 = 26640;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
   if (($0 | 0) != 26664) {
    continue;
   }
   break;
  }
  __cxa_guard_release(26664);
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26640, 19888);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(26652, 19891);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_alloc_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1) {
 std____2__remove_reference_std____2__allocator_wchar_t_____type___20std____2__move_std____2__allocator_wchar_t____28std____2__allocator_wchar_t___29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($1));
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0);
}
function std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 + 64 >> 2] = 2392;
 HEAP32[$0 >> 2] = 2352;
 HEAP32[$0 + 12 >> 2] = 2672;
 HEAP32[$0 + 8 >> 2] = 2372;
 if (HEAP8[$0 + 55 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 44 >> 2]);
 }
 $1 = $0 - -64 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 12 | 0);
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($0, 2404);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 return $0 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = HEAP32[std____2____wrap_iter_char______wrap_iter_28char__29($1 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0) >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2__enable_if__28_28std____2__integral_constant_bool_2c_20false___value_29_20___20_28__28__has_construct_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_backward_with_exception_guarantees_std____2__locale__facet___28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20bool__2c_20bool__2c_20bool___29($0, $1, $2, $3) {
 $2 = $2 - $1 | 0;
 $0 = HEAP32[$3 >> 2] - $2 | 0;
 HEAP32[$3 >> 2] = $0;
 if (($2 | 0) >= 1) {
  memcpy($0, $1, $2);
 }
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = global$0 - 16 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 + 8 >> 2] = $3 - $2;
 $3 = HEAP32[unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0 + 12 | 0, $0 + 8 | 0) >> 2];
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3 | 0;
}
function ungetc($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = -1;
 label$1 : {
  if (($0 | 0) == -1) {
   break label$1;
  }
  if (HEAP32[$1 + 76 >> 2] >= 0) {
   $4 = __lockfile($1);
  }
  label$3 : {
   $3 = HEAP32[$1 + 4 >> 2];
   label$4 : {
    if (!$3) {
     __toread($1);
     $3 = HEAP32[$1 + 4 >> 2];
     if (!$3) {
      break label$4;
     }
    }
    if ($3 >>> 0 > HEAP32[$1 + 44 >> 2] + -8 >>> 0) {
     break label$3;
    }
   }
   if (!$4) {
    break label$1;
   }
   __unlockfile($1);
   return -1;
  }
  $2 = $3 + -1 | 0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP8[$2 | 0] = $0;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -17;
  if ($4) {
   __unlockfile($1);
  }
  $2 = $0;
 }
 return $2;
}
function strlen($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 label$1 : {
  label$2 : {
   $1 = $0;
   if (!($1 & 3)) {
    break label$2;
   }
   if (!HEAPU8[$0 | 0]) {
    return 0;
   }
   while (1) {
    $1 = $1 + 1 | 0;
    if (!($1 & 3)) {
     break label$2;
    }
    if (HEAPU8[$1 | 0]) {
     continue;
    }
    break;
   }
   break label$1;
  }
  while (1) {
   $2 = $1;
   $1 = $1 + 4 | 0;
   $3 = HEAP32[$2 >> 2];
   if (!(($3 ^ -1) & $3 + -16843009 & -2139062144)) {
    continue;
   }
   break;
  }
  if (!($3 & 255)) {
   return $2 - $0 | 0;
  }
  while (1) {
   $3 = HEAPU8[$2 + 1 | 0];
   $1 = $2 + 1 | 0;
   $2 = $1;
   if ($3) {
    continue;
   }
   break;
  }
 }
 return $1 - $0 | 0;
}
function std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 + 60 >> 2] = 2936;
 HEAP32[$0 >> 2] = 2916;
 HEAP32[$0 + 8 >> 2] = 2672;
 if (HEAP8[$0 + 51 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 40 >> 2]);
 }
 $1 = $0 + 60 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 8 | 0);
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0, 2948);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 operator_20delete_28void__29($0);
}
function strtox($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 144 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 4 >> 2] = $0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 76 >> 2] = -1;
 HEAP32[$5 + 8 >> 2] = ($0 | 0) < 0 ? -1 : $0 + 2147483647 | 0;
 __shlim($5, 0, 0);
 $3 = __intscan($5, $2, 1, $3, $4);
 $4 = i64toi32_i32$HIGH_BITS;
 if ($1) {
  HEAP32[$1 >> 2] = ((HEAP32[$5 + 4 >> 2] + HEAP32[$5 + 120 >> 2] | 0) - HEAP32[$5 + 8 >> 2] | 0) + $0;
 }
 $0 = $5 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 i64toi32_i32$HIGH_BITS = $4;
 return $3;
}
function std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_201_2c_20false_____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20void__28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2____sso_allocator_std____2__locale__facet__2c_2028ul___20std____2__forward_std____2____sso_allocator_std____2__locale__facet__2c_2028ul____28std____2__remove_reference_std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____type__29($1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function void_20std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____execute___28std____2____tuple_indices___29($0) {
 decltype_28std____2__forward_std____2___28anonymous_20namespace_29____fake_bind__28fp_29_28_29_29_20std____2____invoke_std____2___28anonymous_20namespace_29____fake_bind__28std____2___28anonymous_20namespace_29____fake_bind___29(std____2__tuple_element_0ul_2c_20std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___type___20std____2__get_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind____28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind______29(HEAP32[$0 >> 2]));
}
function unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($2 + 8 | 0, $1, $0);
 $2 = $2 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $3 ? $1 : $0;
}
function unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($2 + 8 | 0, $0, $1);
 $2 = $2 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $3 ? $1 : $0;
}
function std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 label$1 : {
  while (1) {
   if (($3 | 0) != ($4 | 0)) {
    $0 = -1;
    if (($1 | 0) == ($2 | 0)) {
     break label$1;
    }
    $5 = HEAP32[$1 >> 2];
    $6 = HEAP32[$3 >> 2];
    if (($5 | 0) < ($6 | 0)) {
     break label$1;
    }
    if (($6 | 0) < ($5 | 0)) {
     return 1;
    } else {
     $3 = $3 + 4 | 0;
     $1 = $1 + 4 | 0;
     continue;
    }
   }
   break;
  }
  $0 = ($1 | 0) != ($2 | 0);
 }
 return $0 | 0;
}
function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5);
}
function std____2____libcpp_wcsnrtombs_l_28char__2c_20wchar_t_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 12 >> 2] = $5;
 $5 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($6 + 8 | 0, $6 + 12 | 0);
 $0 = wcsnrtombs($0, $1, $2, $3, $4);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($5);
 $1 = $6 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2____libcpp_mbsnrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 12 >> 2] = $5;
 $5 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($6 + 8 | 0, $6 + 12 | 0);
 $0 = mbsnrtowcs($0, $1, $2, $3, $4);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($5);
 $1 = $6 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 + 60 >> 2] = 2936;
 HEAP32[$0 >> 2] = 2916;
 HEAP32[$0 + 8 >> 2] = 2672;
 if (HEAP8[$0 + 51 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 40 >> 2]);
 }
 $1 = $0 + 60 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0 + 8 | 0);
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0, 2948);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
 return $0 | 0;
}
function std____2__enable_if__28__is_cpp17_forward_iterator_char____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_char____value_29_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_char___28char__2c_20char__29($0, $1, $2) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____append_forward_unsafe_char___28char__2c_20char__29($0, $1, $2);
}
function scalbn($0, $1) {
 label$1 : {
  if (($1 | 0) >= 1024) {
   $0 = $0 * 8.98846567431158e+307;
   if (($1 | 0) < 2047) {
    $1 = $1 + -1023 | 0;
    break label$1;
   }
   $0 = $0 * 8.98846567431158e+307;
   $1 = (($1 | 0) < 3069 ? $1 : 3069) + -2046 | 0;
   break label$1;
  }
  if (($1 | 0) > -1023) {
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  if (($1 | 0) > -2045) {
   $1 = $1 + 1022 | 0;
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  $1 = (($1 | 0) > -3066 ? $1 : -3066) + 2044 | 0;
 }
 $1 = $1 + 1023 << 20;
 wasm2js_scratch_store_i32(0, 0);
 wasm2js_scratch_store_i32(1, $1 | 0);
 return $0 * +wasm2js_scratch_load_f64();
}
function getenv($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $4 = strlen($0);
 label$1 : {
  label$2 : {
   if (!HEAP32[6306] | !HEAPU8[$0 | 0]) {
    break label$2;
   }
   if (strchr($0, 61)) {
    break label$2;
   }
   $1 = HEAP32[HEAP32[6306] >> 2];
   if (!$1) {
    break label$2;
   }
   while (1) {
    $2 = strncmp($0, $1, $4);
    $1 = HEAP32[6306];
    if (!$2) {
     $2 = HEAP32[($3 << 2) + $1 >> 2];
     $5 = $4 + $2 | 0;
     if (HEAPU8[$5 | 0] == 61) {
      break label$1;
     }
    }
    $3 = $3 + 1 | 0;
    $1 = HEAP32[($3 << 2) + $1 >> 2];
    if ($1) {
     continue;
    }
    break;
   }
  }
  return 0;
 }
 return $2 ? $5 + 1 | 0 : 0;
}
function std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 12 >> 2] = $2;
 HEAP32[$5 + 8 >> 2] = $4;
 $2 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5, $5 + 12 | 0);
 $0 = vsnprintf($0, $1, $3, HEAP32[$5 + 8 >> 2]);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($2);
 $1 = $5 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 label$1 : {
  while (1) {
   if (($3 | 0) != ($4 | 0)) {
    $0 = -1;
    if (($1 | 0) == ($2 | 0)) {
     break label$1;
    }
    $5 = HEAP8[$1 | 0];
    $6 = HEAP8[$3 | 0];
    if (($5 | 0) < ($6 | 0)) {
     break label$1;
    }
    if (($6 | 0) < ($5 | 0)) {
     return 1;
    } else {
     $3 = $3 + 1 | 0;
     $1 = $1 + 1 | 0;
     continue;
    }
   }
   break;
  }
  $0 = ($1 | 0) != ($2 | 0);
 }
 return $0 | 0;
}
function __stdio_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 label$2 : {
  if (!__wasi_syscall_ret(legalfunc$__wasi_fd_seek(HEAP32[$0 + 60 >> 2], $1, $2, $3 & 255, $4 + 8 | 0))) {
   $2 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 8 >> 2];
   break label$2;
  }
  HEAP32[$4 + 8 >> 2] = -1;
  HEAP32[$4 + 12 >> 2] = -1;
  $2 = -1;
  $1 = -1;
 }
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 i64toi32_i32$HIGH_BITS = $2;
 return $1 | 0;
}
function std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___reset_28std____2__locale__facet__29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release___first_28_29($0), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if ($1) {
  std____2___28anonymous_20namespace_29__release__operator_28_29_28std____2__locale__facet__29($1);
 }
}
function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0, $1, $2) {
 return std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_constexpr_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0, $1, $2);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1) {
 std____2__remove_reference_std____2__allocator_char_____type___20std____2__move_std____2__allocator_char____28std____2__allocator_char___29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($1));
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___vector_28unsigned_20long_29($0, $1) {
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vector_base_28_29($0);
 if ($1) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vallocate_28unsigned_20long_29($0, $1);
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_at_end_28unsigned_20long_29($0, $1);
 }
 return $0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20short__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20short__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20long__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20long__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20char__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20char__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20int__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20int__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____libcpp_mbsrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 12 >> 2] = $4;
 $4 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
 $0 = mbsrtowcs($0, $1, $2, $3);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($4);
 $1 = $5 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_signed_20char__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_signed_20char__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function neopt__IBinaryWriter__Write_28unsigned_20long_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1 >>> 8 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1 >>> 16 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1 >>> 24 | 0);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $2 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $2 >>> 8 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $2 >>> 16 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $2 >>> 24 | 0);
}
function std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP32[$4 + 8 >> 2] = $3;
 $1 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4, $4 + 12 | 0);
 $0 = vsscanf($0, $2, HEAP32[$4 + 8 >> 2]);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($1);
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___widen_28char_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 std____2__ios_base__getloc_28_29_20const($2 + 8 | 0, $0);
 $1 = std____2__ctype_char___widen_28char_29_20const(std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($2 + 8 | 0), $1);
 std____2__locale___locale_28_29($2 + 8 | 0);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function std____2____itoa____u32toa_28unsigned_20int_2c_20char__29($0, $1) {
 var $2 = 0, $3 = 0;
 if ($0 >>> 0 <= 99999999) {
  return char__20std____2____itoa__append8_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($1, $0);
 }
 $2 = ($0 >>> 0) / 1e8 | 0;
 $3 = char__20std____2____itoa__append2_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($1, $2);
 $0 = $0 - Math_imul($2, 1e8) | 0;
 $1 = ($0 >>> 0) / 1e4 | 0;
 return char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29($3, $1), $0 - Math_imul($1, 1e4) | 0);
}
function void_20std____2___28anonymous_20namespace_29__throw_helper_std__invalid_argument__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0) {
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 fiprintf(HEAP32[2072], 20362, $1);
 abort();
 abort();
}
function std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 12 >> 2] = $4;
 $4 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
 $0 = mbrtowc($0, $1, $2, $3);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($4);
 $1 = $5 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($0, $1, $2) {
 var $3 = 0;
 $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
 if ($3 >>> 0 < $1 >>> 0) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28unsigned_20long_2c_20char_29($0, $1 - $3 | 0, $2);
  return;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____erase_to_end_28unsigned_20long_29($0, $1);
}
function std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP32[$4 + 8 >> 2] = $3;
 $1 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4, $4 + 12 | 0);
 $0 = vasprintf($0, $2, HEAP32[$4 + 8 >> 2]);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($1);
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function void_20std____2___28anonymous_20namespace_29__throw_helper_std__out_of_range__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0) {
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 fiprintf(HEAP32[2072], 20362, $1);
 abort();
 abort();
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = HEAP32[std____2____wrap_iter_wchar_t_20const______wrap_iter_28wchar_t_20const__29($1 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29_20const($0)) >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20short_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 2, std____2__numeric_limits_unsigned_20short___min_28_29() & 65535, std____2__numeric_limits_unsigned_20short___max_28_29() & 65535);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__iterator_traits_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const____difference_type_20std____2____distance_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const___28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return ($1 - $0 | 0) / 12 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_double__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_double__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_signed_20char_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 1, std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24, std____2__numeric_limits_signed_20char___max_28_29() << 24 >> 24);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__to_chars_result_20std____2____to_chars_itoa_int__28char__2c_20char__2c_20int_2c_20std____2__integral_constant_bool_2c_20true__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = std____2__make_unsigned_int___type_20std____2____to_unsigned_int__28int_29($3);
 if (!(($1 | 0) == ($2 | 0) | ($3 | 0) > -1)) {
  HEAP8[$1 | 0] = 45;
  $1 = $1 + 1 | 0;
  $4 = unsigned_20int_20std____2____complement_unsigned_20int__28unsigned_20int_29($4);
 }
 std____2__to_chars_result_20std____2____to_chars_itoa_unsigned_20int__28char__2c_20char__2c_20unsigned_20int_2c_20std____2__integral_constant_bool_2c_20false__29($0, $1, $2, $4);
}
function void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_short__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_short__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_float__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_float__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function frexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $2;
 $2 = $2 >>> 20 & 2047;
 if (($2 | 0) != 2047) {
  if (!$2) {
   $3 = $1;
   if ($0 == 0) {
    $2 = 0;
   } else {
    $0 = frexp($0 * 0x10000000000000000, $1);
    $2 = HEAP32[$1 >> 2] + -64 | 0;
   }
   HEAP32[$3 >> 2] = $2;
   return $0;
  }
  HEAP32[$1 >> 2] = $2 + -1022;
  $2 = $4 & -2146435073 | 1071644672;
  wasm2js_scratch_store_i32(0, $3 | 0);
  wasm2js_scratch_store_i32(1, $2 | 0);
  $0 = +wasm2js_scratch_load_f64();
 }
 return $0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20char_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 1, std____2__numeric_limits_unsigned_20char___min_28_29() & 255, std____2__numeric_limits_unsigned_20char___max_28_29() & 255);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $1) {
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $1);
  return;
 }
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $1);
}
function void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_long__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_long__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_char__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_char__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 if ($3 & 2048) {
  HEAP8[$0 | 0] = 43;
  $0 = $0 + 1 | 0;
 }
 if ($3 & 512) {
  HEAP8[$0 | 0] = 35;
  $0 = $0 + 1 | 0;
 }
 while (1) {
  $4 = HEAPU8[$1 | 0];
  if ($4) {
   HEAP8[$0 | 0] = $4;
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 $1 = $3 & 74;
 $4 = 111;
 label$5 : {
  if (($1 | 0) == 64) {
   break label$5;
  }
  $4 = $3 & 16384 ? 88 : 120;
  if (($1 | 0) == 8) {
   break label$5;
  }
  $4 = $2 ? 100 : 117;
 }
 $1 = $4;
 HEAP8[$0 | 0] = $1;
}
function std____2____libcpp_mbrlen_l_28char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $3;
 $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
 $0 = mbrlen($0, $1, $2);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20long_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 4, std____2__numeric_limits_unsigned_20long___min_28_29() | 0, std____2__numeric_limits_unsigned_20long___max_28_29() | 0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_int__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_int__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = HEAP32[std____2____wrap_iter_char_20const______wrap_iter_28char_20const__29($1 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0)) >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2____libcpp_mbtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__locale_struct__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $3;
 $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
 $0 = mbtowc($0, $1, $2);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20int_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 4, std____2__numeric_limits_unsigned_20int___min_28_29() | 0, std____2__numeric_limits_unsigned_20int___max_28_29() | 0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __cxx_global_array_dtor_24($0) {
 $0 = $0 | 0;
 std____2____tree_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20std____2____map_value_compare_unsigned_20int_2c_20std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20std____2__less_unsigned_20int__2c_20true__2c_20std____2__allocator_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___20__20___destroy_28std____2____tree_node_std____2____value_type_unsigned_20int_2c_20Neo__SmartContract__InteropDescriptor___2c_20void____29(21992, HEAP32[5499]);
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputc_28wchar_t_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = HEAP32[$0 + 24 >> 2];
 if (($2 | 0) == HEAP32[$0 + 28 >> 2]) {
  return wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_wchar_t___to_int_type_28wchar_t_29($1), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0;
 }
 HEAP32[$0 + 24 >> 2] = $2 + 4;
 HEAP32[$2 >> 2] = $1;
 return std____2__char_traits_wchar_t___to_int_type_28wchar_t_29($1);
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___underflow_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 44 >> 2];
 $1 = HEAP32[$0 + 24 >> 2];
 if ($2 >>> 0 < $1 >>> 0) {
  HEAP32[$0 + 44 >> 2] = $1;
  $2 = $1;
 }
 $1 = -1;
 label$2 : {
  if (!(HEAPU8[$0 + 48 | 0] & 8)) {
   break label$2;
  }
  $3 = HEAP32[$0 + 16 >> 2];
  if ($3 >>> 0 < $2 >>> 0) {
   HEAP32[$0 + 16 >> 2] = $2;
   $3 = $2;
  }
  $0 = HEAP32[$0 + 12 >> 2];
  if ($0 >>> 0 >= $3 >>> 0) {
   break label$2;
  }
  $1 = HEAPU8[$0 | 0];
 }
 return $1 | 0;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0, $1, $2) {
 return std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_constexpr_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0, $1, $2);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___begin_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = HEAP32[std____2____wrap_iter_wchar_t______wrap_iter_28wchar_t__29($1 + 8 | 0, std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0)) >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function long_20double_20std____2____do_strtod_long_20double__28char_20const__2c_20char___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 strtold_l($3, $1, $2, std____2____cloc_28_29());
 $2 = HEAP32[$3 + 4 >> 2];
 $1 = HEAP32[$3 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 $2 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __shlim($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = $0;
 HEAP32[$3 + 112 >> 2] = $1;
 HEAP32[$3 + 116 >> 2] = $2;
 $5 = HEAP32[$3 + 8 >> 2];
 $6 = HEAP32[$3 + 4 >> 2];
 $3 = $5 - $6 | 0;
 $4 = $3 >> 31;
 $7 = $3;
 $8 = $4;
 $3 = $0;
 HEAP32[$3 + 120 >> 2] = $7;
 HEAP32[$3 + 124 >> 2] = $4;
 $4 = $2;
 label$1 : {
  if (!($1 | $4)) {
   break label$1;
  }
  $4 = $8;
  $3 = $2;
  if (($4 | 0) < ($3 | 0) ? 1 : ($4 | 0) <= ($3 | 0) ? $7 >>> 0 > $1 >>> 0 ? 0 : 1 : 0) {
   break label$1;
  }
  HEAP32[$0 + 104 >> 2] = $1 + $6;
  return;
 }
 HEAP32[$0 + 104 >> 2] = $5;
}
function std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
 $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 HEAP32[$0 + 36 >> 2] = $1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
}
function std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $3;
 $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
 $0 = wcrtomb($0, $1, $2);
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = HEAP32[std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if ($2) {
  FUNCTION_TABLE[HEAP32[std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29___second_28_29($0) >> 2]]($2);
 }
}
function __subtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0;
 $9 = global$0 - 16 | 0;
 $10 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $10;
 $10 = $8 ^ -2147483648;
 $8 = $6;
 $6 = $10;
 __addtf3($9, $1, $2, $3, $4, $5, $8, $7, $6);
 $8 = HEAP32[$9 + 4 >> 2];
 $6 = HEAP32[$9 >> 2];
 HEAP32[$0 >> 2] = $6;
 HEAP32[$0 + 4 >> 2] = $8;
 $6 = HEAP32[$9 + 12 >> 2];
 $8 = HEAP32[$9 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $8;
 HEAP32[$0 + 12 >> 2] = $6;
 $0 = $9 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29_20const($0) {
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29_20const($0);
 }
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29_20const($0);
}
function vasprintf($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$3 + 8 >> 2] = $2;
 $5 = -1;
 $2 = vsnprintf(0, 0, $1, $2);
 label$2 : {
  if (($2 | 0) < 0) {
   break label$2;
  }
  $4 = $2 + 1 | 0;
  $2 = dlmalloc($4);
  HEAP32[$0 >> 2] = $2;
  if (!$2) {
   break label$2;
  }
  $5 = vsnprintf($2, $4, $1, HEAP32[$3 + 12 >> 2]);
 }
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5;
}
function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___reset_28unsigned_20int__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = HEAP32[std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if ($2) {
  FUNCTION_TABLE[HEAP32[std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___second_28_29($0) >> 2]]($2);
 }
}
function void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_short_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 2, std____2__numeric_limits_short___min_28_29() << 16 >> 16, std____2__numeric_limits_short___max_28_29() << 16 >> 16);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
 $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
 HEAP32[$0 + 36 >> 2] = $1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
}
function std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____difference_type_20std____2____distance_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return ($1 - $0 | 0) / 12 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_char_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 1, std____2__numeric_limits_char___min_28_29() << 24 >> 24, std____2__numeric_limits_char___max_28_29() << 24 >> 24);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputc_28char_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = HEAP32[$0 + 24 >> 2];
 if (($2 | 0) == HEAP32[$0 + 28 >> 2]) {
  return wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_28char_29($1), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0;
 }
 HEAP32[$0 + 24 >> 2] = $2 + 1;
 HEAP8[$2 | 0] = $1;
 return std____2__char_traits_char___to_int_type_28char_29($1);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0) {
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_size_28_29_20const($0);
 }
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_size_28_29_20const($0);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $1) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
  return;
 }
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = HEAP32[std____2____wrap_iter_char______wrap_iter_28char__29($1 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0)) >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function __fflush_unlocked($0) {
 var $1 = 0, $2 = 0;
 label$1 : {
  if (HEAPU32[$0 + 20 >> 2] <= HEAPU32[$0 + 28 >> 2]) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
  if (HEAP32[$0 + 20 >> 2]) {
   break label$1;
  }
  return -1;
 }
 $1 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$0 + 8 >> 2];
 if ($1 >>> 0 < $2 >>> 0) {
  $1 = $1 - $2 | 0;
  FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $1 >> 31, 1) | 0;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 return 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0) {
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0);
 }
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0);
}
function neopt__IBinaryReader__ReadUInt32_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($1, $0, 4);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 HEAP32[$1 + 4 >> 2] = $0;
 operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_istream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 var $2 = 0;
 $2 = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ios_28_29($0 + 8 | 0);
 HEAP32[$0 >> 2] = 7288;
 HEAP32[$2 >> 2] = 7308;
 HEAP32[$0 + 4 >> 2] = 0;
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___init_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(HEAP32[1819] + $0 | 0, $1);
 return $0;
}
function void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_long_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 4, std____2__numeric_limits_long___min_28_29() | 0, std____2__numeric_limits_long___max_28_29() | 0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2, $3);
}
function dlrealloc($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 if (!$0) {
  return dlmalloc($1);
 }
 if ($1 >>> 0 >= 4294967232) {
  wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return 0;
 }
 $2 = try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8);
 if ($2) {
  return $2 + 8 | 0;
 }
 $2 = dlmalloc($1);
 if (!$2) {
  return 0;
 }
 $3 = HEAP32[$0 + -4 >> 2];
 $3 = ($3 & 3 ? -4 : -8) + ($3 & -8) | 0;
 memcpy($2, $0, $3 >>> 0 < $1 >>> 0 ? $3 : $1);
 dlfree($0);
 return $2;
}
function void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_int_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 4, std____2__numeric_limits_int___min_28_29() | 0, std____2__numeric_limits_int___max_28_29() | 0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__ctype_wchar_t___do_scan_not_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 label$1 : {
  while (1) {
   if (($2 | 0) == ($3 | 0)) {
    break label$1;
   }
   label$3 : {
    if (HEAPU32[$2 >> 2] > 127) {
     break label$3;
    }
    if (!(HEAPU16[std____2__ctype_char___classic_table_28_29() + (HEAP32[$2 >> 2] << 1) >> 1] & $1)) {
     break label$3;
    }
    $2 = $2 + 4 | 0;
    continue;
   }
   break;
  }
  $3 = $2;
 }
 return $3 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($0);
 }
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29_20const($0);
}
function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
 }
}
function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = HEAP32[std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if ($2) {
  FUNCTION_TABLE[HEAP32[std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___second_28_29($0) >> 2]]($2);
 }
}
function std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = strlen($1);
 $3 = operator_20new_28unsigned_20long_29($2 + 13 | 0);
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = $2;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = memcpy(std____2____refstring_imp___28anonymous_20namespace_29__data_from_rep_28std____2____refstring_imp___28anonymous_20namespace_29___Rep_base__29($3), $1, $2 + 1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function pad($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 256 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 if (!($4 & 73728 | ($2 | 0) <= ($3 | 0))) {
  $2 = $2 - $3 | 0;
  $3 = $2 >>> 0 < 256;
  memset($5, $1, $3 ? $2 : 256);
  if (!$3) {
   while (1) {
    out($0, $5, 256);
    $2 = $2 + -256 | 0;
    if ($2 >>> 0 > 255) {
     continue;
    }
    break;
   }
  }
  out($0, $5, $2);
 }
 $0 = $5 + 256 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____libcpp_mb_cur_max_l_28__locale_struct__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($1 + 8 | 0, $1 + 12 | 0);
 $2 = __ctype_get_mb_cur_max();
 std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function long_20const__20std____2__min_long_2c_20std____2____less_long_2c_20long__20__28long_20const__2c_20long_20const__2c_20std____2____less_long_2c_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = std____2____less_long_2c_20long___operator_28_29_28long_20const__2c_20long_20const__29_20const($2 + 8 | 0, $1, $0);
 $2 = $2 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $3 ? $1 : $0;
}
function bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___29($0, $1, $2) {
 return bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__29($0, $1, $2);
}
function void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___construct_std____2__locale__facet___28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29($0, $1) {
 void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_std____2__locale__facet___28std____2__integral_constant_bool_2c_20false__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29($0, $1);
}
function neopt__StringReader__Read_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = std____2__basic_istream_char_2c_20std____2__char_traits_char__20___get_28_29(HEAP32[$0 + 4 >> 2]);
 if (($0 | 0) <= 0) {
  HEAP32[$1 + 4 >> 2] = 3178;
  HEAP32[$1 >> 2] = 3173;
  iprintf(3084, $1);
  exit(1);
  abort();
 }
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 << 24 >> 24;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_alloc_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29($0, $1) {
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_alloc_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1);
}
function void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___destroy_std____2__locale__facet___28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29($0, $1) {
 void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destroy_std____2__locale__facet___28std____2__integral_constant_bool_2c_20false__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29($0, $1);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($0, $1) {
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1);
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($0);
 }
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_size_28_29_20const($0);
}
function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = HEAP32[std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if ($2) {
  FUNCTION_TABLE[HEAP32[std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_28_29($0) >> 2]]($2);
 }
}
function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 var $2 = 0;
 $2 = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ios_28_29($0 + 4 | 0);
 HEAP32[$0 >> 2] = 7384;
 HEAP32[$2 >> 2] = 7404;
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___init_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(HEAP32[1843] + $0 | 0, $1);
 return $0;
}
function std____2__enable_if_is_trivially_copy_assignable_wchar_t___value_2c_20wchar_t_20const____type_20std____2____unwrap_iter_wchar_t__28std____2____wrap_iter_wchar_t_20const___29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = std____2____wrap_iter_wchar_t_20const____base_28_29_20const($1 + 8 | 0);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___basic_istream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 var $2 = 0;
 $2 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___basic_ios_28_29($0 + 8 | 0);
 HEAP32[$0 >> 2] = 7240;
 HEAP32[$2 >> 2] = 7260;
 HEAP32[$0 + 4 >> 2] = 0;
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(HEAP32[1807] + $0 | 0, $1);
 return $0;
}
function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = HEAP32[$1 + 16 >> 2];
 if (!$0) {
  HEAP32[$1 + 36 >> 2] = 1;
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 16 >> 2] = $2;
  return;
 }
 label$2 : {
  if (($2 | 0) == ($0 | 0)) {
   if (HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP32[$1 + 24 >> 2] = $3;
   return;
  }
  HEAP8[$1 + 54 | 0] = 1;
  HEAP32[$1 + 24 >> 2] = 2;
  HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
 }
}
function int_20const__20std____2__max_int_2c_20std____2____less_int_2c_20int__20__28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($2 + 8 | 0, $0, $1);
 $2 = $2 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $3 ? $1 : $0;
}
function sbrk($0) {
 var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = emscripten_get_sbrk_ptr();
 $1 = HEAP32[$2 >> 2];
 $3 = $0 + 3 & -4;
 $0 = $1 + $3 | 0;
 label$1 : {
  if ($0 >>> 0 <= $1 >>> 0 ? ($3 | 0) >= 1 : 0) {
   break label$1;
  }
  if ($0 >>> 0 > __wasm_memory_size() << 16 >>> 0) {
   if (!emscripten_resize_heap($0 | 0)) {
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = $0;
  return $1;
 }
 wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return -1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0);
 }
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
}
function __cxa_guard_acquire($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_acquire_28_29(__cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($1, $0));
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___release_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release___first_28_29($0), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $1;
}
function strncmp($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if (!$2) {
  return 0;
 }
 $3 = HEAPU8[$0 | 0];
 label$2 : {
  if (!$3) {
   break label$2;
  }
  while (1) {
   label$4 : {
    $4 = HEAPU8[$1 | 0];
    if (($4 | 0) != ($3 | 0)) {
     break label$4;
    }
    $2 = $2 + -1 | 0;
    if (!$2 | !$4) {
     break label$4;
    }
    $1 = $1 + 1 | 0;
    $3 = HEAPU8[$0 + 1 | 0];
    $0 = $0 + 1 | 0;
    if ($3) {
     continue;
    }
    break label$2;
   }
   break;
  }
  $5 = $3;
 }
 return ($5 & 255) - HEAPU8[$1 | 0] | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____copy_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____copy_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1);
}
function std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $1, $2) {
 var $3 = 0;
 $2 = std____2__ios_base__flags_28_29_20const($2) & 176;
 if (($2 | 0) == 32) {
  return $1;
 }
 label$2 : {
  if (($2 | 0) != 16) {
   break label$2;
  }
  $3 = HEAPU8[$0 | 0];
  $2 = $3 + -43 | 0;
  if (!($2 >>> 0 > 2 | !($2 - 1))) {
   return $0 + 1 | 0;
  }
  if (($3 | 0) != 48 | ($1 - $0 | 0) < 2 | (HEAPU8[$0 + 1 | 0] | 32) != 120) {
   break label$2;
  }
  $0 = $0 + 2 | 0;
 }
 return $0;
}
function std____2__enable_if_is_trivially_copy_assignable_char___value_2c_20char_20const____type_20std____2____unwrap_iter_char__28std____2____wrap_iter_char_20const___29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = std____2____wrap_iter_char_20const____base_28_29_20const($1 + 8 | 0);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $6 = $0;
 $7 = $1;
 $1 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $5 = $4 >> 8;
  $1 = $5;
  if (!($4 & 1)) {
   break label$1;
  }
  $1 = HEAP32[HEAP32[$2 >> 2] + $5 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($6, $7, $2 + $1 | 0, $4 & 2 ? $3 : 2);
}
function __cxa_guard_release($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_release_28_29(__cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($1, $0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2____libcpp_refstring_____libcpp_refstring_28_29($0) {
 var $1 = 0;
 label$1 : {
  if (!std____2____libcpp_refstring____uses_refcount_28_29_20const($0)) {
   break label$1;
  }
  $1 = std____2____refstring_imp___28anonymous_20namespace_29__rep_from_data_28char_20const__29(HEAP32[$0 >> 2]);
  if ((int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29_1($1 + 8 | 0) | 0) > -1) {
   break label$1;
  }
  operator_20delete_28void__29($1);
 }
 return $0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $1) {
 return std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($0, $1, strlen($1));
}
function neopt__IBinaryReader__ReadUInt16_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($1, $0, 2);
 $0 = HEAP32[$1 >> 2];
 $2 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
 HEAP32[$1 + 4 >> 2] = $0;
 operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 var $2 = 0;
 $2 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___basic_ios_28_29($0 + 4 | 0);
 HEAP32[$0 >> 2] = 7336;
 HEAP32[$2 >> 2] = 7356;
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(HEAP32[1831] + $0 | 0, $1);
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1);
}
function __toread($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAPU8[$0 + 74 | 0];
 HEAP8[$0 + 74 | 0] = $1 | $1 + -1;
 if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
  FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1 & 4) {
  HEAP32[$0 >> 2] = $1 | 32;
  return -1;
 }
 $2 = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 48 >> 2] | 0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $2;
 return $1 << 27 >> 31;
}
function std____2__ctype_wchar_t___do_scan_is_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 while (1) {
  label$2 : {
   if (($2 | 0) != ($3 | 0)) {
    if (HEAPU32[$2 >> 2] > 127) {
     break label$2;
    }
    if (!(HEAPU16[std____2__ctype_char___classic_table_28_29() + (HEAP32[$2 >> 2] << 1) >> 1] & $1)) {
     break label$2;
    }
    $3 = $2;
   }
   return $3 | 0;
  }
  $2 = $2 + 4 | 0;
  continue;
 }
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1);
 return $0;
}
function bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___29($0, $1, $2) {
 return bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2);
}
function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 >> 2];
 label$1 : {
  if (!$2) {
   break label$1;
  }
  if (!std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29(std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputc_28wchar_t_29($2, $1), std____2__char_traits_wchar_t___eof_28_29())) {
   break label$1;
  }
  HEAP32[$0 >> 2] = 0;
 }
 return $0;
}
function strtold($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 strtox_1($3, $1, $2, 2);
 $2 = HEAP32[$3 + 4 >> 2];
 $1 = HEAP32[$3 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 $2 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__ctype_char___ctype_28unsigned_20short_20const__2c_20bool_2c_20unsigned_20long_29($0, $1, $2, $3) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 std____2__locale__facet__facet_28unsigned_20long_29($0, $3);
 std____2__ctype_base__ctype_base_28_29($0);
 HEAP8[$0 + 12 | 0] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 14148;
 if (!$1) {
  wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__ctype_char___classic_table_28_29(), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 }
 return $0;
}
function getc($0) {
 var $1 = 0;
 label$1 : {
  if (HEAP32[$0 + 76 >> 2] >= 0) {
   if (__lockfile($0)) {
    break label$1;
   }
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if ($1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
   HEAP32[$0 + 4 >> 2] = $1 + 1;
   return HEAPU8[$1 | 0];
  }
  return __uflow($0);
 }
 $1 = HEAP32[$0 + 4 >> 2];
 label$4 : {
  if ($1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
   HEAP32[$0 + 4 >> 2] = $1 + 1;
   $1 = HEAPU8[$1 | 0];
   break label$4;
  }
  $1 = __uflow($0);
 }
 __unlockfile($0);
 return $1;
}
function char__20std____2____itoa__append8_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 if ($1 >>> 0 <= 9999) {
  return char__20std____2____itoa__append4_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
 }
 $2 = ($1 >>> 0) / 1e4 | 0;
 return char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append4_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $2), $1 - Math_imul($2, 1e4) | 0);
}
function EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 __embind_register_native_and_builtin_types();
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function strtold_l($0, $1, $2, $3) {
 var $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 strtold($3, $1, $2);
 $1 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$3 >> 2];
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_cap_28unsigned_20long_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0), wasm2js_i32$1 = $1 | -2147483648, HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
}
function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $2 >>> 16 | 0;
 $5 = $0 >>> 16 | 0;
 $3 = (Math_imul($4, $5) + Math_imul($1, $2) | 0) + Math_imul($3, $0) | 0;
 $2 = $2 & 65535;
 $0 = $0 & 65535;
 $1 = Math_imul($2, $0);
 $2 = ($1 >>> 16 | 0) + Math_imul($2, $5) | 0;
 $3 = $3 + ($2 >>> 16 | 0) | 0;
 $2 = Math_imul($0, $4) + ($2 & 65535) | 0;
 i64toi32_i32$HIGH_BITS = $3 + ($2 >>> 16 | 0) | 0;
 return $1 & 65535 | $2 << 16;
}
function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_put_28unsigned_20long_29(26936, 1);
}
function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_get_28unsigned_20long_29(26920, 1);
}
function std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20short__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = 0;
   if (HEAPU32[$1 >> 2] <= 127) {
    $0 = HEAPU16[std____2__ctype_char___classic_table_28_29() + (HEAP32[$1 >> 2] << 1) >> 1];
   }
   HEAP16[$3 >> 1] = $0;
   $3 = $3 + 2 | 0;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___time_put_28unsigned_20long_29(26992, 1);
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___time_get_28unsigned_20long_29(26960, 1);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_short_size_28unsigned_20long_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0), wasm2js_i32$1 = $1, HEAP8[wasm2js_i32$0 + 11 | 0] = wasm2js_i32$1;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_size_28unsigned_20long_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
}
function std____2____wrap_iter_wchar_t_20const____operator__28long_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
 std____2____wrap_iter_wchar_t_20const____operator___28long_29($2 + 8 | 0, $1);
 $1 = HEAP32[$2 + 8 >> 2];
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $1) {
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1) ^ 1;
}
function wmemmove($0, $1, $2) {
 var $3 = 0;
 label$1 : {
  if ($0 - $1 >> 2 >>> 0 < $2 >>> 0) {
   while (1) {
    $2 = $2 + -1 | 0;
    $3 = $2 << 2;
    HEAP32[$3 + $0 >> 2] = HEAP32[$1 + $3 >> 2];
    if ($2) {
     continue;
    }
    break label$1;
   }
  }
  if (!$2) {
   break label$1;
  }
  $3 = $0;
  while (1) {
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
   $3 = $3 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____compressed_pair_elem_void_20_28__29_28void__29_2c_20void__28void_20_28____29_28void__29_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $1) {
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1);
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___num_put_28unsigned_20long_29(26872, 1);
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___num_get_28unsigned_20long_29(26856, 1);
}
function std____2____compressed_pair_elem_std____2__locale__facet__2c_200_2c_20false_____compressed_pair_elem_std____2__locale__facet___2c_20void__28std____2__locale__facet___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[std____2__locale__facet___20std____2__forward_std____2__locale__facet____28std____2__remove_reference_std____2__locale__facet_____type__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function std____2____wrap_iter_char_20const____operator__28long_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
 std____2____wrap_iter_char_20const____operator___28long_29($2 + 8 | 0, $1);
 $1 = HEAP32[$2 + 8 >> 2];
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0) {
 var $1 = 0;
 $1 = 1;
 if (std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0)) {
  $1 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_cap_28_29_20const($0) + -1 | 0;
 }
 return $1;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____zero_28_29($0) {
 var $1 = 0;
 $1 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0);
 $0 = 0;
 while (1) {
  if (($0 | 0) != 3) {
   HEAP32[($0 << 2) + $1 >> 2] = 0;
   $0 = $0 + 1 | 0;
   continue;
  }
  break;
 }
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_long_pointer_28wchar_t__29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), wasm2js_i32$1 = $1 | -2147483648, HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
}
function neopt__StringReader__Read_28char__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 if ($3) {
  while (1) {
   wasm2js_i32$0 = ($2 + $4 | 0) + $1 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0) | 0, HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $4 = $4 + 1 | 0;
   if (($4 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 return $3 | 0;
}
function void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_float(emscripten__internal__TypeID_double_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 8);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_float(emscripten__internal__TypeID_float_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 4);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__locale____imp__has_facet_28long_29_20const($0, $1) {
 var $2 = 0;
 $0 = $0 + 16 | 0;
 if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($0) >>> 0 > $1 >>> 0) {
  $2 = HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) >> 2] != 0;
 }
 return $2;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = -1;
 label$1 : {
  if (!std____2____libcpp_mbtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__locale_struct__29(0, 0, 4, HEAP32[$0 + 8 >> 2])) {
   $0 = HEAP32[$0 + 8 >> 2];
   if ($0) {
    break label$1;
   }
   $1 = 1;
  }
  return $1 | 0;
 }
 return (std____2____libcpp_mb_cur_max_l_28__locale_struct__29($0) | 0) == 1 | 0;
}
function neopt__IBinaryWriter__Write_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$1 >> 2];
 if (($2 | 0) != HEAP32[$1 + 4 >> 2]) {
  while (1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, HEAPU8[$2 + $3 | 0]);
   $3 = $3 + 1 | 0;
   $2 = HEAP32[$1 >> 2];
   if ($3 >>> 0 < HEAP32[$1 + 4 >> 2] - $2 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function std____2____wrap_iter_wchar_t____operator__28long_29_20const_1($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
 std____2____wrap_iter_wchar_t____operator___28long_29($2 + 8 | 0, $1);
 $1 = HEAP32[$2 + 8 >> 2];
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function __uflow($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $2 = -1;
 label$2 : {
  if (__toread($0)) {
   break label$2;
  }
  if ((FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, $1 + 15 | 0, 1) | 0) != 1) {
   break label$2;
  }
  $2 = HEAPU8[$1 + 15 | 0];
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  if (!std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29(std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sgetc_28_29($1), std____2__char_traits_wchar_t___eof_28_29())) {
   return !HEAP32[$0 >> 2];
  }
  HEAP32[$0 >> 2] = 0;
 }
 return 1;
}
function store_int($0, $1, $2, $3) {
 label$1 : {
  if (!$0) {
   break label$1;
  }
  $1 = $1 + 2 | 0;
  if ($1 >>> 0 > 5) {
   break label$1;
  }
  label$2 : {
   switch ($1 - 1 | 0) {
   default:
    HEAP8[$0 | 0] = $2;
    return;
   case 0:
    HEAP16[$0 >> 1] = $2;
    return;
   case 1:
   case 2:
    HEAP32[$0 >> 2] = $2;
    return;
   case 3:
    break label$1;
   case 4:
    break label$2;
   }
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $3;
 }
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($0) {
 var $1 = 0;
 label$1 : {
  if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__char_traits_char___eof_28_29(), HEAP32[$0 + 76 >> 2])) {
   $1 = HEAP32[$0 + 76 >> 2];
   break label$1;
  }
  $1 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___widen_28char_29_20const($0, 32);
  HEAP32[$0 + 76 >> 2] = $1;
 }
 return $1 << 24 >> 24;
}
function char__20std____2____itoa__append4_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 if ($1 >>> 0 <= 99) {
  return char__20std____2____itoa__append2_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
 }
 if ($1 >>> 0 <= 999) {
  return char__20std____2____itoa__append3_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
 }
 return char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
}
function std____2____wrap_iter_char____operator__28long_29_20const_1($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
 std____2____wrap_iter_char____operator___28long_29($2 + 8 | 0, $1);
 $1 = HEAP32[$2 + 8 >> 2];
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), wasm2js_i32$1 = $1, HEAP8[wasm2js_i32$0 + 11 | 0] = wasm2js_i32$1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
}
function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
 }
}
function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_put_28unsigned_20long_29(26928, 1);
}
function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_get_28unsigned_20long_29(26912, 1);
}
function void_20std____2____reverse_unsigned_20int___28unsigned_20int__2c_20unsigned_20int__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  while (1) {
   $1 = $1 + -4 | 0;
   if ($0 >>> 0 >= $1 >>> 0) {
    break label$1;
   }
   void_20std____2__iter_swap_unsigned_20int__2c_20unsigned_20int___28unsigned_20int__2c_20unsigned_20int__29($0, $1);
   $0 = $0 + 4 | 0;
   continue;
  }
 }
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 >> 2];
 label$1 : {
  if (!$2) {
   break label$1;
  }
  if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputc_28char_29($2, $1), std____2__char_traits_char___eof_28_29())) {
   break label$1;
  }
  HEAP32[$0 >> 2] = 0;
 }
 return $0;
}
function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___time_put_28unsigned_20long_29(26976, 1);
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___time_get_28unsigned_20long_29(26944, 1);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($0) {
 var $1 = 0;
 $1 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0);
 $0 = 0;
 while (1) {
  if (($0 | 0) != 3) {
   HEAP32[($0 << 2) + $1 >> 2] = 0;
   $0 = $0 + 1 | 0;
   continue;
  }
  break;
 }
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___uflow_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == (std____2__char_traits_wchar_t___eof_28_29() | 0)) {
  return std____2__char_traits_wchar_t___eof_28_29() | 0;
 }
 $1 = HEAP32[$0 + 12 >> 2];
 HEAP32[$0 + 12 >> 2] = $1 + 4;
 return std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(HEAP32[$1 >> 2]) | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = 1;
 if ($0 >>> 0 >= 2) {
  $0 = unsigned_20long_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____align_it_4ul__28unsigned_20long_29($0 + 1 | 0);
  $1 = $0;
  $0 = $0 + -1 | 0;
  $1 = ($0 | 0) == 2 ? $1 : $0;
 }
 return $1;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20____vector_28_29($0) {
 std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_delete_28_29_20const($0);
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20______vector_base_28_29($0);
 return $0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___num_put_28unsigned_20long_29(26864, 1);
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___num_get_28unsigned_20long_29(26848, 1);
}
function bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $1) {
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1) ^ 1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0) {
 var $1 = 0;
 $1 = 10;
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) + -1 | 0;
 }
 return $1;
}
function bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $1) {
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1);
}
function vsscanf($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 144 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $3 = memset($3, 0, 144);
 HEAP32[$3 + 76 >> 2] = -1;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 32 >> 2] = 162;
 HEAP32[$3 + 84 >> 2] = $0;
 $0 = vfscanf($3, $1, $2);
 $1 = $3 + 144 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20____ConstructTransaction___ConstructTransaction_28std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___2c_20unsigned_20long_29($0, $1, $2) {
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = ($2 << 2) + $1;
 return $0;
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return std____2__utf8_to_utf16_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $4, 1114111, 0) | 0;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___ostreambuf_iterator_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___istreambuf_iterator_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return std____2__utf8_to_ucs4_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $4, 1114111, 0) | 0;
}
function std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___operator__28wchar_t___29($0, $1) {
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29(HEAP32[$0 >> 2], HEAP32[std____2__remove_reference_wchar_t____type___20std____2__move_wchar_t___28wchar_t__29($1) >> 2]);
 return $0;
}
function neopt__IBinaryReader__ReadVarBytes_28int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
 wasm2js_i32$1 = $0, wasm2js_i32$2 = $1, wasm2js_i32$3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1, $2) | 0, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 12 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
}
function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___release_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29($0), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $1;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29_20const($0) {
 return std____2__pointer_traits_wchar_t_20const____pointer_to_28wchar_t_20const__29(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0));
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1) {
 return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($0) ^ std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($1) ^ 1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = 10;
 if ($0 >>> 0 >= 11) {
  $0 = unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____align_it_16ul__28unsigned_20long_29($0 + 1 | 0);
  $1 = $0;
  $0 = $0 + -1 | 0;
  $1 = ($0 | 0) == 11 ? $1 : $0;
 }
 return $1;
}
function std____2__messages_wchar_t___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $1 = catopen(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($1), 1);
 return (($1 | 0) == -1 ? -1 : $1 >>> 1 | 0) | 0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28int_29($0, $1, $2) {
 std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____proxy____proxy_28wchar_t_2c_20std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29(HEAP32[$1 >> 2]), HEAP32[$1 >> 2]);
}
function std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $1 = catopen(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($1), 1);
 return (($1 | 0) == -1 ? -1 : $1 >>> 1 | 0) | 0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___uflow_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == (std____2__char_traits_char___eof_28_29() | 0)) {
  return std____2__char_traits_char___eof_28_29() | 0;
 }
 $1 = HEAP32[$0 + 12 >> 2];
 HEAP32[$0 + 12 >> 2] = $1 + 1;
 return std____2__char_traits_char___to_int_type_28char_29(HEAP8[$1 | 0]) | 0;
}
function std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___max_size_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20const__29($0) {
 return std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____max_size_28std____2__integral_constant_bool_2c_20true__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20const__29($0);
}
function std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = HEAP32[$1 >> 2];
   if ($0 >>> 0 <= 127) {
    $0 = HEAP32[std____2__ctype_char_____classic_upper_table_28_29() + (HEAP32[$1 >> 2] << 2) >> 2];
   }
   HEAP32[$1 >> 2] = $0;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = HEAP32[$1 >> 2];
   if ($0 >>> 0 <= 127) {
    $0 = HEAP32[std____2__ctype_char_____classic_lower_table_28_29() + (HEAP32[$1 >> 2] << 2) >> 2];
   }
   HEAP32[$1 >> 2] = $0;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2____compressed_pair_elem_unsigned_20char__2c_200_2c_20false_____compressed_pair_elem_unsigned_20char___2c_20void__28unsigned_20char___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[unsigned_20char___20std____2__forward_unsigned_20char____28std____2__remove_reference_unsigned_20char_____type__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function neopt__BinaryWriter___BinaryWriter_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 4532;
 label$1 : {
  if (!HEAPU8[$0 + 12 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 8 >> 2];
  if (!$1) {
   break label$1;
  }
  $2 = HEAP32[$1 >> 2];
  if ($2) {
   HEAP32[$1 + 4 >> 2] = $2;
   operator_20delete_28void__29($2);
  }
  operator_20delete_28void__29($1);
 }
 HEAP32[$0 + 8 >> 2] = 0;
 return $0 | 0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetc_28_29($1), std____2__char_traits_char___eof_28_29())) {
   return !HEAP32[$0 >> 2];
  }
  HEAP32[$0 >> 2] = 0;
 }
 return 1;
}
function std____2____time_get_c_storage_wchar_t_____x_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25580] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25580)) {
   break label$1;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29(25568, 14392);
  __cxa_guard_release(25580);
 }
 return 25568;
}
function std____2____time_get_c_storage_wchar_t_____r_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25676] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25676)) {
   break label$1;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29(25664, 14596);
  __cxa_guard_release(25676);
 }
 return 25664;
}
function std____2____time_get_c_storage_wchar_t_____c_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25644] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25644)) {
   break label$1;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29(25632, 14500);
  __cxa_guard_release(25644);
 }
 return 25632;
}
function std____2____time_get_c_storage_wchar_t_____X_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25612] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25612)) {
   break label$1;
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29(25600, 14440);
  __cxa_guard_release(25612);
 }
 return 25600;
}
function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $7 = HEAP32[$0 + 4 >> 2];
 $6 = $7 >> 8;
 $0 = HEAP32[$0 >> 2];
 $6 = $7 & 1 ? HEAP32[HEAP32[$3 >> 2] + $6 >> 2] : $6;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $6 + $3 | 0, $7 & 2 ? $4 : 2, $5);
}
function std____2__DoIOSInit___DoIOSInit_28_29($0) {
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(24288);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29(24372);
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(24624);
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29(24708);
 return $0;
}
function neopt__BinaryReader___BinaryReader_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 3412;
 label$1 : {
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if (!$1) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
 }
 $1 = HEAP32[$0 + 16 >> 2];
 if ($1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
 }
 operator_20delete_28void__29($0);
}
function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___release_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29($0), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $1;
}
function std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____compressed_pair_elem_unsigned_20int___2c_20void__28unsigned_20int___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[unsigned_20int___20std____2__forward_unsigned_20int____28std____2__remove_reference_unsigned_20int_____type__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function neopt__BinaryWriter___BinaryWriter_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 4532;
 label$1 : {
  if (!HEAPU8[$0 + 12 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 8 >> 2];
  if (!$1) {
   break label$1;
  }
  $2 = HEAP32[$1 >> 2];
  if ($2) {
   HEAP32[$1 + 4 >> 2] = $2;
   operator_20delete_28void__29($2);
  }
  operator_20delete_28void__29($1);
 }
 operator_20delete_28void__29($0);
}
function strtof($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0);
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 strtox_1($2, $0, $1, 0);
 $4 = __trunctfsf2(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28int_29($0, $1, $2) {
 std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____proxy____proxy_28char_2c_20std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29(HEAP32[$1 >> 2]) << 24 >> 24, HEAP32[$1 >> 2]);
}
function void_20std____2__locale____imp__install_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25380));
}
function void_20std____2__locale____imp__install_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25364));
}
function void_20std____2__locale____imp__install_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25316));
}
function void_20std____2__locale____imp__install_std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25300));
}
function std____2__enable_if__28is_same_std____2__remove_const_wchar_t_20const___type_2c_20wchar_t___value_29_20___20_28is_trivially_copy_assignable_wchar_t___value_29_2c_20wchar_t____type_20std____2____copy_wchar_t_20const_2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t__29($0, $1, $2) {
 var $3 = 0;
 $1 = $1 - $0 | 0;
 $3 = $1 >> 2;
 if ($1) {
  memmove($2, $0, $1);
 }
 return ($3 << 2) + $2 | 0;
}
function std____2____wrap_iter_wchar_t_20const______wrap_iter_wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2__enable_if_is_convertible_wchar_t__2c_20wchar_t_20const____value_2c_20void___type__29($0, $1, $2) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2____wrap_iter_wchar_t____base_28_29_20const($1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function void_20std____2__locale____imp__install_std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25284));
}
function void_20std____2__locale____imp__install_std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25268));
}
function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___init_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 std____2__ios_base__init_28void__29($0, $1);
 HEAP32[$0 + 72 >> 2] = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__char_traits_wchar_t___eof_28_29(), HEAP32[wasm2js_i32$0 + 76 >> 2] = wasm2js_i32$1;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1) {
 return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($0) ^ std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($1) ^ 1;
}
function std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = HEAP8[$1 | 0];
   if (($0 | 0) >= 0) {
    $0 = HEAP32[std____2__ctype_char_____classic_upper_table_28_29() + (HEAP8[$1 | 0] << 2) >> 2];
   }
   HEAP8[$1 | 0] = $0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = HEAP8[$1 | 0];
   if (($0 | 0) >= 0) {
    $0 = HEAP32[std____2__ctype_char_____classic_lower_table_28_29() + (HEAP8[$1 | 0] << 2) >> 2];
   }
   HEAP8[$1 | 0] = $0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___release_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29($0), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29_20const($0) {
 return std____2__pointer_traits_char_20const____pointer_to_28char_20const__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0));
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______destruct_at_end_28std____2__locale__facet___29($0, $1) {
 std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______destruct_at_end_28std____2__locale__facet___2c_20std____2__integral_constant_bool_2c_20false__29($0, $1);
}
function std____2____time_get_c_storage_char_____x_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25564] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25564)) {
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29(25552, 14380);
  __cxa_guard_release(25564);
 }
 return 25552;
}
function std____2____time_get_c_storage_char_____r_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25660] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25660)) {
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29(25648, 14584);
  __cxa_guard_release(25660);
 }
 return 25648;
}
function std____2____time_get_c_storage_char_____c_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25628] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25628)) {
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29(25616, 14476);
  __cxa_guard_release(25628);
 }
 return 25616;
}
function std____2____time_get_c_storage_char_____X_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25596] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25596)) {
   break label$1;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29(25584, 14428);
  __cxa_guard_release(25596);
 }
 return 25584;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_pointer_28_29($0) {
 return std____2__pointer_traits_wchar_t____pointer_to_28wchar_t__29(std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0));
}
function void_20std____2____reverse_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  while (1) {
   $1 = $1 + -4 | 0;
   if ($0 >>> 0 >= $1 >>> 0) {
    break label$1;
   }
   void_20std____2__iter_swap_wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__29($0, $1);
   $0 = $0 + 4 | 0;
   continue;
  }
 }
}
function strtod($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 strtox_1($2, $0, $1, 1);
 $4 = __trunctfdf2(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4;
}
function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____get_28_29_20const($0);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___max_size_28_29_20const($0) {
 return std____2__allocator_traits_std____2__allocator_wchar_t__20___max_size_28std____2__allocator_wchar_t__20const__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29_20const($0)) + -16 | 0;
}
function std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = HEAP32[$1 >> 2];
   HEAP8[$4 | 0] = $0 >>> 0 < 128 ? $0 : $3;
   $4 = $4 + 1 | 0;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_wchar_t__20const__2c_20void__28std____2__allocator_wchar_t__20const__29($0, $1) {
 std____2__allocator_wchar_t__20const__20std____2__forward_std____2__allocator_wchar_t__20const___28std____2__remove_reference_std____2__allocator_wchar_t__20const____type__29($1);
 return $0;
}
function neopt__BinaryReader___BinaryReader_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 3412;
 label$1 : {
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if (!$1) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
 }
 $1 = HEAP32[$0 + 16 >> 2];
 if ($1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
 }
 return $0 | 0;
}
function std____2__tuple_element_0ul_2c_20std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___type___20std____2__get_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind____28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind______29($0) {
 return std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false___get_28_29($0);
}
function void_20std____2__locale____imp__install_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25372));
}
function void_20std____2__locale____imp__install_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25356));
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__codecvt_base__codecvt_base_28_29($0);
 HEAP32[$0 >> 2] = 14200;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2____cloc_28_29(), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 return $0;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 std____2__ios_base__init_28void__29($0, $1);
 HEAP32[$0 + 72 >> 2] = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__char_traits_char___eof_28_29(), HEAP32[wasm2js_i32$0 + 76 >> 2] = wasm2js_i32$1;
}
function void_20std____2__locale____imp__install_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25308));
}
function void_20std____2__locale____imp__install_std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25292));
}
function std____2____wrap_iter_char_20const______wrap_iter_char___28std____2____wrap_iter_char___20const__2c_20std____2__enable_if_is_convertible_char__2c_20char_20const____value_2c_20void___type__29($0, $1, $2) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2____wrap_iter_char____base_28_29_20const($1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 $5 = $6 >> 8;
 $0 = HEAP32[$0 >> 2];
 $5 = $6 & 1 ? HEAP32[HEAP32[$2 >> 2] + $5 >> 2] : $5;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $5 + $2 | 0, $6 & 2 ? $3 : 2, $4);
}
function void_20std____2__locale____imp__install_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25276));
}
function void_20std____2__locale____imp__install_std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25260));
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringbuf_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 2672;
 if (HEAP8[$0 + 43 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 32 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
 operator_20delete_28void__29($0);
}
function __getTypeName($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = __strdup(std__type_info__name_28_29_20const(HEAP32[$1 + 12 >> 2]));
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function strcmp($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAPU8[$0 | 0];
 $3 = HEAPU8[$1 | 0];
 label$1 : {
  if (!$2 | ($2 | 0) != ($3 | 0)) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$1 + 1 | 0];
   $2 = HEAPU8[$0 + 1 | 0];
   if (!$2) {
    break label$1;
   }
   $1 = $1 + 1 | 0;
   $0 = $0 + 1 | 0;
   if (($2 | 0) == ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 return $2 - $3 | 0;
}
function std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   $0 = HEAP8[$1 | 0];
   HEAP8[$4 | 0] = ($0 | 0) > -1 ? $0 : $3;
   $4 = $4 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____get_28_29($0);
}
function unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
 return unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1);
}
function unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
 return unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___assign_28wchar_t_20const__29($0, $1) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___assign_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_wchar_t___length_28wchar_t_20const__29($1));
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_cap_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0) + 8 >> 2] & 2147483647;
}
function void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  while (1) {
   $1 = $1 + -1 | 0;
   if ($0 >>> 0 >= $1 >>> 0) {
    break label$1;
   }
   void_20std____2__iter_swap_char__2c_20char___28char__2c_20char__29($0, $1);
   $0 = $0 + 1 | 0;
   continue;
  }
 }
}
function std____2__locale____imp__use_facet_28long_29_20const($0, $1) {
 if (!std____2__locale____imp__has_facet_28long_29_20const($0, $1)) {
  std____2____throw_bad_cast_28_29();
  abort();
 }
 return HEAP32[std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 16 | 0, $1) >> 2];
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul______ConstructTransaction___ConstructTransaction_28std____2__locale__facet____2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 $3 = HEAP32[$1 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = ($2 << 2) + $3;
 return $0;
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29_20const($0);
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_char__20const__2c_20void__28std____2__allocator_char__20const__29($0, $1) {
 std____2__allocator_char__20const__20std____2__forward_std____2__allocator_char__20const___28std____2__remove_reference_std____2__allocator_char__20const____type__29($1);
 return $0;
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$7 >> 2] = $5;
 return 3;
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$7 >> 2] = $5;
 return 3;
}
function std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29($0, $1, $2) {
 std____2____sso_allocator_std____2__locale__facet__2c_2028ul___deallocate_28std____2__locale__facet___2c_20unsigned_20long_29($0, $1, $2);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0) {
 return std____2__pointer_traits_char____pointer_to_28char__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0));
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) {
 return std____2__allocator_traits_std____2__allocator_char__20___max_size_28std____2__allocator_char__20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($0)) + -16 | 0;
}
function std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____compressed_pair_elem_wchar_t___2c_20void__28wchar_t___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[wchar_t___20std____2__forward_wchar_t____28std____2__remove_reference_wchar_t_____type__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function fwrite($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = Math_imul($1, $2);
 label$1 : {
  if (HEAP32[$3 + 76 >> 2] <= -1) {
   $0 = __fwritex($0, $4, $3);
   break label$1;
  }
  $5 = __lockfile($3);
  $0 = __fwritex($0, $4, $3);
  if (!$5) {
   break label$1;
  }
  __unlockfile($3);
 }
 if (($0 | 0) == ($4 | 0)) {
  return $1 ? $2 : 0;
 }
 return ($0 >>> 0) / ($1 >>> 0) | 0;
}
function emscripten__internal__TypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__20___get_28_29();
}
function __towrite($0) {
 var $1 = 0;
 $1 = HEAPU8[$0 + 74 | 0];
 HEAP8[$0 + 74 | 0] = $1 | $1 + -1;
 $1 = HEAP32[$0 >> 2];
 if ($1 & 8) {
  HEAP32[$0 >> 2] = $1 | 32;
  return -1;
 }
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $1 = HEAP32[$0 + 44 >> 2];
 HEAP32[$0 + 28 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 48 >> 2] + $1;
 return 0;
}
function std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_wchar_t_20const__2c_20void__28wchar_t_20const__2c_20wchar_t_20const__29($0, $2, $3);
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringbuf_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 2672;
 if (HEAP8[$0 + 43 | 0] <= -1) {
  operator_20delete_28void__29(HEAP32[$0 + 32 >> 2]);
 }
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
 return $0 | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_short_size_28_29_20const($0) {
 return HEAPU8[std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0) + 11 | 0];
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_size_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0) + 4 >> 2];
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0) >> 2];
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___time_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 $1 = std____2____time_get_c_storage_wchar_t_____time_get_c_storage_28_29($0 + 8 | 0);
 HEAP32[$0 >> 2] = 16936;
 HEAP32[$1 >> 2] = 16984;
 return $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____is_long_28_29_20const($0) {
 return HEAP8[std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29_20const($0) + 11 | 0] < 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___20std____2__addressof_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29($0) {
 return $0;
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29($0);
}
function std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (!(($1 | 0) == ($2 | 0))) {
   $3 = HEAP32[$1 >> 2] + ($3 << 4) | 0;
   $0 = $3 & -268435456;
   $3 = ($0 >>> 24 | $0) ^ $3;
   $1 = $1 + 4 | 0;
   continue;
  }
  break;
 }
 return $3 | 0;
}
function std____2____cloc_28_29() {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 label$1 : {
  if (HEAP8[25408] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25408)) {
   break label$1;
  }
  wasm2js_i32$0 = 25404, wasm2js_i32$1 = __newlocale(2147483647, 14117, 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  __cxa_guard_release(25408);
 }
 return HEAP32[6351];
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 25276);
}
function memcmp($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$0 | 0];
   $4 = HEAPU8[$1 | 0];
   if (($3 | 0) == ($4 | 0)) {
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue;
    }
    break label$1;
   }
   break;
  }
  $5 = $3 - $4 | 0;
 }
 return $5;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) + 8 >> 2] & 2147483647;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 12 >> 2];
 if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
 }
 HEAP32[$0 + 12 >> 2] = $1 + 4;
 return std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(HEAP32[$1 >> 2]);
}
function wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
 $2 = HEAP32[$2 >> 2];
 while (1) {
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    if (HEAP32[$0 >> 2] != ($2 | 0)) {
     break label$2;
    }
    $1 = $0;
   }
   return $1;
  }
  $0 = $0 + 4 | 0;
  continue;
 }
}
function decltype_28_28fp_base_28_29_29_20__20_28fp0_base_28_29_29_29_20std____2__operator__wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($0, $1) {
 return std____2____wrap_iter_wchar_t_20const____base_28_29_20const($0) - std____2____wrap_iter_wchar_t____base_28_29_20const($1) >> 2;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($0) {
 return wchar_t_20const__20std____2____to_address_wchar_t_20const__28wchar_t_20const__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29_20const($0));
}
function std____2__iterator_traits_wchar_t_20const____difference_type_20std____2__distance_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($0, $1) {
 return std____2__iterator_traits_wchar_t_20const____difference_type_20std____2____distance_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function std____2____compressed_pair_elem_char__2c_200_2c_20false_____compressed_pair_elem_char___2c_20void__28char___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[char___20std____2__forward_char____28std____2__remove_reference_char_____type__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__29($0, $1) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_char___length_28char_20const__29($1));
}



function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___time_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 $1 = std____2____time_get_c_storage_char_____time_get_c_storage_28_29($0 + 8 | 0);
 HEAP32[$0 >> 2] = 16672;
 HEAP32[$1 >> 2] = 16720;
 return $0;
}
function std____2__numpunct_wchar_t___numpunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 HEAP32[$0 + 8 >> 2] = 46;
 HEAP32[$0 + 12 >> 2] = 44;
 HEAP32[$0 >> 2] = 14288;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 16 | 0);
 return $0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4) | 0;
}
function std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 while (1) {
  if (!(($1 | 0) == ($2 | 0))) {
   $3 = HEAP8[$1 | 0] + ($3 << 4) | 0;
   $0 = $3 & -268435456;
   $3 = ($0 >>> 24 | $0) ^ $3;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $3 | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_long_pointer_28_29($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___first_28_29($0) >> 2];
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__29($0, $1) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__2c_20unsigned_20long_29($0, $1, std____2__char_traits_char___length_28char_20const__29($1));
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $1, $2, $3, $4) | 0;
}
function bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($0, $1) {
 return bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29_1($0, $1) ^ 1;
}
function std____2__enable_if__28is_same_std____2__remove_const_char_20const___type_2c_20char___value_29_20___20_28is_trivially_copy_assignable_char___value_29_2c_20char____type_20std____2____copy_char_20const_2c_20char__28char_20const__2c_20char_20const__2c_20char__29($0, $1, $2) {
 $1 = $1 - $0 | 0;
 if ($1) {
  memmove($2, $0, $1);
 }
 return $1 + $2 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_size_28_29_20const($0) {
 return HEAPU8[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) + 11 | 0];
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) + 4 >> 2];
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) >> 2];
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 12 >> 2];
 if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
 }
 HEAP32[$0 + 12 >> 2] = $1 + 1;
 return std____2__char_traits_char___to_int_type_28char_29(HEAP8[$1 | 0]);
}
function pop_arg_long_double($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
 $2 = HEAP32[$1 >> 2] + 15 & -16;
 HEAP32[$1 >> 2] = $2 + 16;
 wasm2js_i32$0 = $0, wasm2js_f64$0 = __trunctfdf2(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
}
function neopt__IBinaryWriter__Write_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1 >>> 8 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1 >>> 16 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1 >>> 24 | 0);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29_20const($0) {
 return std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___second_28_29_20const($0);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0) {
 return HEAP8[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) + 11 | 0] < 0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const($0, $1, $2, $3, $4) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2, $3, $4) | 0;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29($0) {
 HEAP32[$0 >> 2] = 7172;
 std____2__locale__locale_28_29($0 + 4 | 0);
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 return $0;
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_std____2__allocator_char__2c_20void__28std____2__allocator_char____29($0, $1) {
 std____2__allocator_char____20std____2__forward_std____2__allocator_char__20__28std____2__remove_reference_std____2__allocator_char__20___type__29($1);
 return $0;
}
function void_20std____2__iter_swap_unsigned_20int__2c_20unsigned_20int___28unsigned_20int__2c_20unsigned_20int__29($0, $1) {
 std____2__enable_if__28is_move_constructible_unsigned_20int___value_29_20___20_28is_move_assignable_unsigned_20int___value_29_2c_20void___type_20std____2__swap_unsigned_20int__28unsigned_20int__2c_20unsigned_20int__29($0, $1);
}
function std____2__ios_base___ios_base_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 7516;
 std____2__ios_base____call_callbacks_28std____2__ios_base__event_29($0, 0);
 std____2__locale___locale_28_29($0 + 28 | 0);
 dlfree(HEAP32[$0 + 32 >> 2]);
 dlfree(HEAP32[$0 + 36 >> 2]);
 dlfree(HEAP32[$0 + 48 >> 2]);
 dlfree(HEAP32[$0 + 60 >> 2]);
 return $0 | 0;
}
function std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char_20const__2c_20void__28char_20const__2c_20char_20const__29($0, $2, $3);
}
function std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($0, $1, HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 0, $3);
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($0, $1, $2, $3, $4) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4) | 0;
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0) {
 return HEAP32[std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____end_cap_28_29_20const($0) >> 2] - HEAP32[$0 >> 2] >> 2;
}
function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1($0) {
 $0 = $0 | 0;
 $0 = std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29($0, 7412);
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29($0 + 4 | 0);
 return $0 | 0;
}
function std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1($0) {
 $0 = $0 | 0;
 $0 = std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29($0, 7316);
 std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29($0 + 8 | 0);
 return $0 | 0;
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____capacity_28_29_20const($0) {
 return HEAP32[std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______end_cap_28_29_20const($0) >> 2] - HEAP32[$0 >> 2] >> 2;
}
function decltype_28_28fp_base_28_29_29_20__20_28fp0_base_28_29_29_29_20std____2__operator__char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) {
 return std____2____wrap_iter_char_20const____base_28_29_20const($0) - std____2____wrap_iter_char____base_28_29_20const($1) | 0;
}
function char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = ($1 >>> 0) / 100 | 0;
 return char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29($0, $2), $1 - Math_imul($2, 100) | 0);
}
function char__20std____2____itoa__append3_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = ($1 >>> 0) / 100 | 0;
 return char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append1_unsigned_20int__28char__2c_20unsigned_20int_29($0, $2), $1 - Math_imul($2, 100) | 0);
}
function char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
 $2 = HEAPU8[$2 | 0];
 while (1) {
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    if (HEAPU8[$0 | 0] != ($2 | 0)) {
     break label$2;
    }
    $1 = $0;
   }
   return $1;
  }
  $0 = $0 + 1 | 0;
  continue;
 }
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0) {
 HEAP32[$0 >> 2] = 7108;
 std____2__locale__locale_28_29($0 + 4 | 0);
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 return $0;
}
function std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, $2) {
 if (std____2__allocator_wchar_t___max_size_28_29_20const($0) >>> 0 < $1 >>> 0) {
  std____2____throw_length_error_28char_20const__29(19920);
  abort();
 }
 return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1 << 2, 4);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___20std____2__addressof_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29($0) {
 return $0;
}
function snprintf($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $3;
 $3 = vsnprintf($0, $1, $2, $3);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function std____2__allocator_traits_std____2__allocator_char__20___select_on_container_copy_construction_28std____2__allocator_char__20const__29($0) {
 std____2__allocator_traits_std____2__allocator_char__20_____select_on_container_copy_construction_28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_char__20const__29($0);
}
function iprintf($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = vfiprintf(HEAP32[2071], $0, $1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function std____2__iterator_traits_char_20const____difference_type_20std____2__distance_char_20const___28char_20const__2c_20char_20const__29($0, $1) {
 return std____2__iterator_traits_char_20const____difference_type_20std____2____distance_char_20const___28char_20const__2c_20char_20const__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____max_size_28std____2__integral_constant_bool_2c_20true__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20const__29($0) {
 return std____2____sso_allocator_std____2__locale__facet__2c_2028ul___max_size_28_29_20const($0);
}
function __string_read($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = HEAP32[$0 + 84 >> 2];
 $3 = $2 + 256 | 0;
 $5 = memchr($4, 0, $3);
 $3 = $5 ? $5 - $4 | 0 : $3;
 $2 = $3 >>> 0 < $2 >>> 0 ? $3 : $2;
 memcpy($1, $4, $2);
 $3 = $3 + $4 | 0;
 HEAP32[$0 + 84 >> 2] = $3;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $2 + $4;
 return $2;
}
function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28char_20const__29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29(HEAP32[$0 >> 2], HEAP8[$1 | 0]);
 return $0;
}
function std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20unsigned_20long_29($0, $1) {
 return std____2____sso_allocator_std____2__locale__facet__2c_2028ul___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, 0);
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____clear_28_29($0) {
 std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______destruct_at_end_28std____2__locale__facet___29($0, HEAP32[$0 + 4 >> 2]);
}
function std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   HEAP32[$3 >> 2] = HEAP8[$1 | 0];
   $3 = $3 + 4 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0) {
 return char_20const__20std____2____to_address_char_20const__28char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0));
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0) >> 2];
}
function std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($0, $1) {
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29($0 + 8 | 0, $1 + 12 | 0);
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0, $1 + 4 | 0);
 return $0;
}
function $28anonymous_20namespace_29__AtomicInt_unsigned_20char___store_28unsigned_20char_2c_20std____2___28anonymous_20namespace_29____libcpp_atomic_order_29($0) {
 void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20char_2c_20unsigned_20char__28unsigned_20char__2c_20unsigned_20char_2c_20int_29(HEAP32[$0 >> 2]);
}
function std____2__numpunct_wchar_t___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1 + 16 | 0);
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___clear_28_29($0) {
 std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destruct_at_end_28std____2__locale__facet___29($0, HEAP32[$0 >> 2]);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____alloc_28_29($0) {
 return std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___second_28_29($0);
}
function fiprintf($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $2;
 $2 = vfiprintf($0, $1, $2);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function emscripten__internal__TypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__20___get_28_29();
}
function emscripten__internal__TypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__20___get_28_29();
}
function std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1($0) {
 $0 = $0 | 0;
 $0 = std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($0, 7480);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0 + 12 | 0);
 return $0 | 0;
}
function wchar_t__20std____2__find_wchar_t__2c_20wchar_t__28wchar_t__2c_20wchar_t__2c_20wchar_t_20const__29($0, $1, $2) {
 $2 = HEAP32[$2 >> 2];
 while (1) {
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    if (HEAP32[$0 >> 2] != ($2 | 0)) {
     break label$2;
    }
    $1 = $0;
   }
   return $1;
  }
  $0 = $0 + 4 | 0;
  continue;
 }
}
function std____2__numpunct_char___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1 + 12 | 0);
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sgetc_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 12 >> 2];
 if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 return std____2__char_traits_wchar_t___to_int_type_28wchar_t_29(HEAP32[$1 >> 2]);
}
function std____2__allocator_char___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, $2) {
 if (std____2__allocator_char___max_size_28_29_20const($0) >>> 0 < $1 >>> 0) {
  std____2____throw_length_error_28char_20const__29(19920);
  abort();
 }
 return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1, 1);
}
function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
 if (!$2) {
  return std__type_info__operator___28std__type_info_20const__29_20const($0, $1);
 }
 if (($0 | 0) == ($1 | 0)) {
  return 1;
 }
 return !strcmp(std__type_info__name_28_29_20const($0), std__type_info__name_28_29_20const($1));
}
function bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) {
 return bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29_1($0, $1) ^ 1;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
}
function __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__acquire_init_byte_28_29($0) {
 var $1 = 0, $2 = 0;
 label$1 : {
  $0 = HEAP32[$0 + 8 >> 2];
  $1 = HEAPU8[$0 | 0];
  if (($1 | 0) != 1) {
   if ($1 & 2) {
    break label$1;
   }
   HEAP8[$0 | 0] = 2;
   $2 = 1;
  }
  return $2;
 }
 abort_message(20431, 0);
 abort();
}
function std____2__numpunct_char___numpunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 HEAP16[$0 + 8 >> 1] = 11310;
 HEAP32[$0 >> 2] = 14248;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 12 | 0);
 return $0;
}
function sscanf($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $2;
 $2 = vsscanf($0, $1, $2);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function std____2__ios_base____call_callbacks_28std____2__ios_base__event_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 40 >> 2];
 while (1) {
  if ($2) {
   $2 = $2 + -1 | 0;
   $3 = $2 << 2;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 32 >> 2] + $3 >> 2]]($1, $0, HEAP32[$3 + HEAP32[$0 + 36 >> 2] >> 2]);
   continue;
  }
  break;
 }
}
function std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 while (1) {
  if (($1 | 0) != ($2 | 0)) {
   HEAP8[$3 | 0] = HEAPU8[$1 | 0];
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   continue;
  }
  break;
 }
 return $2 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($0) {
 return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29_20const($0);
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0) {
 $0 = $0 | 0;
 $0 = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29($0, 7364);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0 + 4 | 0);
 return $0 | 0;
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0) {
 $0 = $0 | 0;
 $0 = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0, 7268);
 std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0 + 8 | 0);
 return $0 | 0;
}
function neopt__IBinaryWriter__WriteVarBytes_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] | 0);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, $1);
}
function emscripten__internal__TypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___get_28_29();
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
}
function decltype_28std____2__forward_std____2___28anonymous_20namespace_29____fake_bind__28fp_29_28_29_29_20std____2____invoke_std____2___28anonymous_20namespace_29____fake_bind__28std____2___28anonymous_20namespace_29____fake_bind___29($0) {
 std____2___28anonymous_20namespace_29____fake_bind__operator_28_29_28_29_20const($0);
}
function char__20std____2____itoa__append2_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 if ($1 >>> 0 <= 9) {
  return char__20std____2____itoa__append1_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
 }
 return char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1);
}
function void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_std____2__locale__facet___28std____2__integral_constant_bool_2c_20false__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29($0, $1) {
 HEAP32[$1 >> 2] = 0;
}
function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_put_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_put_28_29_1($0));
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_get_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_get_28_29($0));
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29($0) {
 return wchar_t__20std____2____to_address_wchar_t__28wchar_t__29(std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0));
}
function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___second_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____get_28_29_20const($0);
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____end_cap_28_29_20const($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___first_28_29_20const($0 + 16 | 0);
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29_20const($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___second_28_29_20const($0 + 16 | 0);
}
function std____2____time_get_c_storage_wchar_t_____months_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25532] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25532)) {
   break label$1;
  }
  std____2__init_wmonths_28_29();
  HEAP32[6382] = 26336;
  __cxa_guard_release(25532);
 }
 return HEAP32[6382];
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______end_cap_28_29_20const($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____first_28_29_20const($0 + 12 | 0);
}
function neopt__JString__ToString_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1 + 16 | 0);
}
function bool_20std____2__operator___wchar_t_20const__2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___20const__2c_20std____2____wrap_iter_wchar_t___20const__29_1($0, $1) {
 return (std____2____wrap_iter_wchar_t_20const____base_28_29_20const($0) | 0) == (std____2____wrap_iter_wchar_t____base_28_29_20const($1) | 0);
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetc_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 12 >> 2];
 if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 return std____2__char_traits_char___to_int_type_28char_29(HEAP8[$1 | 0]);
}
function std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25516] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25516)) {
   break label$1;
  }
  std____2__init_wweeks_28_29();
  HEAP32[6378] = 25856;
  __cxa_guard_release(25516);
 }
 return HEAP32[6378];
}
function std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25548] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25548)) {
   break label$1;
  }
  std____2__init_wam_pm_28_29();
  HEAP32[6386] = 26672;
  __cxa_guard_release(25548);
 }
 return HEAP32[6386];
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($0) + ($1 << 2) | 0;
}
function std____2__to_string_28int_29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2___28anonymous_20namespace_29__i_to_string_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int__28int_29($0, $1);
}
function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____money_put_wchar_t_____money_put_28_29($0);
 HEAP32[$0 >> 2] = 18444;
 return $0;
}
function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____money_get_wchar_t_____money_get_28_29($0);
 HEAP32[$0 >> 2] = 18116;
 return $0;
}
function std____2____time_get_c_storage_char_____months_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25524] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25524)) {
   break label$1;
  }
  std____2__init_months_28_29();
  HEAP32[6380] = 26032;
  __cxa_guard_release(25524);
 }
 return HEAP32[6380];
}
function std____2____time_get_c_storage_char_____weeks_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25508] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25508)) {
   break label$1;
  }
  std____2__init_weeks_28_29();
  HEAP32[6376] = 25680;
  __cxa_guard_release(25508);
 }
 return HEAP32[6376];
}
function std____2____time_get_c_storage_char_____am_pm_28_29_20const($0) {
 $0 = $0 | 0;
 label$1 : {
  if (HEAP8[25540] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25540)) {
   break label$1;
  }
  std____2__init_am_pm_28_29();
  HEAP32[6384] = 26640;
  __cxa_guard_release(25540);
 }
 return HEAP32[6384];
}
function neopt__BinaryReader__ReadVarString_28int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $0 = global$0 - 16 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 HEAP32[$0 + 4 >> 2] = 4045;
 HEAP32[$0 >> 2] = 4031;
 iprintf(3084, $0);
 exit(1);
 abort();
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0) {
 return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29($0);
}
function std____2____sso_allocator_std____2__locale__facet__2c_2028ul___deallocate_28std____2__locale__facet___2c_20unsigned_20long_29($0, $1, $2) {
 if (($0 | 0) == ($1 | 0)) {
  HEAP8[$0 + 112 | 0] = 0;
  return;
 }
 std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($1, $2 << 2, 4);
}
function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___second_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__2c_201_2c_20false_____get_28_29_20const($0 + 16 | 0);
}
function char__20std____2__find_char__2c_20char__28char__2c_20char__2c_20char_20const__29($0, $1, $2) {
 $2 = HEAPU8[$2 | 0];
 while (1) {
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    if (HEAPU8[$0 | 0] != ($2 | 0)) {
     break label$2;
    }
    $1 = $0;
   }
   return $1;
  }
  $0 = $0 + 1 | 0;
  continue;
 }
}
function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___time_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____time_put____time_put_28_29($0 + 8 | 0);
 HEAP32[$0 >> 2] = 17328;
 return $0;
}
function std____2____sso_allocator_std____2__locale__facet__2c_2028ul___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, $2) {
 if (!(HEAPU8[$0 + 112 | 0] | $1 >>> 0 > 28)) {
  HEAP8[$0 + 112 | 0] = 1;
  return $0;
 }
 return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1 << 2, 4);
}
function std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
 std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($1);
 HEAP32[$0 >> 2] = 0;
 return $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29($0, $1) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____get_pointer_28_29($0) + ($1 << 2) | 0;
}
function operator_20new_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = $0 ? $0 : 1;
 label$1 : {
  while (1) {
   $0 = dlmalloc($1);
   if ($0) {
    break label$1;
   }
   $0 = std__get_new_handler_28_29();
   if ($0) {
    FUNCTION_TABLE[$0]();
    continue;
   }
   break;
  }
  abort();
  abort();
 }
 return $0;
}
function emscripten__internal__TypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___get_28_29();
}
function getint($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 if (isdigit(HEAP8[HEAP32[$0 >> 2]])) {
  while (1) {
   $1 = HEAP32[$0 >> 2];
   $3 = HEAP8[$1 | 0];
   HEAP32[$0 >> 2] = $1 + 1;
   $2 = (Math_imul($2, 10) + $3 | 0) + -48 | 0;
   if (isdigit(HEAP8[$1 + 1 | 0])) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function std____2__ctype_char___20std____2___28anonymous_20namespace_29__make_std____2__ctype_char__2c_20std__nullptr_t_2c_20bool_2c_20unsigned_20int__28std__nullptr_t_2c_20bool_2c_20unsigned_20int_29() {
 std____2__ctype_char___ctype_28unsigned_20short_20const__2c_20bool_2c_20unsigned_20long_29(26720, 0, 0, 1);
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29_20const($0);
}
function bool_20std____2__operator___wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($0, $1) {
 return bool_20std____2__operator___wchar_t__2c_20wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($0, $1) ^ 1;
}
function std____2____compressed_pair_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_20std____2__allocator_wchar_t__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____get_28_29($0);
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____end_cap_28_29($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___first_28_29($0 + 16 | 0);
}
function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1($0));
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_get_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_get_28_29($0));
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
}
function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___second_28_29($0 + 16 | 0);
}
function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____money_put_char_____money_put_28_29($0);
 HEAP32[$0 >> 2] = 18280;
 return $0;
}
function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____money_get_char_____money_get_28_29($0);
 HEAP32[$0 >> 2] = 17952;
 return $0;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0) {
 return std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29($0, $1) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___assign_28wchar_t_20const__29($0, $1);
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______end_cap_28_29($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____first_28_29($0 + 12 | 0);
}
function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___time_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2____time_put____time_put_28_29($0 + 8 | 0);
 HEAP32[$0 >> 2] = 17172;
 return $0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29(26776, 1);
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29(26768, 1);
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______alloc_28_29($0) {
 return std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____second_28_29($0 + 12 | 0);
}
function bool_20std____2__operator___char_20const__2c_20char___28std____2____wrap_iter_char_20const___20const__2c_20std____2____wrap_iter_char___20const__29_1($0, $1) {
 return (std____2____wrap_iter_char_20const____base_28_29_20const($0) | 0) == (std____2____wrap_iter_char____base_28_29_20const($1) | 0);
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29(26752, 1);
}
function std____2__allocator_traits_std____2__allocator_wchar_t__20___max_size_28std____2__allocator_wchar_t__20const__29($0) {
 return std____2__allocator_traits_std____2__allocator_wchar_t__20_____max_size_28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_wchar_t__20const__29($0);
}
function void_20std____2__locale____imp__install_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25480));
}
function void_20std____2__locale____imp__install_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25472));
}
function void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destroy_std____2__locale__facet___28std____2__integral_constant_bool_2c_20false__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29($0, $1) {}
function std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
 return std____2__iterator_traits_wchar_t____difference_type_20std____2____distance_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function std____2___28anonymous_20namespace_29____fake_bind____fake_bind_28void_20_28std____2__locale__id____29_28_29_2c_20std____2__locale__id__29($0, $1, $2) {
 var $3 = 0;
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 >> 2] = $2;
 return $0;
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_get_28_29($0) {
 $0 = $0 | 0;
 std____2____time_get_c_storage_wchar_t______time_get_c_storage_28_29($0 + 8 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}
function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__2c_201_2c_20false_____get_28_29($0 + 16 | 0);
}
function $28anonymous_20namespace_29__AtomicInt_unsigned_20char___load_28std____2___28anonymous_20namespace_29____libcpp_atomic_order_29($0) {
 return unsigned_20char_20std____2___28anonymous_20namespace_29____libcpp_atomic_load_unsigned_20char__28unsigned_20char_20const__2c_20int_29(HEAP32[$0 >> 2]);
}
function void_20std____2__locale____imp__install_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25464));
}
function std____2__locale__id____init_28_29($0) {
 $0 = $0 | 0;
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29(), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29($0) {
 return char__20std____2____to_address_char__28char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0));
}
function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____second_28_29($0) {
 return std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}
function virtual_20thunk_20to_20std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
}
function virtual_20thunk_20to_20std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
}
function std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___operator_28_29_28_29($0) {
 void_20std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____execute___28std____2____tuple_indices___29($0);
}
function bool_20std____2__operator___wchar_t__2c_20wchar_t___28std____2____wrap_iter_wchar_t___20const__2c_20std____2____wrap_iter_wchar_t___20const__29($0, $1) {
 return (std____2____wrap_iter_wchar_t____base_28_29_20const($0) | 0) == (std____2____wrap_iter_wchar_t____base_28_29_20const($1) | 0);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0) + $1 | 0;
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29($0);
}
function void_20std____2__locale____imp__install_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char_2c_20char_2c_20__mbstate_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25456));
}
function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____unwrap_iter_std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0) {
 return $0;
}
function std____2__ios_base__init_28void__29($0, $1) {
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 4098;
 HEAP32[$0 + 8 >> 2] = 6;
 HEAP32[$0 + 16 >> 2] = !$1;
 memset($0 + 32 | 0, 0, 40);
 std____2__locale__locale_28_29($0 + 28 | 0);
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__codecvt_char_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29(26744, 1);
}
function std____2____num_get_base____get_base_28std____2__ios_base__29($0) {
 label$1 : {
  $0 = std____2__ios_base__flags_28_29_20const($0) & 74;
  if ($0) {
   if (($0 | 0) == 64) {
    return 8;
   }
   if (($0 | 0) != 8) {
    break label$1;
   }
   return 16;
  }
  return 0;
 }
 return 10;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____copy_assign_alloc_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {}
function sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = HEAP32[$0 + 20 >> 2];
 $4 = $3;
 $3 = HEAP32[$0 + 16 >> 2] - $3 | 0;
 $3 = $3 >>> 0 > $2 >>> 0 ? $2 : $3;
 memcpy($4, $1, $3);
 HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] + $3;
 return $2 | 0;
}
function std____2__locale__classic_28_29() {
 label$1 : {
  if (HEAP8[25420] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25420)) {
   break label$1;
  }
  std____2__locale____imp__make_classic_28_29();
  HEAP32[6354] = 25412;
  __cxa_guard_release(25420);
 }
 return HEAP32[6354];
}
function std____2__locale____global_28_29() {
 label$1 : {
  if (HEAP8[25432] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25432)) {
   break label$1;
  }
  std____2__locale____imp__make_global_28_29();
  HEAP32[6357] = 25424;
  __cxa_guard_release(25432);
 }
 return HEAP32[6357];
}
function std____2__allocator_traits_std____2__allocator_char__20___max_size_28std____2__allocator_char__20const__29($0) {
 return std____2__allocator_traits_std____2__allocator_char__20_____max_size_28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_char__20const__29($0);
}
function bool_20std____2__operator___char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) {
 return bool_20std____2__operator___char__2c_20char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) ^ 1;
}
function virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
}
function std____2__numpunct_wchar_t____numpunct_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 14288;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 16 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($0, $1, 0);
}
function void_20std____2__iter_swap_wchar_t__2c_20wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
 std____2__enable_if__28is_move_constructible_wchar_t___value_29_20___20_28is_move_assignable_wchar_t___value_29_2c_20void___type_20std____2__swap_wchar_t__28wchar_t__2c_20wchar_t__29($0, $1);
}
function virtual_20thunk_20to_20std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_2(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
}
function virtual_20thunk_20to_20std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_2(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_get_28_29($0) {
 $0 = $0 | 0;
 std____2____time_get_c_storage_char______time_get_c_storage_28_29($0 + 8 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29($0, $1) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0) + $1 | 0;
}
function bool_20std____2__operator___wchar_t_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($0, $1) {
 return std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___operator_20bool_28_29_20const($0) ^ 1;
}
function std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__2c_201_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____sso_allocator_28_29($0);
 return $0;
}
function std____2___28anonymous_20namespace_29____fake_bind__operator_28_29_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 + 8 >> 2];
 $2 = HEAP32[$0 >> 2] + ($1 >> 1) | 0;
 $0 = HEAP32[$0 + 4 >> 2];
 $0 = $1 & 1 ? HEAP32[HEAP32[$2 >> 2] + $0 >> 2] : $0;
 FUNCTION_TABLE[$0]($2);
}
function std____2__numpunct_char____numpunct_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 14248;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 12 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}
function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
}
function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
}
function std____2__char_traits_wchar_t___not_eof_28unsigned_20int_29($0) {
 if (std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29($0, std____2__char_traits_wchar_t___eof_28_29())) {
  $0 = std____2__char_traits_wchar_t___eof_28_29() ^ -1;
 }
 return $0;
}
function legalstub$dynCall_iiiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 return dynCall_iiiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) | 0;
}
function std____2__ctype_wchar_t___do_is_28unsigned_20short_2c_20wchar_t_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 if ($2 >>> 0 <= 127) {
  $3 = (HEAPU16[std____2__ctype_char___classic_table_28_29() + ($2 << 1) >> 1] & $1) != 0;
 }
 return $3 | 0;
}
function __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($0, $1) {
 __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___GuardObject_28unsigned_20int__29($0, $1);
 return $0;
}
function __cxx_global_array_dtor_136($0) {
 $0 = $0 | 0;
 $0 = 26696;
 while (1) {
  $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 26672) {
   continue;
  }
  break;
 }
}
function __cxx_global_array_dtor_109($0) {
 $0 = $0 | 0;
 $0 = 26624;
 while (1) {
  $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 26336) {
   continue;
  }
  break;
 }
}
function std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($0, 1, 45);
}
function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___GuardObject_28unsigned_20int__29($0, $1) {
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $1 + 1;
 return $0;
}
function __cxx_global_array_dtor_70($0) {
 $0 = $0 | 0;
 $0 = 26024;
 while (1) {
  $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 25856) {
   continue;
  }
  break;
 }
}
function std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release____unique_ptr_28_29($0) {
 std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___reset_28std____2__locale__facet__29($0);
 return $0;
}
function std____2__moneypunct_wchar_t_2c_20true___do_negative_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($0, 1, 45);
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 14200;
 if (HEAP32[$0 + 8 >> 2] != (std____2____cloc_28_29() | 0)) {
  freelocale(HEAP32[$0 + 8 >> 2]);
 }
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29($0, $1) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__29($0, $1);
}
function std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false_____tuple_leaf_std____2___28anonymous_20namespace_29____fake_bind_2c_20void__28std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
}
function virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_2(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___data_28_29_20const($0) {
 return std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29(HEAP32[$0 >> 2]);
}
function bool_20std____2__operator___char_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($0, $1) {
 return std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator_20bool_28_29_20const($0) ^ 1;
}
function __fpclassifyl($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $3 & 65535;
 $5 = $3 >>> 16 & 32767;
 label$1 : {
  if (($5 | 0) != 32767) {
   $3 = 4;
   if ($5) {
    break label$1;
   }
   return $0 | $2 | ($1 | $4) ? 3 : 2;
  }
  $3 = !($0 | $2 | ($1 | $4));
 }
 return $3;
}
function bool_20std____2__operator___char__2c_20char___28std____2____wrap_iter_char___20const__2c_20std____2____wrap_iter_char___20const__29($0, $1) {
 return (std____2____wrap_iter_char____base_28_29_20const($0) | 0) == (std____2____wrap_iter_char____base_28_29_20const($1) | 0);
}
function std____2__iterator_traits_char____difference_type_20std____2__distance_char___28char__2c_20char__29($0, $1) {
 return std____2__iterator_traits_char____difference_type_20std____2____distance_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___empty_28_29_20const($0) {
 return !std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___size_28_29_20const($0);
}
function void_20std____2____call_once_proxy_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20__28void__29($0) {
 $0 = $0 | 0;
 std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20___operator_28_29_28_29($0);
}
function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
}
function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___c_str_28_29_20const($0) {
 return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___data_28_29_20const($0);
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____unwrap_iter_std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0) {
 return $0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
}
function __cxx_global_array_dtor_133($0) {
 $0 = $0 | 0;
 $0 = 26664;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 26640) {
   continue;
  }
  break;
 }
}
function std____2____sso_allocator_std____2__locale__facet__2c_2028ul___20std____2__forward_std____2____sso_allocator_std____2__locale__facet__2c_2028ul____28std____2__remove_reference_std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____type__29($0) {
 return $0;
}
function __cxx_global_array_dtor_85($0) {
 $0 = $0 | 0;
 $0 = 26320;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 26032) {
   continue;
  }
  break;
 }
}
function __cxx_global_array_dtor_55($0) {
 $0 = $0 | 0;
 $0 = 25848;
 while (1) {
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
  if (($0 | 0) != 25680) {
   continue;
  }
  break;
 }
}
function void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__moneypunct_wchar_t_2c_20false___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25340));
}
function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_put_28_29_1($0) {
 $0 = $0 | 0;
 std____2____time_put_____time_put_28_29($0 + 8 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}
function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0) | 0;
}
function void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__moneypunct_wchar_t_2c_20true___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25348));
}
function std____2__to_chars_result_20std____2__to_chars_int_2c_200__28char__2c_20char__2c_20int_29($0, $1, $2, $3) {
 std____2__to_chars_result_20std____2____to_chars_itoa_int__28char__2c_20char__2c_20int_2c_20std____2__integral_constant_bool_2c_20true__29($0, $1, $2, $3);
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____proxy____proxy_28wchar_t_2c_20std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1, $2) {
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function std____2__ctype_char____ctype_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 14148;
 $1 = HEAP32[$0 + 8 >> 2];
 if (!(!$1 | !HEAPU8[$0 + 12 | 0])) {
  operator_20delete_5b_5d_28void__29($1);
 }
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}
function std____2__numpunct_wchar_t___do_falsename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29($0, 14356);
}
function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29_20const($0);
}
function std____2__numpunct_wchar_t___do_truename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_std__nullptr_t__28wchar_t_20const__29($0, 14328);
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 25464);
}
function std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28unsigned_20long_2c_20char_29($0, 1, 45);
}
function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____first_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29_20const($0);
}
function void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20false__20__28std____2__moneypunct_char_2c_20false___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25324));
}
function std____2__moneypunct_char_2c_20true___do_negative_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28unsigned_20long_2c_20char_29($0, 1, 45);
}
function std____2__moneypunct_wchar_t_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20false__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__moneypunct_wchar_t_2c_20false___moneypunct_28unsigned_20long_29(26896, 1);
}
function void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20true__20__28std____2__moneypunct_char_2c_20true___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25332));
}
function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1($0) {
 $0 = $0 | 0;
 std____2____time_put_____time_put_28_29($0 + 8 | 0);
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}
function std____2__moneypunct_wchar_t_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20true__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__moneypunct_wchar_t_2c_20true___moneypunct_28unsigned_20long_29(26904, 1);
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 25456);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___get_allocator_28_29_20const($0) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($0);
}
function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
 if (!(HEAP32[$1 + 28 >> 2] == 1 | HEAP32[$1 + 4 >> 2] != ($2 | 0))) {
  HEAP32[$1 + 28 >> 2] = $3;
 }
}
function void_20std____2__iter_swap_char__2c_20char___28char__2c_20char__29($0, $1) {
 std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1);
}
function std____2__ios_base__Init__Init_28_29($0) {
 label$1 : {
  if (HEAP8[25152] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(25152)) {
   break label$1;
  }
  std____2__DoIOSInit__DoIOSInit_28_29(25148);
  __cxa_guard_release(25152);
 }
 return $0;
}
function non_virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29($0) {
 $0 = $0 | 0;
 return std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1($0 + -8 | 0) | 0;
}
function legalstub$dynCall_iiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 return dynCall_iiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8) | 0;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0));
}
function std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = __uselocale(HEAP32[$1 >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($0, $1) {
 return long_20const__20std____2__min_long_2c_20std____2____less_long_2c_20long__20__28long_20const__2c_20long_20const__2c_20std____2____less_long_2c_20long__29($0, $1);
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___num_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 HEAP32[$0 >> 2] = 16472;
 return $0;
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___num_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 HEAP32[$0 >> 2] = 16028;
 return $0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2;
 return 3;
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2;
 return 3;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($0) {
 return !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
}
function fmt_x($0, $1, $2, $3) {
 if ($0 | $1) {
  while (1) {
   $2 = $2 + -1 | 0;
   HEAP8[$2 | 0] = HEAPU8[($0 & 15) + 9760 | 0] | $3;
   $0 = ($1 & 15) << 28 | $0 >>> 4;
   $1 = $1 >>> 4 | 0;
   if ($0 | $1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($0) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0);
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_contiguous_container_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {}
function std____2__moneypunct_char_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20false__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__moneypunct_char_2c_20false___moneypunct_28unsigned_20long_29(26880, 1);
}
function std____2____shared_count____release_shared_28_29($0) {
 var $1 = 0;
 if ((long_20std____2____libcpp_atomic_refcount_decrement_long__28long__29($0 + 4 | 0) | 0) == -1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
  $1 = 1;
 }
 return $1;
}
function std____2__numpunct_char___do_falsename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($0, 14348);
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2;
 return 3;
}
function std____2__numpunct_char___do_truename_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_std__nullptr_t__28char_20const__29($0, 14320);
}
function std____2__moneypunct_char_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20true__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__moneypunct_char_2c_20true___moneypunct_28unsigned_20long_29(26888, 1);
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____proxy____proxy_28char_2c_20std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1, $2) {
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP8[$0 | 0] = $1;
 return $0;
}
function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_2($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1($0));
}
function std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_2($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1($0));
}
function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29($0);
}
function std____2__allocator_traits_std____2__allocator_wchar_t__20___deallocate_28std____2__allocator_wchar_t___2c_20wchar_t__2c_20unsigned_20long_29($0, $1, $2) {
 std____2__allocator_wchar_t___deallocate_28wchar_t__2c_20unsigned_20long_29($0, $1, $2);
}
function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____first_28_29($0) {
 return std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29($0);
}
function non_virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1($0) {
 $0 = $0 | 0;
 std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_2($0 + -8 | 0);
}
function dynCall_iiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8) | 0;
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___num_put_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 HEAP32[$0 >> 2] = 16240;
 return $0;
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___num_get_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 HEAP32[$0 >> 2] = 15784;
 return $0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__codecvt_base__codecvt_base_28_29($0);
 HEAP32[$0 >> 2] = 15120;
 return $0;
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__codecvt_base__codecvt_base_28_29($0);
 HEAP32[$0 >> 2] = 15004;
 return $0;
}
function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul______ConstructTransaction____ConstructTransaction_28_29($0) {
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 >> 2];
 return $0;
}
function std____2__moneypunct_wchar_t_2c_20false___do_positive_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0);
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0));
}
function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 72 >> 2];
 HEAP32[$0 + 72 >> 2] = $1;
 return $2;
}
function std____2____itoa____traits_base_unsigned_20int_2c_20void_____width_28unsigned_20int_29($0) {
 var $1 = 0;
 $1 = Math_imul(32 - Math_clz32($0 | 1) | 0, 1233) >>> 12 | 0;
 return ($1 - (HEAPU32[($1 << 2) + 20384 >> 2] > $0 >>> 0) | 0) + 1 | 0;
}
function std____2____call_once_param_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20_____call_once_param_28std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind_____29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $1) {
 return int_20const__20std____2__max_int_2c_20std____2____less_int_2c_20int__20__28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29($0, $1);
}
function void_20std____2__locale____imp__install_std____2__numpunct_wchar_t__20__28std____2__numpunct_wchar_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25496));
}
function void_20std____2__locale____imp__install_std____2__messages_wchar_t__20__28std____2__messages_wchar_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25396));
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20____ConstructTransaction____ConstructTransaction_28_29($0) {
 HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 return $0;
}
function std____2__moneypunct_wchar_t_2c_20true___do_positive_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0);
}
function std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $1, $2) {
 return wchar_t_20const__20std____2____num_get_wchar_t_____do_widen_p_wchar_t__28std____2__ios_base__2c_20wchar_t__29_20const($0, $1, $2);
}
function std____2__moneypunct_wchar_t_2c_20false___do_curr_symbol_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0);
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__codecvt_base__codecvt_base_28_29($0);
 HEAP32[$0 >> 2] = 14856;
 return $0;
}
function std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_2($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1($0));
}
function std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 return $0;
}
function void_20std____2__locale____imp__install_std____2__collate_wchar_t__20__28std____2__collate_wchar_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25252));
}
function std____2__moneypunct_wchar_t_2c_20true___do_curr_symbol_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0);
}
function std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 25340);
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0));
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0));
}
function std____2__allocator_traits_std____2__allocator_wchar_t__20_____max_size_28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_wchar_t__20const__29($0) {
 return std____2__allocator_wchar_t___max_size_28_29_20const($0);
}
function void_20std____2__locale____imp__install_std____2__numpunct_char__20__28std____2__numpunct_char___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25488));
}
function void_20std____2__locale____imp__install_std____2__messages_char__20__28std____2__messages_char___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25388));
}
function void_20std____2__locale____imp__install_std____2__ctype_wchar_t__20__28std____2__ctype_wchar_t___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25440));
}
function std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 25348);
}
function std____2__allocator_traits_std____2__allocator_wchar_t__20___allocate_28std____2__allocator_wchar_t___2c_20unsigned_20long_29($0, $1) {
 return std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, 0);
}
function std____2__char_traits_char___not_eof_28int_29($0) {
 if (std____2__char_traits_char___eq_int_type_28int_2c_20int_29($0, std____2__char_traits_char___eof_28_29())) {
  $0 = std____2__char_traits_char___eof_28_29() ^ -1;
 }
 return $0;
}
function void_20std____2__locale____imp__install_std____2__collate_char__20__28std____2__collate_char___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25244));
}
function std____2__ctype_char___do_toupper_28char_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (($1 | 0) >= 0) {
  $1 = HEAP32[std____2__ctype_char_____classic_upper_table_28_29() + (($1 & 255) << 2) >> 2];
 }
 return $1 << 24 >> 24;
}
function std____2__ctype_char___do_tolower_28char_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (($1 | 0) >= 0) {
  $1 = HEAP32[std____2__ctype_char_____classic_lower_table_28_29() + (($1 & 255) << 2) >> 2];
 }
 return $1 << 24 >> 24;
}
function neopt__StringReader___StringReader_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 2816;
 $1 = HEAP32[$0 + 4 >> 2];
 if ($1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
 }
 operator_20delete_28void__29($0);
}
function void_20std____2__reverse_unsigned_20int___28unsigned_20int__2c_20unsigned_20int__29($0, $1) {
 void_20std____2____reverse_unsigned_20int___28unsigned_20int__2c_20unsigned_20int__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____money_put_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____money_get_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function wmemcpy($0, $1, $2) {
 var $3 = 0;
 if ($2) {
  $3 = $0;
  while (1) {
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
   $3 = $3 + 4 | 0;
   $1 = $1 + 4 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 25324);
}
function std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, $1, $2) {
 std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, $1, $2);
}
function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 return $0;
}
function std____2__moneypunct_char_2c_20false___do_positive_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}
function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29($0));
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 72 >> 2];
 HEAP32[$0 + 72 >> 2] = $1;
 return $2;
}
function __syscall_ret($0) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 if ($0 >>> 0 >= 4294963201) {
  wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0 - $0 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $0 = -1;
 }
 return $0;
}
function void_20std____2__locale____imp__install_std____2__ctype_char__20__28std____2__ctype_char___29($0, $1) {
 std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(25448));
}
function std____2__moneypunct_wchar_t_2c_20false___moneypunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__money_base__money_base_28_29($0);
 HEAP32[$0 >> 2] = 17720;
 return $0;
}
function std____2__moneypunct_char_2c_20true___do_positive_sign_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}
function std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 25332);
}
function std____2___DeallocateCaller____do_deallocate_handle_size_align_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 std____2___DeallocateCaller____do_deallocate_handle_size_28void__2c_20unsigned_20long_29($0, $1);
}
function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____num_put_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____num_get_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__moneypunct_wchar_t_2c_20true___moneypunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__money_base__money_base_28_29($0);
 HEAP32[$0 >> 2] = 17836;
 return $0;
}
function std____2__moneypunct_wchar_t_2c_20false___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}
function std____2__moneypunct_char_2c_20false___do_curr_symbol_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4) | 0;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
 $0 = $0 | 0;
 $0 = HEAP32[$0 + 8 >> 2];
 if (!$0) {
  return 1;
 }
 return std____2____libcpp_mb_cur_max_l_28__locale_struct__29($0) | 0;
}
function std____2____compressed_pair_std____2__locale__facet__2c_20std____2___28anonymous_20namespace_29__release___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2__locale__facet__2c_200_2c_20false_____get_28_29($0);
}
function neopt__BinaryReader__wrap_vector_as_istream___wrap_vector_as_istream_28_29($0) {
 $0 = $0 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__moneypunct_wchar_t_2c_20true___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}
function std____2__moneypunct_char_2c_20true___do_curr_symbol_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}
function std____2__allocator_traits_std____2__allocator_char__20_____max_size_28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_char__20const__29($0) {
 return std____2__allocator_char___max_size_28_29_20const($0);
}
function std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 std____2___DeallocateCaller____do_deallocate_handle_size_align_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2);
}
function std____2__moneypunct_char_2c_20false___moneypunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__money_base__money_base_28_29($0);
 HEAP32[$0 >> 2] = 17456;
 return $0;
}
function std____2__locale____imp__make_classic_28_29() {
 std____2__locale____imp__20std____2___28anonymous_20namespace_29__make_std____2__locale____imp_2c_20unsigned_20int__28unsigned_20int_29();
 HEAP32[6353] = 27024;
 return 25412;
}
function std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($0, $1) {
 return std____2__allocator_char___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, 0);
}
function fmt_o($0, $1, $2) {
 if ($0 | $1) {
  while (1) {
   $2 = $2 + -1 | 0;
   HEAP8[$2 | 0] = $0 & 7 | 48;
   $0 = ($1 & 7) << 29 | $0 >>> 3;
   $1 = $1 >>> 3 | 0;
   if ($0 | $1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function std____2__moneypunct_char_2c_20true___moneypunct_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__money_base__money_base_28_29($0);
 HEAP32[$0 >> 2] = 17604;
 return $0;
}
function std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}
function std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ($1 >>> 0 <= 127) {
  $1 = HEAP32[std____2__ctype_char_____classic_upper_table_28_29() + ($1 << 2) >> 2];
 }
 return $1 | 0;
}
function std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if ($1 >>> 0 <= 127) {
  $1 = HEAP32[std____2__ctype_char_____classic_lower_table_28_29() + ($1 << 2) >> 2];
 }
 return $1 | 0;
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4) | 0;
}
function std____2__moneypunct_char_2c_20true___do_grouping_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
}
function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____money_put_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____money_get_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = dynCall_jiji($0, $1, $2, $3, $4);
 $2 = i64toi32_i32$HIGH_BITS;
 setTempRet0($2 | 0);
 return $0 | 0;
}
function dynCall_iiiiiiii($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7) | 0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) {
 return std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sgetc_28_29(HEAP32[$0 >> 2]);
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) {
 return std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetc_28_29(HEAP32[$0 >> 2]) << 24 >> 24;
}
function std__logic_error__logic_error_28char_20const__29($0, $1) {
 std__exception__exception_28_29($0);
 HEAP32[$0 >> 2] = 20584;
 std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($0 + 4 | 0, $1);
 return $0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0) {
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29(HEAP32[$0 >> 2]);
 return $0;
}
function std____2__messages_wchar_t___messages_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__messages_base__messages_base_28_29($0);
 HEAP32[$0 >> 2] = 18728;
 return $0;
}
function std____2__iterator_traits_wchar_t_20const____difference_type_20std____2____distance_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return $1 - $0 >> 2;
}
function std____2__ios_base__clear_28unsigned_20int_29($0, $1) {
 $1 = !HEAP32[$0 + 24 >> 2] | $1;
 HEAP32[$0 + 16 >> 2] = $1;
 if (HEAP32[$0 + 20 >> 2] & $1) {
  std____2____throw_failure_28char_20const__29(7524);
  abort();
 }
}
function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___operator_20bool_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29_20const($0) >> 2] != 0;
}
function std____2__numpunct_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__numpunct_wchar_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__numpunct_wchar_t___numpunct_28unsigned_20long_29(26816, 1);
}
function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____num_put_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____num_get_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__messages_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__messages_wchar_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__messages_wchar_t___messages_28unsigned_20long_29(27016, 1);
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0));
}
function std____2__messages_char___messages_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__messages_base__messages_base_28_29($0);
 HEAP32[$0 >> 2] = 18608;
 return $0;
}
function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29_20const($0) >> 2];
}
function std____2__moneypunct_wchar_t_2c_20false___do_pos_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 | 0] = 67109634;
 HEAP8[$0 + 1 | 0] = 262147;
 HEAP8[$0 + 2 | 0] = 1024;
 HEAP8[$0 + 3 | 0] = 4;
}
function std____2__moneypunct_wchar_t_2c_20false___do_neg_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 | 0] = 67109634;
 HEAP8[$0 + 1 | 0] = 262147;
 HEAP8[$0 + 2 | 0] = 1024;
 HEAP8[$0 + 3 | 0] = 4;
}
function std____2__collate_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__collate_wchar_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__collate_wchar_t___collate_28unsigned_20long_29(26712, 1);
}
function std____2__moneypunct_wchar_t_2c_20true___do_pos_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 | 0] = 67109634;
 HEAP8[$0 + 1 | 0] = 262147;
 HEAP8[$0 + 2 | 0] = 1024;
 HEAP8[$0 + 3 | 0] = 4;
}
function std____2__moneypunct_wchar_t_2c_20true___do_neg_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 | 0] = 67109634;
 HEAP8[$0 + 1 | 0] = 262147;
 HEAP8[$0 + 2 | 0] = 1024;
 HEAP8[$0 + 3 | 0] = 4;
}
function neopt__IBinaryWriter__Write_28unsigned_20short_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1 & 255);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1 >>> 8 | 0);
}
function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($0) {
 std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($0, 0);
 return $0;
}
function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator_20bool_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29_20const($0) >> 2] != 0;
}
function std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 | 0] = 67109634;
 HEAP8[$0 + 1 | 0] = 262147;
 HEAP8[$0 + 2 | 0] = 1024;
 HEAP8[$0 + 3 | 0] = 4;
}
function std____2__moneypunct_char_2c_20false___do_neg_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 | 0] = 67109634;
 HEAP8[$0 + 1 | 0] = 262147;
 HEAP8[$0 + 2 | 0] = 1024;
 HEAP8[$0 + 3 | 0] = 4;
}
function neopt__StringReader___StringReader_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 2816;
 $1 = HEAP32[$0 + 4 >> 2];
 if ($1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1);
 }
 return $0 | 0;
}
function std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 25496);
}
function std____2__moneypunct_char_2c_20true___do_pos_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 | 0] = 67109634;
 HEAP8[$0 + 1 | 0] = 262147;
 HEAP8[$0 + 2 | 0] = 1024;
 HEAP8[$0 + 3 | 0] = 4;
}
function std____2__moneypunct_char_2c_20true___do_neg_format_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 | 0] = 67109634;
 HEAP8[$0 + 1 | 0] = 262147;
 HEAP8[$0 + 2 | 0] = 1024;
 HEAP8[$0 + 3 | 0] = 4;
}
function std____2____throw_length_error_28char_20const__29($0) {
 var $1 = 0;
 $1 = __cxa_allocate_exception(8) | 0;
 std__length_error__length_error_28char_20const__29($1, $0);
 __cxa_throw($1 | 0, 20664, 2);
 abort();
}
function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29____unique_ptr_28_29($0) {
 std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___reset_28unsigned_20int__29($0, 0);
 return $0;
}
function std____2__numpunct_char___20std____2___28anonymous_20namespace_29__make_std____2__numpunct_char__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__numpunct_char___numpunct_28unsigned_20long_29(26784, 1);
}
function std____2__messages_char___20std____2___28anonymous_20namespace_29__make_std____2__messages_char__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__messages_char___messages_28unsigned_20long_29(27008, 1);
}
function std____2____stdoutbuf_wchar_t______stdoutbuf_28_29($0) {
 $0 = $0 | 0;
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0);
 operator_20delete_28void__29($0);
}
function void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_2c_20int_29($0) {
 HEAP32[$0 >> 2] = -1;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
 return HEAP32[$0 >> 2] + ($1 << 2) | 0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0) {
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29(HEAP32[$0 >> 2]);
 return $0;
}
function std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29___second_28_29($0) {
 return std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}
function legalstub$dynCall_iiiiij($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return dynCall_iiiiij($0, $1, $2, $3, $4, $5, $6) | 0;
}
function copysignl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4 & 65535 | ($8 >>> 16 & 32768 | $4 >>> 16 & 32767) << 16;
}
function std__logic_error___logic_error_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 20584;
 std____2____libcpp_refstring_____libcpp_refstring_28_29($0 + 4 | 0);
 std__exception___exception_28_29($0);
 return $0 | 0;
}
function std____2__ctype_wchar_t___ctype_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 std____2__ctype_base__ctype_base_28_29($0);
 HEAP32[$0 >> 2] = 14708;
 return $0;
}
function std____2____stdinbuf_wchar_t______stdinbuf_28_29($0) {
 $0 = $0 | 0;
 std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___second_28_29($0) {
 return std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}
function std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 std____2__allocator_wchar_t___allocator_28_29($0);
 return $0;
}
function __wasi_syscall_ret($0) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 if (!$0) {
  return 0;
 }
 wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return -1;
}
function std____2__iterator_traits_char_20const____difference_type_20std____2____distance_char_20const___28char_20const__2c_20char_20const__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return $1 - $0 | 0;
}
function std____2__ctype_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__ctype_wchar_t__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__ctype_wchar_t___ctype_28unsigned_20long_29(26736, 1);
}
function std____2____time_put____time_put_28_29($0) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2____cloc_28_29(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function std____2__collate_char___20std____2___28anonymous_20namespace_29__make_std____2__collate_char__2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__collate_char___collate_28unsigned_20long_29(26704, 1);
}
function std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 25488);
}
function std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 25440);
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 7172;
 std____2__locale___locale_28_29($0 + 4 | 0);
 return $0 | 0;
}
function std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____get_28_29_20const($0);
}
function std____2__locale____imp__20std____2___28anonymous_20namespace_29__make_std____2__locale____imp_2c_20unsigned_20int__28unsigned_20int_29() {
 std____2__locale____imp____imp_28unsigned_20long_29(27024, 1);
}
function std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29_20const($0) >> 2];
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $2) | 0;
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 std____2__allocator_char___allocator_28_29($0);
 return $0;
}
function char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 $1 = HEAPU16[($1 << 1) + 20128 >> 1];
 HEAP8[$0 | 0] = $1;
 HEAP8[$0 + 1 | 0] = $1 >>> 8;
 return $0 + 2 | 0;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___operator_5b_5d_28unsigned_20long_29($0, $1) {
 return HEAP32[$0 >> 2] + ($1 << 2) | 0;
}
function std____2____stdoutbuf_char______stdoutbuf_28_29($0) {
 $0 = $0 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2____num_get_char_____do_widen_28std____2__ios_base__2c_20char__29_20const($0, $1, $2) {
 return std____2____num_get_char_____do_widen_p_28std____2__ios_base__2c_20char__29_20const($0, $1, $2);
}
function std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___second_28_29($0) {
 return std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}
function void_20std____2___28anonymous_20namespace_29____libcpp_relaxed_store_unsigned_20long_20volatile_2c_20unsigned_20long__28unsigned_20long_20volatile__2c_20unsigned_20long_29($0) {
 HEAP32[$0 >> 2] = 1;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___pbackfail_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return std____2__char_traits_wchar_t___eof_28_29() | 0;
}
function dynCall_iiiiiii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
}
function __uselocale($0) {
 var $1 = 0, $2 = 0;
 $1 = __pthread_self_5();
 $2 = HEAP32[$1 + 176 >> 2];
 if ($0) {
  HEAP32[$1 + 176 >> 2] = ($0 | 0) == -1 ? 25196 : $0;
 }
 return ($2 | 0) == 25196 ? -1 : $2;
}
function std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = ($2 | 0) >= 0 ? (HEAPU16[HEAP32[$0 + 8 >> 2] + (($2 & 255) << 1) >> 1] & $1) != 0 : $3;
 return $3;
}
function std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0) {
 return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 25448);
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___overflow_28unsigned_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return std____2__char_traits_wchar_t___eof_28_29() | 0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 7108;
 std____2__locale___locale_28_29($0 + 4 | 0);
 return $0 | 0;
}
function std____2____stdinbuf_char______stdinbuf_28_29($0) {
 $0 = $0 | 0;
 std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
 operator_20delete_28void__29($0);
}
function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20short__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20short__20___get_28_29();
}
function wmemset($0, $1, $2) {
 var $3 = 0;
 if ($2) {
  $3 = $0;
  while (1) {
   HEAP32[$3 >> 2] = $1;
   $3 = $3 + 4 | 0;
   $2 = $2 + -1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function std__type_info__name_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
 return HEAP32[$1 + 12 >> 2];
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0));
}
function std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1, $2) {
 return HEAPU32[$1 >> 2] < HEAPU32[$2 >> 2];
}
function std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_28_29($0) {
 return std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}
function legalstub$dynCall_viijii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 dynCall_viijii($0, $1, $2, $3, $4, $5, $6);
}
function std____2____widen_from_utf8_32ul_____widen_from_utf8_28_29($0) {
 std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0, 1);
 HEAP32[$0 >> 2] = 15332;
 return $0;
}
function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20long__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20long__20___get_28_29();
}
function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20char__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20char__20___get_28_29();
}
function dynCall_iidiiii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
}
function std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___get_deleter_28_29($0) {
 return std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___second_28_29($0);
}
function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29_20const($0) >> 2];
}
function emscripten__internal__LightTypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__20___get_28_29() {
 return 6056;
}
function std____2____narrow_to_utf8_32ul_____narrow_to_utf8_28_29($0) {
 std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0, 1);
 HEAP32[$0 >> 2] = 15236;
 return $0;
}
function std____2____compressed_pair_elem_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____rep_2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29_1($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] + -1 | 0;
 HEAP32[$0 >> 2] = $1;
 return $1;
}
function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20int__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20int__20___get_28_29();
}
function arg_n($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = (($1 << 2) - ((($1 | 0) != 0) << 2) | 0) + $0 | 0;
 HEAP32[$2 + 8 >> 2] = $0 + 4;
 return HEAP32[$0 >> 2];
}
function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function __DOUBLE_BITS($0) {
 var $1 = 0, $2 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $2 = wasm2js_scratch_load_i32(0) | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $2;
}
function std__get_new_handler_28_29() {
 return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(27292);
}
function std____2__allocator_wchar_t__20const__20std____2__forward_std____2__allocator_wchar_t__20const___28std____2__remove_reference_std____2__allocator_wchar_t__20const____type__29($0) {
 return $0;
}
function std____2__allocator_traits_std____2__allocator_char__20_____select_on_container_copy_construction_28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_char__20const__29($0) {}
function emscripten__internal__TypeID_emscripten__memory_view_signed_20char__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_signed_20char__20___get_28_29();
}
function std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29($0, $1, $2) {
 if ($1) {
  memset($0, std____2__char_traits_char___to_int_type_28char_29($2), $1);
 }
 return $0;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___size_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
}
function std____2__locale__use_facet_28std____2__locale__id__29_20const($0, $1) {
 return std____2__locale____imp__use_facet_28long_29_20const(HEAP32[$0 >> 2], std____2__locale__id____get_28_29($1));
}
function std____2__locale__locale_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[std____2__locale____global_28_29() >> 2];
 HEAP32[$0 >> 2] = $1;
 std____2____shared_count____add_shared_28_29($1);
 return $0;
}
function std____2__allocator_wchar_t___deallocate_28wchar_t__2c_20unsigned_20long_29($0, $1, $2) {
 std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($1, $2 << 2, 4);
}
function std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____get_28_29_20const($0);
}
function std____2____compressed_pair_unsigned_20char__2c_20void_20_28__29_28void__29___first_28_29($0) {
 return std____2____compressed_pair_elem_unsigned_20char__2c_200_2c_20false_____get_28_29($0);
}
function void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
 void_20std____2____reverse_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29____unique_ptr_28_29($0) {
 std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___reset_28wchar_t__29($0, 0);
 return $0;
}
function std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, $1, $2, $3) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $2, $3) | 0;
}
function std____2____compressed_pair_unsigned_20int__2c_20void_20_28__29_28void__29___first_28_29($0) {
 return std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____get_28_29($0);
}
function dynCall_viiiiii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
}
function unsigned_20long_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____align_it_4ul__28unsigned_20long_29($0) {
 return $0 + 3 & -4;
}
function std____2__iterator_traits_wchar_t____difference_type_20std____2____distance_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return $1 - $0 >> 2;
}
function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetn_28char__2c_20long_29($0, $1, $2) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2) | 0;
}
function std____2____itoa____traits_base_unsigned_20int_2c_20void_____convert_28unsigned_20int_2c_20char__29($0, $1) {
 return std____2____itoa____u32toa_28unsigned_20int_2c_20char__29($0, $1);
}
function std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_char__2c_200_2c_20false_____get_28_29_20const($0);
}
function __cxx_global_array_dtor_17($0) {
 $0 = $0 | 0;
 $0 = HEAP32[5497];
 HEAP32[5497] = 0;
 if ($0) {
  operator_20delete_28void__29(Neo__Cryptography__ECC__ECCurve___ECCurve_28_29($0));
 }
}
function __cxx_global_array_dtor_12($0) {
 $0 = $0 | 0;
 $0 = HEAP32[5496];
 HEAP32[5496] = 0;
 if ($0) {
  operator_20delete_28void__29(Neo__Cryptography__ECC__ECCurve___ECCurve_28_29($0));
 }
}
function void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20char_2c_20unsigned_20char__28unsigned_20char__2c_20unsigned_20char_2c_20int_29($0) {
 HEAP8[$0 | 0] = 1;
}
function std____2__allocator_char__20const__20std____2__forward_std____2__allocator_char__20const___28std____2__remove_reference_std____2__allocator_char__20const____type__29($0) {
 return $0;
}
function int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29() {
 var $0 = 0;
 $0 = HEAP32[6359] + 1 | 0;
 HEAP32[6359] = $0;
 return $0;
}
function std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2, $3) | 0;
}
function __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}
function unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____align_it_16ul__28unsigned_20long_29($0) {
 return $0 + 15 & -16;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____invalidate_iterators_past_28std____2__locale__facet___29($0, $1) {}
function std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___get_deleter_28_29($0) {
 return std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___second_28_29($0);
}
function __cxx_global_array_dtor_44($0) {
 $0 = $0 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29(25664);
}
function __cxx_global_array_dtor_40($0) {
 $0 = $0 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29(25632);
}
function __cxx_global_array_dtor_36($0) {
 $0 = $0 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29(25600);
}
function __cxx_global_array_dtor_32($0) {
 $0 = $0 | 0;
 std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____basic_string_28_29(25568);
}
function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($0) {
 std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___reset_28char__29($0, 0);
 return $0;
}
function std____2__fpos___mbstate_t___fpos_28long_20long_29($0, $1, $2) {
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 return $0;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___getloc_28_29_20const($0, $1) {
 std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 4 | 0);
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return std____2__char_traits_char___eof_28_29() | 0;
}
function std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, $1, $2) {
 std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($1, $2, 1);
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___overflow_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return std____2__char_traits_char___eof_28_29() | 0;
}
function stackAlloc($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $0 = global$0 - $0 & -16;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function emscripten__internal__TypeID_emscripten__memory_view_double__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_double__20___get_28_29();
}
function __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___setbuf_28wchar_t__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $0 | 0;
}
function void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29($0) {
 return HEAP32[$0 >> 2];
}
function emscripten__internal__TypeID_emscripten__memory_view_short__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_short__20___get_28_29();
}
function emscripten__internal__TypeID_emscripten__memory_view_float__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_float__20___get_28_29();
}
function dynCall_iiiiii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5) | 0;
}
function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___get_deleter_28_29($0) {
 return std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___second_28_29($0);
}
function std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___operator___28_29($0) {
 return $0;
}
function std____2__locale__locale_28std____2__locale_20const__29($0, $1) {
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 >> 2] = $1;
 std____2____shared_count____add_shared_28_29($1);
 return $0;
}
function std____2__iterator_traits_char____difference_type_20std____2____distance_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return $1 - $0 | 0;
}
function std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___operator__28_29($0) {
 return $0;
}
function std____2____compressed_pair_wchar_t__2c_20void_20_28__29_28void__29___first_28_29($0) {
 return std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____get_28_29($0);
}
function emscripten__internal__TypeID_emscripten__memory_view_long__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_long__20___get_28_29();
}
function emscripten__internal__TypeID_emscripten__memory_view_char__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_char__20___get_28_29();
}
function emscripten__internal__LightTypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__20___get_28_29() {
 return 6328;
}
function emscripten__internal__LightTypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__20___get_28_29() {
 return 6236;
}
function __wasm_call_ctors() {
 __emscripten_environ_constructor();
 _GLOBAL__I_000101();
 _GLOBAL__sub_I_neopt_test_cpp();
 _GLOBAL__sub_I_bind_cpp();
 _GLOBAL__sub_I_iostream_cpp();
}
function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_date_order_28_29_20const($0) {
 $0 = $0 | 0;
 return 2;
}
function std____2__pointer_traits_wchar_t_20const____pointer_to_28wchar_t_20const__29($0) {
 return wchar_t_20const__20std____2__addressof_wchar_t_20const__28wchar_t_20const__29($0);
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($0, $1) {
 std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 4 | 0);
}
function dynCall_iiiiid($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5) | 0;
}
function emscripten__internal__TypeID_emscripten__memory_view_int__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_int__20___get_28_29();
}
function bool_20std____2____ptr_in_range_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
 return $0 >>> 0 < $2 >>> 0 & $1 >>> 0 <= $0 >>> 0;
}
function __cxx_global_array_dtor_42($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(25648);
}
function __cxx_global_array_dtor_38($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(25616);
}
function __cxx_global_array_dtor_34($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(25584);
}
function void_20std____2__reverse_char___28char__2c_20char__29($0, $1) {
 void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function neopt__BinaryWriter__CountBytes_28_29_20const($0) {
 $0 = $0 | 0;
 $0 = HEAP32[$0 + 8 >> 2];
 if (!$0) {
  return -1;
 }
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0;
}
function emscripten__internal__LightTypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___get_28_29() {
 return 6144;
}
function __cxx_global_array_dtor_3($0) {
 $0 = $0 | 0;
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(25552);
}
function std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($1 >>> 0 < 128 ? $1 : $2) << 24 >> 24;
}
function __cxxabiv1____class_type_info_____class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__locale__facet__facet_28unsigned_20long_29($0, $1) {
 std____2____shared_count____shared_count_28long_29($0, $1 + -1 | 0);
 HEAP32[$0 >> 2] = 14652;
 return $0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setbuf_28char__2c_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $0 | 0;
}
function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ios_28_29($0) {
 std____2__ios_base__ios_base_28_29($0);
 HEAP32[$0 >> 2] = 7648;
 return $0;
}
function std____2____refstring_imp___28anonymous_20namespace_29__data_from_rep_28std____2____refstring_imp___28anonymous_20namespace_29___Rep_base__29($0) {
 return $0 + 12 | 0;
}
function std____2____equal_to_wchar_t_2c_20wchar_t___operator_28_29_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2) {
 return HEAP32[$1 >> 2] == HEAP32[$2 >> 2];
}
function std____2____compressed_pair_char__2c_20void_20_28__29_28void__29___first_28_29($0) {
 return std____2____compressed_pair_elem_char__2c_200_2c_20false_____get_28_29($0);
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___underflow_28_29($0) {
 $0 = $0 | 0;
 return std____2__char_traits_wchar_t___eof_28_29() | 0;
}
function std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($0) {
 return $0;
}
function std____2__remove_reference_std____2__allocator_wchar_t_____type___20std____2__move_std____2__allocator_wchar_t____28std____2__allocator_wchar_t___29($0) {
 return $0;
}
function std____2__collate_wchar_t___collate_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 HEAP32[$0 >> 2] = 15752;
 return $0;
}
function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___setstate_28unsigned_20int_29($0, $1) {
 std____2__ios_base__setstate_28unsigned_20int_29($0, $1);
}
function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator___28_29($0) {
 return $0;
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28_29($0) {
 return $0;
}
function dynCall_viiiii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
}
function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_date_order_28_29_20const($0) {
 $0 = $0 | 0;
 return 2;
}
function std____2__allocator_char____20std____2__forward_std____2__allocator_char__20__28std____2__remove_reference_std____2__allocator_char__20___type__29($0) {
 return $0;
}
function neopt__BinaryReader__Good_28_29_20const($0) {
 $0 = $0 | 0;
 $0 = HEAP32[$0 + 4 >> 2];
 return !HEAP32[($0 + HEAP32[HEAP32[$0 >> 2] + -12 >> 2] | 0) + 16 >> 2] | 0;
}
function unsigned_20char_20std____2___28anonymous_20namespace_29____libcpp_atomic_load_unsigned_20char__28unsigned_20char_20const__2c_20int_29($0) {
 return HEAPU8[$0 | 0];
}
function std____2__collate_char___collate_28unsigned_20long_29($0, $1) {
 std____2__locale__facet__facet_28unsigned_20long_29($0, $1);
 HEAP32[$0 >> 2] = 15720;
 return $0;
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_iterators_past_28unsigned_20long_29($0, $1) {}
function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29($0) {
 $0 = $0 | 0;
 std____2__ios_base___ios_base_28_29($0);
 return $0 | 0;
}
function wcslen($0) {
 var $1 = 0, $2 = 0;
 $2 = $0;
 while (1) {
  $1 = $2;
  $2 = $1 + 4 | 0;
  if (HEAP32[$1 >> 2]) {
   continue;
  }
  break;
 }
 return $1 - $0 >> 2;
}
function std____2__char_traits_wchar_t___move_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 if ($2) {
  $0 = wmemmove($0, $1, $2);
 }
 return $0;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___basic_ios_28_29($0) {
 std____2__ios_base__ios_base_28_29($0);
 HEAP32[$0 >> 2] = 7576;
 return $0;
}
function emscripten__internal__LightTypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___get_28_29() {
 return 5172;
}
function std____2__locale____imp__make_global_28_29() {
 std____2__locale__locale_28std____2__locale_20const__29(25424, std____2__locale__classic_28_29());
 return 25424;
}
function std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
 if ($2) {
  $0 = wmemcpy($0, $1, $2);
 }
 return $0;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___pubsync_28_29($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
}
function std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($0, $1, $2) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1, $2) | 0;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29($0, $1) {
 std____2__ios_base__setstate_28unsigned_20int_29($0, $1);
}
function bool_20std____2____ptr_in_range_char__28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
 return $0 >>> 0 < $2 >>> 0 & $1 >>> 0 <= $0 >>> 0;
}
function neopt__IBinaryWriter__Write_28neopt__ISerializable_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 4 >> 2]]($1, $0);
}
function std____2__pointer_traits_char_20const____pointer_to_28char_20const__29($0) {
 return char_20const__20std____2__addressof_char_20const__28char_20const__29($0);
}
function std____2__moneypunct_wchar_t_2c_20false____moneypunct_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___underflow_28_29($0) {
 $0 = $0 | 0;
 return std____2__char_traits_char___eof_28_29() | 0;
}
function std____2____wrap_iter_wchar_t____operator__28long_29_20const($0, $1) {
 return std____2____wrap_iter_wchar_t____operator__28long_29_20const_1($0, 0 - $1 | 0);
}
function std____2____widen_from_utf8_32ul______widen_from_utf8_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_201_2c_20false_____get_28_29($0) {
 return HEAP32[$0 >> 2];
}
function std__length_error__length_error_28char_20const__29($0, $1) {
 std__logic_error__logic_error_28char_20const__29($0, $1);
 HEAP32[$0 >> 2] = 20632;
 return $0;
}
function std____2__remove_reference_void_20_28___29_28void__29___type___20std____2__move_void_20_28___29_28void__29__28void_20_28___29_28void__29_29($0) {
 return $0;
}
function std____2__remove_reference_std____2__locale__facet______type___20std____2__move_std____2__locale__facet_____28std____2__locale__facet____29($0) {
 return $0;
}
function std____2__remove_reference_std____2__allocator_char_____type___20std____2__move_std____2__allocator_char____28std____2__allocator_char___29($0) {
 return $0;
}
function std____2__moneypunct_wchar_t_2c_20true____moneypunct_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___gbump_28int_29($0, $1) {
 HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + ($1 << 2);
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0) {
 $0 = $0 | 0;
 std____2__ios_base___ios_base_28_29($0);
 return $0 | 0;
}
function std____2__locale__facet___20std____2__forward_std____2__locale__facet____28std____2__remove_reference_std____2__locale__facet_____type__29($0) {
 return $0;
}
function std____2____narrow_to_utf8_32ul______narrow_to_utf8_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function void_20_28___std____2__forward_void_20_28__29_28void__29__28std____2__remove_reference_void_20_28__29_28void__29___type__29_29_28void__29($0) {
 return $0;
}
function std____2__moneypunct_char_2c_20false____moneypunct_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__ctype_char___do_narrow_28char_2c_20char_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (($1 | 0) > -1 ? $1 : $2) | 0;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pubsync_28_29($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
}
function std____2__moneypunct_char_2c_20true____moneypunct_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__char_traits_wchar_t___assign_28wchar_t__2c_20unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
 if ($1) {
  $0 = wmemset($0, $2, $1);
 }
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_iterators_past_28unsigned_20long_29($0, $1) {}
function std____2____equal_to_char_2c_20char___operator_28_29_28char_20const__2c_20char_20const__29_20const($0, $1, $2) {
 return HEAPU8[$1 | 0] == HEAPU8[$2 | 0];
}
function std____2___DeallocateCaller____do_deallocate_handle_size_28void__2c_20unsigned_20long_29($0, $1) {
 std____2___DeallocateCaller____do_call_28void__29($0);
}
function long_20std____2____libcpp_atomic_refcount_decrement_long__28long__29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] + -1 | 0;
 HEAP32[$0 >> 2] = $1;
 return $1;
}
function std____2__numeric_limits_unsigned_20long_20long___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20long_20long_2c_20true___max_28_29();
}
function std____2___28anonymous_20namespace_29__release__operator_28_29_28std____2__locale__facet__29($0) {
 std____2____shared_count____release_shared_28_29($0);
}
function long_20std____2____libcpp_atomic_refcount_increment_long__28long__29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] + 1 | 0;
 HEAP32[$0 >> 2] = $1;
 return $1;
}
function dynCall_iiiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
}
function std____2__moneypunct_wchar_t_2c_20false___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_wchar_t___max_28_29() | 0;
}
function std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_wchar_t___max_28_29() | 0;
}
function std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($0, $1, $2) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1, $2) | 0;
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
}
function std____2____wrap_iter_char____operator__28long_29_20const($0, $1) {
 return std____2____wrap_iter_char____operator__28long_29_20const_1($0, 0 - $1 | 0);
}
function std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__2c_201_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____invalidate_all_iterators_28_29($0) {}
function std____2__moneypunct_wchar_t_2c_20true___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_wchar_t___max_28_29() | 0;
}
function std____2__moneypunct_wchar_t_2c_20true___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_wchar_t___max_28_29() | 0;
}
function std____2____less_long_2c_20long___operator_28_29_28long_20const__2c_20long_20const__29_20const($0, $1, $2) {
 return HEAP32[$1 >> 2] < HEAP32[$2 >> 2];
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
}
function unsigned_20long_20std____2___28anonymous_20namespace_29__countof_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__29($0, $1) {
 return $1 - $0 >> 2;
}
function std____2__numeric_limits_unsigned_20short___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___min_28_29() & 65535;
}
function std____2__numeric_limits_unsigned_20short___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___max_28_29() & 65535;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function std____2____time_put_____time_put_28_29($0) {
 if (HEAP32[$0 >> 2] != (std____2____cloc_28_29() | 0)) {
  freelocale(HEAP32[$0 >> 2]);
 }
 return $0;
}
function std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  __uselocale($1);
 }
 return $0;
}
function std____2____basic_string_common_true_____throw_out_of_range_28_29_20const($0) {
 std____2____throw_out_of_range_28char_20const__29(20328);
 abort();
}
function std____2____basic_string_common_true_____throw_length_error_28_29_20const($0) {
 std____2____throw_length_error_28char_20const__29(20328);
 abort();
}
function std____2__numpunct_wchar_t____numpunct_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__numpunct_wchar_t____numpunct_28_29($0));
}
function std____2__numeric_limits_signed_20char___min_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() << 24 >> 24;
}
function std____2__numeric_limits_signed_20char___max_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___max_28_29() << 24 >> 24;
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
}
function std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 if ($2) {
  memmove($0, $1, $2);
 }
 return $0;
}
function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___rdbuf_28_29_20const($0) {
 return std____2__ios_base__rdbuf_28_29_20const($0);
}
function std____2____vector_base_common_true_____throw_length_error_28_29_20const($0) {
 std____2____throw_length_error_28char_20const__29(20424);
 abort();
}
function std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($0, $1, $2) {
 return HEAP32[$1 >> 2] < HEAP32[$2 >> 2];
}
function std____2__moneypunct_char_2c_20false___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_char___max_28_29() | 0;
}
function std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_char___max_28_29() | 0;
}
function std____2__ctype_char___narrow_28char_2c_20char_29_20const($0, $1, $2) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2) | 0;
}
function std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 if ($2) {
  memcpy($0, $1, $2);
 }
 return $0;
}
function std____2__numeric_limits_unsigned_20char___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___min_28_29() & 255;
}
function std____2__numeric_limits_unsigned_20char___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___max_28_29() & 255;
}
function std____2__moneypunct_char_2c_20true___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_char___max_28_29() | 0;
}
function std____2__moneypunct_char_2c_20true___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2__numeric_limits_char___max_28_29() | 0;
}
function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___good_28_29_20const($0) {
 return std____2__ios_base__good_28_29_20const($0);
}
function neopt__IBinaryWriter__Write_28long_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $1 >> 31);
}
function emscripten__internal__TypeID_unsigned_20short_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20short___get_28_29();
}
function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___derived_28_29($0) {
 return $0;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___gbump_28int_29($0, $1) {
 HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + $1;
}
function std____2____compressed_pair_elem_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__2c_201_2c_20false_____get_28_29($0) {
 return $0;
}
function neopt__IBinaryWriter__Write_28short_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1 & 65535);
}
function std____2__messages_wchar_t____messages_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__collate_wchar_t____collate_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__collate_wchar_t____collate_28_29($0));
}
function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____invalidate_all_iterators_28_29($0) {}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___imbue_28std____2__locale_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function emscripten__internal__TypeID_unsigned_20long_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20long___get_28_29();
}
function emscripten__internal__TypeID_unsigned_20char_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20char___get_28_29();
}
function emscripten__internal__TypeID_emscripten__val_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__val___get_28_29();
}
function std____2__moneypunct_wchar_t_2c_20false___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0;
}
function std____2__moneypunct_wchar_t_2c_20false___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0) | 0;
}
function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____proxy__operator__28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function legalstub$dynCall_ji($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = dynCall_ji($0, $1);
 setTempRet0(i64toi32_i32$HIGH_BITS | 0);
 return $0 | 0;
}
function dynCall_viiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4);
}
function std____2__numpunct_char____numpunct_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__numpunct_char____numpunct_28_29($0));
}
function std____2__moneypunct_wchar_t_2c_20true___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0;
}
function std____2__moneypunct_wchar_t_2c_20true___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0) | 0;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($0) {
 return std____2__ios_base__rdbuf_28_29_20const($0);
}
function emscripten__internal__TypeID_unsigned_20int_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20int___get_28_29();
}
function std____2__moneypunct_wchar_t_2c_20false___frac_digits_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
}
function std____2__messages_char____messages_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__operator_20bool_28_29_20const($0) {
 return HEAPU8[$0 | 0];
}
function unsigned_20long_20std____2___28anonymous_20namespace_29__countof_char__28char_20const__2c_20char_20const__29($0, $1) {
 return $1 - $0 | 0;
}
function std____2__numeric_limits_unsigned_20long___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___min_28_29();
}
function std____2__numeric_limits_unsigned_20long___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___max_28_29();
}
function std____2__moneypunct_wchar_t_2c_20true___frac_digits_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
}
function std____2__moneypunct_wchar_t_2c_20false___positive_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($0, $1);
}
function std____2__moneypunct_wchar_t_2c_20false___negative_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20false___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0;
}
function std____2__moneypunct_char_2c_20false___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0) | 0;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const($0) {
 return std____2__ios_base__good_28_29_20const($0);
}
function emscripten__internal__TypeID_signed_20char_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_signed_20char___get_28_29();
}
function std____2__moneypunct_wchar_t_2c_20true___positive_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($0, $1);
}
function std____2__moneypunct_wchar_t_2c_20true___negative_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20true___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0;
}
function std____2__moneypunct_char_2c_20true___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0) | 0;
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___istreambuf_iterator_28_29($0) {
 HEAP32[$0 >> 2] = 0;
 return $0;
}
function std____2__ios_base__setf_28unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = $2 | $1;
 return $2;
}
function std____2____tuple_leaf_0ul_2c_20std____2___28anonymous_20namespace_29____fake_bind___2c_20false___get_28_29($0) {
 return HEAP32[$0 >> 2];
}
function __emscripten_stdout_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 i64toi32_i32$HIGH_BITS = 0;
 return 0;
}
function std____2__numeric_limits_unsigned_20int___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___min_28_29();
}
function std____2__numeric_limits_unsigned_20int___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___max_28_29();
}
function std____2__moneypunct_wchar_t_2c_20false___curr_symbol_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20false___frac_digits_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
}
function std____2__locale__facet____on_zero_shared_28_29($0) {
 $0 = $0 | 0;
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
}
function std____2__ios_base__setstate_28unsigned_20int_29($0, $1) {
 std____2__ios_base__clear_28unsigned_20int_29($0, HEAP32[$0 + 16 >> 2] | $1);
}
function std____2__ctype_wchar_t____ctype_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__collate_char____collate_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__collate_char____collate_28_29($0));
}
function std____2____stdinbuf_wchar_t___underflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 0) | 0;
}
function std__length_error___length_error_28_29($0) {
 $0 = $0 | 0;
 std__logic_error___logic_error_28_29($0);
 operator_20delete_28void__29($0);
}
function std____2__moneypunct_wchar_t_2c_20true___curr_symbol_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
}
function std____2__moneypunct_wchar_t_2c_20false___pos_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($0, $1);
}
function std____2__moneypunct_wchar_t_2c_20false___neg_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
}
function std____2__moneypunct_char_2c_20false___positive_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20false___negative_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($0, $1);
}
function neopt__JObject__getValue_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($0, $1);
}
function char__20std____2____itoa__append1_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
 HEAP8[$0 | 0] = $1 + 48;
 return $0 + 1 | 0;
}
function __strdup($0) {
 var $1 = 0, $2 = 0;
 $1 = strlen($0) + 1 | 0;
 $2 = dlmalloc($1);
 if (!$2) {
  return 0;
 }
 return memcpy($2, $0, $1);
}
function __cxx_global_array_dtor_6($0) {
 $0 = $0 | 0;
 $0 = HEAP32[5493];
 if ($0) {
  HEAP32[5494] = $0;
  operator_20delete_28void__29($0);
 }
}
function __cxx_global_array_dtor_4($0) {
 $0 = $0 | 0;
 $0 = HEAP32[5490];
 if ($0) {
  HEAP32[5491] = $0;
  operator_20delete_28void__29($0);
 }
}
function __cxx_global_array_dtor_2($0) {
 $0 = $0 | 0;
 $0 = HEAP32[5487];
 if ($0) {
  HEAP32[5488] = $0;
  operator_20delete_28void__29($0);
 }
}
function std____2__moneypunct_wchar_t_2c_20true___pos_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($0, $1);
}
function std____2__moneypunct_wchar_t_2c_20true___neg_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20true___positive_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($0, $1);
}
function std____2__messages_wchar_t___do_close_28long_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 catclose(($1 | 0) == -1 ? -1 : $1 << 1);
}
function std____2__ctype_wchar_t___toupper_28wchar_t_29_20const($0, $1) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1) | 0;
}
function std____2__moneypunct_wchar_t_2c_20false___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20false___curr_symbol_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
}
function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____proxy__operator__28_29_20const($0) {
 return HEAP8[$0 | 0];
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____invalidate_all_iterators_28_29($0) {}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($0) {
 return HEAPU8[$0 | 0];
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__operator_20bool_28_29_20const($0) {
 return HEAPU8[$0 | 0];
}
function neopt__IBinaryWriter__Write_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
}
function __cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 $0 = HEAP32[5484];
 if ($0) {
  HEAP32[5485] = $0;
  operator_20delete_28void__29($0);
 }
}
function std____2__pointer_traits_wchar_t____pointer_to_28wchar_t__29($0) {
 return wchar_t__20std____2__addressof_wchar_t__28wchar_t__29($0);
}
function std____2__moneypunct_wchar_t_2c_20true___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20true___curr_symbol_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20false___pos_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20false___neg_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($0, $1);
}
function std____2__locale__facet___facet_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__locale__facet___facet_28_29($0));
}
function std____2__locale____imp_____imp_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__locale____imp_____imp_28_29($0));
}
function std____2____stdinbuf_wchar_t___uflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 1) | 0;
}
function std____2____shared_count____add_shared_28_29($0) {
 long_20std____2____libcpp_atomic_refcount_increment_long__28long__29($0 + 4 | 0);
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20short__28_29() {
 return 3;
}
function $28anonymous_20namespace_29__AtomicInt_unsigned_20char___AtomicInt_28unsigned_20char__29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function unsigned_20char___20std____2__forward_unsigned_20char____28std____2__remove_reference_unsigned_20char_____type__29($0) {
 return $0;
}
function std____2__moneypunct_char_2c_20true___pos_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($0, $1);
}
function std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($0, $1);
}
function std____2__messages_char___do_close_28long_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 catclose(($1 | 0) == -1 ? -1 : $1 << 1);
}
function neopt__IBinaryReader__ReadInt16_28_29($0) {
 $0 = $0 | 0;
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) << 16 >> 16;
}
function __wasm_i64_udiv($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3);
 return $3;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20long__28_29() {
 return 5;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20char__28_29() {
 return 1;
}
function std__logic_error__what_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2____libcpp_refstring__c_str_28_29_20const($0 + 4 | 0) | 0;
}
function std__logic_error___logic_error_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std__logic_error___logic_error_28_29($0));
}
function std____2__numeric_limits_short___min_28_29() {
 return std____2____libcpp_numeric_limits_short_2c_20true___min_28_29() << 16 >> 16;
}
function std____2__numeric_limits_short___max_28_29() {
 return std____2____libcpp_numeric_limits_short_2c_20true___max_28_29() << 16 >> 16;
}
function std____2__numeric_limits_long_20long___min_28_29() {
 return std____2____libcpp_numeric_limits_long_20long_2c_20true___min_28_29();
}
function std____2__numeric_limits_long_20long___max_28_29() {
 return std____2____libcpp_numeric_limits_long_20long_2c_20true___max_28_29();
}
function std____2__moneypunct_char_2c_20false___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
}
function std____2____wrap_iter_wchar_t_20const____operator___28long_29($0, $1) {
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 << 2);
 return $0;
}
function std____2____stdinbuf_char___underflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_char_____getchar_28bool_29($0, 0) | 0;
}
function double_20std____2____do_strtod_double__28char_20const__2c_20char___29($0, $1) {
 return strtod_l($0, $1, std____2____cloc_28_29());
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20int__28_29() {
 return 5;
}
function std____2__moneypunct_char_2c_20true___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
}
function std____2__ctype_wchar_t___widen_28char_29_20const($0, $1) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1) | 0;
}
function dynCall_iiii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3) | 0;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_signed_20char__28_29() {
 return 0;
}
function unsigned_20int___20std____2__forward_unsigned_20int____28std____2__remove_reference_unsigned_20int_____type__29($0) {
 return $0;
}
function std____2__numpunct_wchar_t___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0;
}
function std____2__numpunct_wchar_t___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0) | 0;
}
function std____2__numeric_limits_char___min_28_29() {
 return std____2____libcpp_numeric_limits_char_2c_20true___min_28_29() << 24 >> 24;
}
function std____2__numeric_limits_char___max_28_29() {
 return std____2____libcpp_numeric_limits_char_2c_20true___max_28_29() << 24 >> 24;
}
function std____2__ios_base___ios_base_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__ios_base___ios_base_28_29($0));
}
function std____2__ctype_char___toupper_28char_29_20const($0, $1) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1) | 0;
}
function std____2__ctype_char____ctype_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std____2__ctype_char____ctype_28_29($0));
}
function neopt__IBinaryReader__ReadVarInt_28_29($0) {
 $0 = $0 | 0;
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, -1) | 0;
}
function float_20std____2____do_strtod_float__28char_20const__2c_20char___29($0, $1) {
 return strtof_l($0, $1, std____2____cloc_28_29());
}
function __wasm_rotl_i32($0, $1) {
 var $2 = 0;
 $2 = $1 & 31;
 $1 = 0 - $1 & 31;
 return (-1 >>> $2 & $0) << $2 | (-1 << $1 & $0) >>> $1;
}
function std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____sso_allocator_28_29($0) {
 HEAP8[$0 + 112 | 0] = 0;
 return $0;
}
function std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
 return operator_20new_28unsigned_20long_29($0);
}
function __cxxabiv1____shim_type_info_____shim_type_info_28_29($0) {
 $0 = $0 | 0;
 std__type_info___type_info_28_29($0);
 return $0 | 0;
}
function unsigned_20long_20std____2____libcpp_acquire_load_unsigned_20long__28unsigned_20long_20const__29($0) {
 return HEAP32[$0 >> 2];
}
function std____2__locale__facet___facet_28_29($0) {
 $0 = $0 | 0;
 std____2____shared_count_____shared_count_28_29($0);
 return $0 | 0;
}
function std____2__ctype_char___widen_28char_29_20const($0, $1) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1) | 0;
}
function std____2____stdinbuf_char___uflow_28_29($0) {
 $0 = $0 | 0;
 return std____2____stdinbuf_char_____getchar_28bool_29($0, 1) | 0;
}
function std____2__numpunct_char___thousands_sep_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0;
}
function std____2__numpunct_char___decimal_point_28_29_20const($0) {
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0) | 0;
}
function std____2__ios_base__width_28long_29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 12 >> 2];
 HEAP32[$0 + 12 >> 2] = $1;
 return $2;
}
function legalfunc$__wasi_fd_seek($0, $1, $2, $3, $4) {
 return legalimport$__wasi_fd_seek($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0;
}
function dynCall_iiiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9) | 0;
}
function __wasm_i64_mul($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
 return $3;
}
function Neo__SmartContract__InteropService__Crypto__Crypto_ECDsaSecp256r1Verify_28ApplicationEngine__29($0) {
 $0 = $0 | 0;
 return 1;
}
function std__type_info__operator___28std__type_info_20const__29_20const($0, $1) {
 return HEAP32[$0 + 4 >> 2] == HEAP32[$1 + 4 >> 2];
}
function std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($0) {
 return $0;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($0) {
 return !HEAP32[$0 >> 2];
}
function std____2__locale__facet___20std____2____to_address_std____2__locale__facet___28std____2__locale__facet___29($0) {
 return $0;
}
function std____2__ios_base__getloc_28_29_20const($0, $1) {
 std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 28 | 0);
}
function std____2____shared_count____shared_count_28long_29($0, $1) {
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = 20068;
 return $0;
}
function legalstub$dynCall_vij($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 dynCall_vij($0, $1, $2, $3);
}
function emscripten__internal__TypeID_double_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_double___get_28_29();
}
function std____2__remove_reference_unsigned_20int____type___20std____2__move_unsigned_20int___28unsigned_20int__29($0) {
 return $0;
}
function std____2____libcpp_numeric_limits_unsigned_20long_20long_2c_20true___max_28_29() {
 i64toi32_i32$HIGH_BITS = -1;
 return -1;
}
function neopt__IBinaryReader__ReadInt64_28_29($0) {
 $0 = $0 | 0;
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
}
function neopt__IBinaryReader__ReadInt32_28_29($0) {
 $0 = $0 | 0;
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
}
function std____2__numeric_limits_wchar_t___max_28_29() {
 return std____2____libcpp_numeric_limits_wchar_t_2c_20true___max_28_29();
}
function std____2__char_traits_wchar_t___eq_int_type_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
 return ($0 | 0) == ($1 | 0);
}
function std____2____wrap_iter_wchar_t____operator___28long_29($0, $1) {
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 << 2);
 return $0;
}
function emscripten__internal__TypeID_short_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_short___get_28_29();
}
function emscripten__internal__TypeID_float_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_float___get_28_29();
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_double__28_29() {
 return 7;
}
function std____2__numpunct_wchar_t___falsename_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($0, $1);
}
function std____2__collate_wchar_t____collate_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}
function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___tie_28_29_20const($0) {
 return HEAP32[$0 + 72 >> 2];
}
function __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__release_init_byte_28_29($0) {
 HEAP8[HEAP32[$0 + 8 >> 2]] = 1;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_short__28_29() {
 return 2;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_float__28_29() {
 return 6;
}
function std____2__numpunct_wchar_t___truename_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
}
function std____2__numpunct_wchar_t___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___showmanyc_28_29($0) {
 $0 = $0 | 0;
 return 0;
}
function std____2____wrap_iter_char_20const____operator___28long_29($0, $1) {
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + $1;
 return $0;
}
function std____2____libcpp_numeric_limits_long_20long_2c_20true___min_28_29() {
 i64toi32_i32$HIGH_BITS = -2147483648;
 return 0;
}
function std____2____libcpp_numeric_limits_long_20long_2c_20true___max_28_29() {
 i64toi32_i32$HIGH_BITS = 2147483647;
 return -1;
}
function emscripten__internal__TypeID_void_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_void___get_28_29();
}
function emscripten__internal__TypeID_long_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_long___get_28_29();
}
function emscripten__internal__TypeID_char_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_char___get_28_29();
}
function emscripten__internal__TypeID_bool_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_bool___get_28_29();
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_long__28_29() {
 return 4;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_char__28_29() {
 return 0;
}
function std____2__char_traits_wchar_t___assign_28wchar_t__2c_20wchar_t_20const__29($0, $1) {
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_int__28_29() {
 return 4;
}
function std____2__numpunct_char___falsename_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($0, $1);
}
function std____2__collate_char____collate_28_29($0) {
 $0 = $0 | 0;
 std____2__locale__facet___facet_28_29($0);
 return $0 | 0;
}
function std____2____wrap_iter_wchar_t_20const______wrap_iter_28wchar_t_20const__29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function std____2____libcpp_condvar_wait_28pthread_cond_t__2c_20pthread_mutex_t__29($0, $1) {
 return pthread_cond_wait($0, $1);
}
function emscripten__internal__TypeID_int_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_int___get_28_29();
}
function dynCall_viii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function std____2__pointer_traits_char____pointer_to_28char__29($0) {
 return char__20std____2__addressof_char__28char__29($0);
}
function std____2__numpunct_char___truename_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
}
function std____2__numpunct_char___grouping_28_29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
}
function std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____get_28_29_20const($0) {
 return $0;
}
function std____2__unitbuf_28std____2__ios_base__29($0) {
 std____2__ios_base__setf_28unsigned_20int_29($0, 8192);
 return $0;
}
function std____2__numeric_limits_long___min_28_29() {
 return std____2____libcpp_numeric_limits_long_2c_20true___min_28_29();
}
function std____2__numeric_limits_long___max_28_29() {
 return std____2____libcpp_numeric_limits_long_2c_20true___max_28_29();
}
function std____2__locale___locale_28_29($0) {
 std____2____shared_count____release_shared_28_29(HEAP32[$0 >> 2]);
 return $0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function dynCall_iiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8) | 0;
}
function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sync_28_29($0) {
 $0 = $0 | 0;
 return 0;
}
function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28_29_20const($0) {
 return HEAP32[$0 + 72 >> 2];
}
function std____2____refstring_imp___28anonymous_20namespace_29__rep_from_data_28char_20const__29($0) {
 return $0 + -12 | 0;
}
function std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function std____2__numeric_limits_int___min_28_29() {
 return std____2____libcpp_numeric_limits_int_2c_20true___min_28_29();
}
function std____2__numeric_limits_int___max_28_29() {
 return std____2____libcpp_numeric_limits_int_2c_20true___max_28_29();
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___showmanyc_28_29($0) {
 $0 = $0 | 0;
 return 0;
}
function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29($0, $1) {
 return $0;
}
function std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29($0, $1) {
 return $0;
}
function std____2____wrap_iter_wchar_t_20const____operator___28_29($0) {
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 4;
 return $0;
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29_20const($0) {
 return $0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
 $0 = $0 | 0;
 return 4;
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
 $0 = $0 | 0;
 return 4;
}
function stackRestore($0) {
 $0 = $0 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0) {
 return $0;
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const($0) {
 $0 = $0 | 0;
 return 1;
}
function std____2____wrap_iter_char____operator___28long_29($0, $1) {
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + $1;
 return $0;
}
function std____2____wrap_iter_char_20const______wrap_iter_28char_20const__29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function setThrew($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (!HEAP32[6948]) {
  HEAP32[6949] = $1;
  HEAP32[6948] = $0;
 }
}
function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29($0) {
 return $0;
}
function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function std____2____wrap_iter_char_20const____operator___28_29($0) {
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 return $0;
}
function std____2____num_get_char_____do_widen_p_28std____2__ios_base__2c_20char__29_20const($0, $1, $2) {
 return 13840;
}
function std____2____time_get_c_storage_wchar_t_____time_get_c_storage_28_29($0) {
 HEAP32[$0 >> 2] = 20032;
 return $0;
}
function std____2____sso_allocator_std____2__locale__facet__2c_2028ul___max_size_28_29_20const($0) {
 return 1073741823;
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
 $0 = $0 | 0;
 return 1;
}
function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29($0) {
 $0 = $0 | 0;
 return 0;
}
function std____2____compressed_pair_elem_std____2__allocator_wchar_t__2c_201_2c_20true_____get_28_29($0) {
 return $0;
}
function std____2__numpunct_wchar_t___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29($0, $1) {
 return $0;
}
function std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0, $1) {
 return $0;
}
function wchar_t___20std____2__forward_wchar_t____28std____2__remove_reference_wchar_t_____type__29($0) {
 return $0;
}
function std____2__numpunct_wchar_t___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
 $0 = $0 | 0;
 return 1;
}
function std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $1) {
 HEAP8[$0 | 0] = HEAPU8[$1 | 0];
}
function std____2____time_get_c_storage_char_____time_get_c_storage_28_29($0) {
 HEAP32[$0 >> 2] = 19996;
 return $0;
}
function std____2____compressed_pair_elem_void_20_28__29_28void__29_2c_201_2c_20false_____get_28_29($0) {
 return $0;
}
function std____2____compressed_pair_elem_std____2__locale__facet___2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20short__20___get_28_29() {
 return 6572;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0) {
 return $0;
}
function std____2____wrap_iter_wchar_t____operator___28_29($0) {
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 4;
 return $0;
}
function std____2____compressed_pair_elem_std____2__locale__facet__2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29($0) {
 return $0;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20long__20___get_28_29() {
 return 6732;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20char__20___get_28_29() {
 return 6492;
}
function dynCall_iii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return FUNCTION_TABLE[$0]($1, $2) | 0;
}
function wchar_t__20std____2__end_wchar_t_2c_2010ul__28wchar_t_20_28__29_20_5b10ul_5d_29($0) {
 return $0 + 40 | 0;
}
function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29($0) {
 return $0;
}
function std____2__ctype_wchar_t___do_widen_28char_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 | 0;
}
function std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20int__20___get_28_29() {
 return 6652;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_signed_20char__20___get_28_29() {
 return 6452;
}
function std____2____wrap_iter_char____operator___28_29($0) {
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 return $0;
}
function std____2__remove_reference_wchar_t____type___20std____2__move_wchar_t___28wchar_t__29($0) {
 return $0;
}
function std____2__numpunct_char___do_thousands_sep_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 9 | 0];
}
function std____2__numpunct_char___do_decimal_point_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 8 | 0];
}
function std____2__ctype_char___do_widen_28char_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 | 0;
}
function std____2____wrap_iter_wchar_t______wrap_iter_28wchar_t__29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __string_read($0, $1, $2) | 0;
}
function unsigned_20int_20std____2____complement_unsigned_20int__28unsigned_20int_29($0) {
 return 0 - $0 | 0;
}
function std____2__moneypunct_wchar_t_2c_20false___do_frac_digits_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function legalfunc$wasm2js_scratch_store_i64($0, $1) {
 legalimport$wasm2js_scratch_store_i64($0 | 0, $1 | 0);
}
function std____2__moneypunct_wchar_t_2c_20true___do_frac_digits_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function dynCall_iiiiij($0, $1, $2, $3, $4, $5, $6) {
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
}
function std____2____libcpp_condvar_broadcast_28pthread_cond_t__29($0) {
 return pthread_cond_broadcast($0);
}
function std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function std____2____compressed_pair_elem_unsigned_20char__2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function neopt__BinaryReader__AvailableBytes_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function char___20std____2__forward_char____28std____2__remove_reference_char_____type__29($0) {
 return $0;
}
function wchar_t_20const__20std____2____to_address_wchar_t_20const__28wchar_t_20const__29($0) {
 return $0;
}
function std____2__moneypunct_char_2c_20false___do_frac_digits_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function std____2__ctype_char_____classic_upper_table_28_29() {
 return HEAP32[__ctype_toupper_loc() >> 2];
}
function std____2__ctype_char_____classic_lower_table_28_29() {
 return HEAP32[__ctype_tolower_loc() >> 2];
}
function std____2__char_traits_char___eq_int_type_28int_2c_20int_29($0, $1) {
 return ($0 | 0) == ($1 | 0);
}
function std____2____compressed_pair_elem_unsigned_20int__2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_double__20___get_28_29() {
 return 6812;
}
function std____2__moneypunct_char_2c_20true___do_frac_digits_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function std____2____wrap_iter_char______wrap_iter_28char__29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_short__20___get_28_29() {
 return 6532;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_float__20___get_28_29() {
 return 6772;
}
function char__20std____2__end_char_2c_2010ul__28char_20_28__29_20_5b10ul_5d_29($0) {
 return $0 + 10 | 0;
}
function std____2____compressed_pair_elem_char__2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function operator_20new_5b_5d_28unsigned_20long_29($0) {
 return operator_20new_28unsigned_20long_29($0);
}
function emscripten__internal__LightTypeID_emscripten__memory_view_long__20___get_28_29() {
 return 6692;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_char__20___get_28_29() {
 return 6412;
}
function dynCall_vii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 FUNCTION_TABLE[$0]($1, $2);
}
function wchar_t_20const__20std____2__addressof_wchar_t_20const__28wchar_t_20const__29($0) {
 return $0;
}
function std____2____wrap_iter_wchar_t_20const____operator__28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function emscripten__internal__LightTypeID_emscripten__memory_view_int__20___get_28_29() {
 return 6612;
}
function __stdio_close($0) {
 $0 = $0 | 0;
 return __wasi_fd_close(dummy(HEAP32[$0 + 60 >> 2]) | 0) | 0;
}
function std____2__remove_reference_char____type___20std____2__move_char___28char__29($0) {
 return $0;
}
function __ctype_get_mb_cur_max() {
 return HEAP32[HEAP32[__pthread_self_4() + 176 >> 2] >> 2] ? 4 : 1;
}
function std____2____libcpp_mutex_unlock_28pthread_mutex_t__29($0) {
 return pthread_mutex_unlock($0);
}
function __wasm_ctz_i32($0) {
 if ($0) {
  return 31 - Math_clz32($0 + -1 ^ $0) | 0;
 }
 return 32;
}



function std____2__make_unsigned_int___type_20std____2____to_unsigned_int__28int_29($0) {
 return $0;
}
function std____2____wrap_iter_char_20const____operator__28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function dynCall_jiji($0, $1, $2, $3, $4) {
 $3 = FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
 return $3;
}
function __cxx_global_array_dtor_1($0) {
 $0 = $0 | 0;
 std____2__DoIOSInit___DoIOSInit_28_29(25148);
}
function std____2__remove_reference_int____type___20std____2__move_int___28int__29($0) {
 return $0;
}
function std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___max_28_29() {
 return 65535;
}
function std____2____compressed_pair_elem_wchar_t__2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function strchr($0, $1) {
 $0 = __strchrnul($0, $1);
 return HEAPU8[$0 | 0] == ($1 & 255) ? $0 : 0;
}
function std____2____wrap_iter_wchar_t_20const____base_28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function std____2___DeallocateCaller____do_call_28void__29($0) {
 operator_20delete_28void__29($0);
}
function std__exception___exception_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2____libcpp_mutex_lock_28pthread_mutex_t__29($0) {
 return pthread_mutex_lock($0);
}
function dynCall_viijii($0, $1, $2, $3, $4, $5, $6) {
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
}
function char_20const__20std____2____to_address_char_20const__28char_20const__29($0) {
 return $0;
}
function std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___max_28_29() {
 return 255;
}
function std____2____compressed_pair_elem_char__2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function std____2____wrap_iter_wchar_t____operator__28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function std____2____wrap_iter_char_20const____base_28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function std____2____libcpp_numeric_limits_wchar_t_2c_20true___max_28_29() {
 return 2147483647;
}
function std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___min_28_29() {
 return 0;
}
function std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___max_28_29() {
 return -1;
}
function std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() {
 return -128;
}
function std____2__char_traits_wchar_t___length_28wchar_t_20const__29($0) {
 return wcslen($0);
}
function std____2____time_get_c_storage_wchar_t______time_get_c_storage_28_29($0) {
 return $0;
}
function std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___min_28_29() {
 return 0;
}
function std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___max_28_29() {
 return -1;
}
function std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___min_28_29() {
 return 0;
}
function std____2____libcpp_numeric_limits_signed_20char_2c_20true___max_28_29() {
 return 127;
}
function char_20const__20std____2__addressof_char_20const__28char_20const__29($0) {
 return $0;
}
function __munmap($0, $1) {
 dummy_1();
 return __syscall_ret(__syscall91($0 | 0, $1 | 0) | 0);
}
function std__uncaught_exception_28_29() {
 return (std__uncaught_exceptions_28_29() | 0) > 0;
}
function std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___min_28_29() {
 return 0;
}
function std____2____libcpp_numeric_limits_long_2c_20true___min_28_29() {
 return -2147483648;
}
function __loc_is_allocated($0) {
 return ($0 | 0) != 0 & ($0 | 0) != 9104 & ($0 | 0) != 9128;
}
function std____2__ctype_char___classic_table_28_29() {
 return HEAP32[__ctype_b_loc() >> 2];
}
function std____2____wrap_iter_char____operator__28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function std____2____libcpp_numeric_limits_long_2c_20true___max_28_29() {
 return 2147483647;
}
function std____2____libcpp_numeric_limits_int_2c_20true___min_28_29() {
 return -2147483648;
}
function dynCall_ii($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return FUNCTION_TABLE[$0]($1) | 0;
}
function std____2____time_get_c_storage_char______time_get_c_storage_28_29($0) {
 return $0;
}
function std____2____shared_count_____shared_count_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function std____2____libcpp_numeric_limits_int_2c_20true___max_28_29() {
 return 2147483647;
}
function std____2__char_traits_wchar_t___to_char_type_28unsigned_20int_29($0) {
 return $0;
}
function std____2____wrap_iter_wchar_t____base_28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function std____2____vector_base_common_true_____vector_base_common_28_29($0) {
 return $0;
}
function std____2____libcpp_numeric_limits_short_2c_20true___min_28_29() {
 return -32768;
}
function emscripten__internal__LightTypeID_unsigned_20short___get_28_29() {
 return 20952;
}
function dynCall_di($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +FUNCTION_TABLE[$0]($1);
}
function std____2__char_traits_char___to_char_type_28int_29($0) {
 return $0 << 24 >> 24;
}
function std____2__char_traits_char___length_28char_20const__29($0) {
 return strlen($0);
}
function std____2____libcpp_refstring__c_str_28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function std____2____libcpp_numeric_limits_short_2c_20true___max_28_29() {
 return 32767;
}
function emscripten__internal__LightTypeID_unsigned_20char___get_28_29() {
 return 20916;
}
function std____2____wrap_iter_char____base_28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function std____2____shared_count_____shared_count_28_29_1($0) {
 $0 = $0 | 0;
 abort();
}
function emscripten__internal__LightTypeID_unsigned_20long___get_28_29() {
 return 21e3;
}
function emscripten__internal__LightTypeID_unsigned_20int___get_28_29() {
 return 20976;
}
function emscripten__internal__LightTypeID_emscripten__val___get_28_29() {
 return 6372;
}
function std____2__ios_base__precision_28_29_20const($0) {
 return HEAP32[$0 + 8 >> 2];
}
function std____2__allocator_wchar_t___max_size_28_29_20const($0) {
 return 1073741823;
}
function std____2____libcpp_numeric_limits_char_2c_20true___min_28_29() {
 return -128;
}
function emscripten__internal__LightTypeID_signed_20char___get_28_29() {
 return 20928;
}
function std____2__ios_base__ios_base_28_29($0) {
 HEAP32[$0 >> 2] = 7516;
 return $0;
}
function std____2____libcpp_numeric_limits_char_2c_20true___max_28_29() {
 return 127;
}
function wchar_t__20std____2____unwrap_iter_wchar_t___28wchar_t__29($0) {
 return $0;
}
function std____2____throw_runtime_error_28char_20const__29($0) {
 abort();
 abort();
}
function std____2____libcpp_refstring____uses_refcount_28_29_20const($0) {
 return 1;
}
function out($0, $1, $2) {
 if (!(HEAPU8[$0 | 0] & 32)) {
  __fwritex($1, $2, $0);
 }
}
function __growWasmMemory($0) {
 $0 = $0 | 0;
 return __wasm_memory_grow($0 | 0) | 0;
}
function std__exception__exception_28_29($0) {
 HEAP32[$0 >> 2] = 20540;
 return $0;
}
function std____2__ios_base__width_28_29_20const($0) {
 return HEAP32[$0 + 12 >> 2];
}
function std____2__ios_base__rdbuf_28_29_20const($0) {
 return HEAP32[$0 + 24 >> 2];
}
function std____2__ios_base__good_28_29_20const($0) {
 return !HEAP32[$0 + 16 >> 2];
}
function std____2____throw_out_of_range_28char_20const__29($0) {
 abort();
 abort();
}
function operator_20delete_5b_5d_28void__29($0) {
 operator_20delete_28void__29($0);
}
function wchar_t__20std____2____to_address_wchar_t__28wchar_t__29($0) {
 return $0;
}
function std____2__ios_base__flags_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2];
}
function std____2__char_traits_wchar_t___to_int_type_28wchar_t_29($0) {
 return $0;
}
function std____2__char_traits_char___to_int_type_28char_29($0) {
 return $0 & 255;
}
function isxdigit($0) {
 return (isdigit($0) | 0) != 0 | ($0 | 32) + -97 >>> 0 < 6;
}
function vfprintf($0, $1, $2) {
 return __vfprintf_internal($0, $1, $2, 163, 164);
}
function dynCall_vi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[$0]($1);
}
function __cxx_global_var_init_1() {
 std____2__ios_base__Init__Init_28_29(24792);
}
function wctomb($0, $1) {
 if (!$0) {
  return 0;
 }
 return wcrtomb($0, $1, 0);
}
function wchar_t__20std____2__addressof_wchar_t__28wchar_t__29($0) {
 return $0;
}
function std__uncaught_exceptions_28_29() {
 return __cxa_uncaught_exceptions();
}
function emscripten__internal__LightTypeID_double___get_28_29() {
 return 21024;
}
function vfiprintf($0, $1, $2) {
 return __vfprintf_internal($0, $1, $2, 0, 0);
}
function std____2____throw_failure_28char_20const__29($0) {
 abort();
 abort();
}
function emscripten__internal__LightTypeID_short___get_28_29() {
 return 20940;
}
function emscripten__internal__LightTypeID_float___get_28_29() {
 return 21012;
}
function std__exception__what_28_29_20const($0) {
 $0 = $0 | 0;
 return 20515;
}
function emscripten__internal__LightTypeID_void___get_28_29() {
 return 20880;
}
function emscripten__internal__LightTypeID_long___get_28_29() {
 return 20988;
}
function emscripten__internal__LightTypeID_char___get_28_29() {
 return 20904;
}
function emscripten__internal__LightTypeID_bool___get_28_29() {
 return 20892;
}
function __cxxabiv1____shim_type_info__noop2_28_29_20const($0) {
 $0 = $0 | 0;
}
function __cxxabiv1____shim_type_info__noop1_28_29_20const($0) {
 $0 = $0 | 0;
}
function std__exception___exception_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function emscripten__internal__LightTypeID_int___get_28_29() {
 return 20964;
}
function std____2__allocator_char___max_size_28_29_20const($0) {
 return -1;
}
function std____2____money_put_wchar_t_____money_put_28_29($0) {
 return $0;
}
function std____2____money_get_wchar_t_____money_get_28_29($0) {
 return $0;
}
function char__20std____2____unwrap_iter_char___28char__29($0) {
 return $0;
}
function mbsinit($0) {
 if (!$0) {
  return 1;
 }
 return !HEAP32[$0 >> 2];
}
function strtoll($0, $1, $2) {
 return strtox($0, $1, $2, 0, -2147483648);
}
function mbrlen($0, $1, $2) {
 return mbrtowc(0, $0, $1, $2 ? $2 : 25240);
}
function char__20std____2____to_address_char__28char__29($0) {
 return $0;
}
function strtol($0, $1, $2) {
 return strtox($0, $1, $2, -2147483648, 0);
}
function std____2____money_put_char_____money_put_28_29($0) {
 return $0;
}
function std____2____money_get_char_____money_get_28_29($0) {
 return $0;
}
function freelocale($0) {
 if (__loc_is_allocated($0)) {
  dlfree($0);
 }
}
function std____2__allocator_wchar_t___allocator_28_29($0) {
 return $0;
}
function neopt__JObject__AsNumber_28_29($0) {
 $0 = $0 | 0;
 return nan;
}
function std____2__messages_base__messages_base_28_29($0) {
 return $0;
}
function neopt__JObject__AsBoolean_28_29($0) {
 $0 = $0 | 0;
 return 1;
}
function dynCall_vij($0, $1, $2, $3) {
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function char__20std____2__addressof_char__28char__29($0) {
 return $0;
}
function std____2__codecvt_base__codecvt_base_28_29($0) {
 return $0;
}
function std____2__allocator_char___allocator_28_29($0) {
 return $0;
}
function strtoull_l($0, $1, $2, $3) {
 return strtoull($0, $1, $2);
}
function strtoull($0, $1, $2) {
 return strtox($0, $1, $2, -1, -1);
}
function __cxx_global_var_init() {
 FUNCTION_TABLE[105](22004) | 0;
}
function __cxa_pure_virtual() {
 abort_message(20485, 0);
 abort();
}
function std____2__char_traits_wchar_t___eof_28_29() {
 return -1;
}
function isspace($0) {
 return ($0 | 0) == 32 | $0 + -9 >>> 0 < 5;
}
function strtoll_l($0, $1, $2, $3) {
 return strtoll($0, $1, $2);
}
function std____2__money_base__money_base_28_29($0) {
 return $0;
}
function std____2__ctype_base__ctype_base_28_29($0) {
 return $0;
}
function std____2____throw_bad_cast_28_29() {
 abort();
 abort();
}
function dynCall_ji($0, $1) {
 return FUNCTION_TABLE[$0]($1) | 0;
}
function __emscripten_stdout_close($0) {
 $0 = $0 | 0;
 return 0;
}
function std____2__char_traits_char___eof_28_29() {
 return -1;
}
function std____2____do_nothing_28void__29($0) {
 $0 = $0 | 0;
}
function __set_stack_limit($0) {
 $0 = $0 | 0;
 global$2 = $0;
}
function _GLOBAL__sub_I_bind_cpp() {
 __cxx_global_var_init();
}
function std____throw_bad_alloc_28_29() {
 abort();
 abort();
}
function dynCall_v($0) {
 $0 = $0 | 0;
 FUNCTION_TABLE[$0]();
}
function std__type_info___type_info_28_29($0) {
 return $0;
}
function _GLOBAL__I_000101() {
 __cxx_global_var_init_1();
}
function operator_20delete_28void__29($0) {
 dlfree($0);
}
function strtof_l($0, $1, $2) {
 return strtof($0, $1);
}
function strtod_l($0, $1, $2) {
 return strtod($0, $1);
}
function __ofl_lock() {
 __lock(22008);
 return 22016;
}
function __pthread_self_5() {
 return pthread_self();
}
function __pthread_self_4() {
 return pthread_self();
}
function __pthread_self_3() {
 return pthread_self();
}
function __pthread_self_2() {
 return pthread_self();
}
function __pthread_self_1() {
 return pthread_self();
}
function __isxdigit_l($0, $1) {
 return isxdigit($0);
}
function isdigit($0) {
 return $0 + -48 >>> 0 < 10;
}
function emscripten_get_sbrk_ptr() {
 return 27808;
}
function __pthread_self() {
 return pthread_self();
}
function __isdigit_l($0, $1) {
 return isdigit($0);
}
function __cxa_uncaught_exceptions() {
 return 0;
}
function pthread_cond_broadcast($0) {
 return 0;
}
function pthread_cond_wait($0, $1) {
 return 0;
}
function __ctype_toupper_loc() {
 return 10736;
}
function __ctype_tolower_loc() {
 return 12288;
}
function pthread_mutex_unlock($0) {
 return 0;
}
function catgets($0, $1, $2, $3) {
 return $3;
}
function stackSave() {
 return global$0 | 0;
}
function pthread_mutex_lock($0) {
 return 0;
}
function __errno_location() {
 return 22020;
}
function __ofl_unlock() {
 __unlock(22008);
}
function abort_message($0, $1) {
 abort();
}
function fabs($0) {
 return Math_abs($0);
}
function pthread_self() {
 return 21696;
}
function __ctype_b_loc() {
 return 9960;
}
function _GLOBAL__sub_I_iostream_cpp() {}
function catopen($0, $1) {
 return -1;
}
function __lockfile($0) {
 return 1;
}
function catclose($0) {
 return 0;
}
function dummy($0) {
 return $0;
}
function __unlockfile($0) {}
function __unlock($0) {}
function __lock($0) {}
function dummy_1() {}

// EMSCRIPTEN_END_FUNCS

;
 FUNCTION_TABLE[1] = Neo__SmartContract__InteropService__Crypto__Crypto_ECDsaSecp256r1Verify_28ApplicationEngine__29;
 FUNCTION_TABLE[2] = std__logic_error___logic_error_28_29;
 FUNCTION_TABLE[3] = __cxx_global_array_dtor;
 FUNCTION_TABLE[4] = __cxx_global_array_dtor_2;
 FUNCTION_TABLE[5] = __cxx_global_array_dtor_4;
 FUNCTION_TABLE[6] = __cxx_global_array_dtor_6;
 FUNCTION_TABLE[7] = __cxx_global_array_dtor_12;
 FUNCTION_TABLE[8] = __cxx_global_array_dtor_17;
 FUNCTION_TABLE[9] = __cxx_global_array_dtor_24;
 FUNCTION_TABLE[10] = emscripten__internal__Invoker_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29;
 FUNCTION_TABLE[11] = Neo__SmartContract__Contract__API_CreateSignatureRedeemScript_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29;
 FUNCTION_TABLE[12] = std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29;
 FUNCTION_TABLE[13] = std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1;
 FUNCTION_TABLE[14] = non_virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29;
 FUNCTION_TABLE[15] = non_virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1;
 FUNCTION_TABLE[16] = virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29;
 FUNCTION_TABLE[17] = virtual_20thunk_20to_20std____2__basic_stringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringstream_28_29_1;
 FUNCTION_TABLE[18] = std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1;
 FUNCTION_TABLE[19] = std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_2;
 FUNCTION_TABLE[20] = non_virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29;
 FUNCTION_TABLE[21] = non_virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1;
 FUNCTION_TABLE[22] = virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29;
 FUNCTION_TABLE[23] = virtual_20thunk_20to_20std____2__basic_iostream_char_2c_20std____2__char_traits_char__20____basic_iostream_28_29_1;
 FUNCTION_TABLE[24] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1;
 FUNCTION_TABLE[25] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2;
 FUNCTION_TABLE[26] = virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29;
 FUNCTION_TABLE[27] = virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1;
 FUNCTION_TABLE[28] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[29] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2;
 FUNCTION_TABLE[30] = virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29;
 FUNCTION_TABLE[31] = virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[32] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringbuf_28_29;
 FUNCTION_TABLE[33] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_stringbuf_28_29_1;
 FUNCTION_TABLE[34] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[35] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setbuf_28char__2c_20long_29;
 FUNCTION_TABLE[36] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29;
 FUNCTION_TABLE[37] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29;
 FUNCTION_TABLE[38] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[39] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___showmanyc_28_29;
 FUNCTION_TABLE[40] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsgetn_28char__2c_20long_29;
 FUNCTION_TABLE[41] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___underflow_28_29;
 FUNCTION_TABLE[42] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___uflow_28_29;
 FUNCTION_TABLE[43] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[44] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsputn_28char_20const__2c_20long_29;
 FUNCTION_TABLE[45] = std____2__basic_stringbuf_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___overflow_28int_29;
 FUNCTION_TABLE[46] = neopt__StringReader__Peek_28_29_20const;
 FUNCTION_TABLE[47] = neopt__StringReader__Read_28_29;
 FUNCTION_TABLE[48] = neopt__StringReader__Read_28char__2c_20int_2c_20int_29;
 FUNCTION_TABLE[49] = neopt__StringReader___StringReader_28_29;
 FUNCTION_TABLE[50] = neopt__StringReader___StringReader_28_29_1;
 FUNCTION_TABLE[51] = std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29;
 FUNCTION_TABLE[52] = std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29_1;
 FUNCTION_TABLE[53] = virtual_20thunk_20to_20std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29;
 FUNCTION_TABLE[54] = virtual_20thunk_20to_20std____2__basic_istringstream_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_istringstream_28_29_1;
 FUNCTION_TABLE[55] = neopt__BinaryReader__ReadByte_28_29;
 FUNCTION_TABLE[56] = neopt__BinaryReader__AvailableBytes_28_29_20const;
 FUNCTION_TABLE[57] = neopt__IBinaryReader__Read_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_2c_20int_29;
 FUNCTION_TABLE[58] = neopt__IBinaryReader__ReadBytes_28int_29;
 FUNCTION_TABLE[59] = neopt__IBinaryReader__ReadInt16_28_29;
 FUNCTION_TABLE[60] = neopt__IBinaryReader__ReadUInt16_28_29;
 FUNCTION_TABLE[61] = neopt__IBinaryReader__ReadInt32_28_29;
 FUNCTION_TABLE[62] = neopt__IBinaryReader__ReadUInt32_28_29;
 FUNCTION_TABLE[63] = neopt__IBinaryReader__ReadInt64_28_29;
 FUNCTION_TABLE[64] = neopt__IBinaryReader__ReadUInt64_28_29;
 FUNCTION_TABLE[65] = neopt__IBinaryReader__ReadVarBytes_28int_29;
 FUNCTION_TABLE[66] = neopt__IBinaryReader__ReadVarInt_28_29;
 FUNCTION_TABLE[67] = neopt__IBinaryReader__ReadVarInt_28unsigned_20long_29;
 FUNCTION_TABLE[68] = neopt__BinaryReader__ReadVarString_28int_29;
 FUNCTION_TABLE[69] = neopt__BinaryReader___BinaryReader_28_29;
 FUNCTION_TABLE[70] = neopt__BinaryReader___BinaryReader_28_29_1;
 FUNCTION_TABLE[71] = neopt__BinaryReader__Good_28_29_20const;
 FUNCTION_TABLE[72] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29;
 FUNCTION_TABLE[73] = neopt__BinaryReader__wrap_vector_as_istream___wrap_vector_as_istream_28_29;
 FUNCTION_TABLE[74] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29;
 FUNCTION_TABLE[75] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29;
 FUNCTION_TABLE[76] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___underflow_28_29;
 FUNCTION_TABLE[77] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[78] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___overflow_28int_29;
 FUNCTION_TABLE[79] = neopt__JObject__AsBoolean_28_29;
 FUNCTION_TABLE[80] = neopt__JObject__AsNumber_28_29;
 FUNCTION_TABLE[81] = neopt__JObject__AsString_28_29_20const;
 FUNCTION_TABLE[82] = neopt__JObject__getValue_28_29_20const;
 FUNCTION_TABLE[83] = neopt__JString__ToString_28_29_20const;
 FUNCTION_TABLE[84] = neopt__JObject__ToString_28_29_20const;
 FUNCTION_TABLE[85] = neopt__JArray__AsString_28_29_20const;
 FUNCTION_TABLE[86] = neopt__JArray__ToString_28_29_20const;
 FUNCTION_TABLE[87] = neopt__JNumber__ToString_28_29_20const;
 FUNCTION_TABLE[88] = neopt__BinaryWriter__Write_28unsigned_20char_29;
 FUNCTION_TABLE[89] = neopt__IBinaryWriter__Write_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__29;
 FUNCTION_TABLE[90] = neopt__IBinaryWriter__Write_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__2c_20int_2c_20int_29;
 FUNCTION_TABLE[91] = neopt__IBinaryWriter__Write_28unsigned_20short_29;
 FUNCTION_TABLE[92] = neopt__IBinaryWriter__Write_28short_29;
 FUNCTION_TABLE[93] = neopt__IBinaryWriter__Write_28unsigned_20int_29;
 FUNCTION_TABLE[94] = neopt__IBinaryWriter__Write_28int_29;
 FUNCTION_TABLE[95] = neopt__IBinaryWriter__Write_28unsigned_20long_20long_29;
 FUNCTION_TABLE[96] = neopt__IBinaryWriter__Write_28long_29;
 FUNCTION_TABLE[97] = neopt__IBinaryWriter__WriteVarBytes_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__29;
 FUNCTION_TABLE[98] = neopt__IBinaryWriter__Write_28neopt__ISerializable_20const__29;
 FUNCTION_TABLE[99] = neopt__IBinaryWriter__Write_28std____2__vector_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__2c_20std____2__allocator_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__20__20const__29;
 FUNCTION_TABLE[100] = neopt__IBinaryWriter__WriteVarInt_28long_29;
 FUNCTION_TABLE[101] = neopt__BinaryWriter__CountBytes_28_29_20const;
 FUNCTION_TABLE[102] = neopt__BinaryWriter___BinaryWriter_28_29;
 FUNCTION_TABLE[103] = neopt__BinaryWriter___BinaryWriter_28_29_1;
 FUNCTION_TABLE[104] = neopt__BinaryWriter__Flush_28_29;
 FUNCTION_TABLE[105] = EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29;
 FUNCTION_TABLE[106] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29_1;
 FUNCTION_TABLE[107] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29;
 FUNCTION_TABLE[108] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29_1;
 FUNCTION_TABLE[109] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[110] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___setbuf_28wchar_t__2c_20long_29;
 FUNCTION_TABLE[111] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29;
 FUNCTION_TABLE[112] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29;
 FUNCTION_TABLE[113] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sync_28_29;
 FUNCTION_TABLE[114] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___showmanyc_28_29;
 FUNCTION_TABLE[115] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsgetn_28wchar_t__2c_20long_29;
 FUNCTION_TABLE[116] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___underflow_28_29;
 FUNCTION_TABLE[117] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___uflow_28_29;
 FUNCTION_TABLE[118] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___pbackfail_28unsigned_20int_29;
 FUNCTION_TABLE[119] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsputn_28wchar_t_20const__2c_20long_29;
 FUNCTION_TABLE[120] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___overflow_28unsigned_20int_29;
 FUNCTION_TABLE[121] = std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1;
 FUNCTION_TABLE[122] = std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_2;
 FUNCTION_TABLE[123] = virtual_20thunk_20to_20std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29;
 FUNCTION_TABLE[124] = virtual_20thunk_20to_20std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_istream_28_29_1;
 FUNCTION_TABLE[125] = std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[126] = std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_2;
 FUNCTION_TABLE[127] = virtual_20thunk_20to_20std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29;
 FUNCTION_TABLE[128] = virtual_20thunk_20to_20std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[129] = std____2__ios_base___ios_base_28_29;
 FUNCTION_TABLE[130] = std____2__ios_base___ios_base_28_29_1;
 FUNCTION_TABLE[131] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29;
 FUNCTION_TABLE[132] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29_1;
 FUNCTION_TABLE[133] = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29;
 FUNCTION_TABLE[134] = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_ios_28_29_1;
 FUNCTION_TABLE[135] = __stdio_close;
 FUNCTION_TABLE[136] = __stdio_read;
 FUNCTION_TABLE[137] = __stdio_seek;
 FUNCTION_TABLE[138] = __emscripten_stdout_close;
 FUNCTION_TABLE[139] = __stdio_write;
 FUNCTION_TABLE[140] = __emscripten_stdout_seek;
 FUNCTION_TABLE[141] = __cxx_global_array_dtor_1;
 FUNCTION_TABLE[142] = std____2____stdinbuf_char______stdinbuf_28_29;
 FUNCTION_TABLE[143] = std____2____stdinbuf_char___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[144] = std____2____stdinbuf_char___underflow_28_29;
 FUNCTION_TABLE[145] = std____2____stdinbuf_char___uflow_28_29;
 FUNCTION_TABLE[146] = std____2____stdinbuf_char___pbackfail_28int_29;
 FUNCTION_TABLE[147] = std____2____stdinbuf_wchar_t______stdinbuf_28_29;
 FUNCTION_TABLE[148] = std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[149] = std____2____stdinbuf_wchar_t___underflow_28_29;
 FUNCTION_TABLE[150] = std____2____stdinbuf_wchar_t___uflow_28_29;
 FUNCTION_TABLE[151] = std____2____stdinbuf_wchar_t___pbackfail_28unsigned_20int_29;
 FUNCTION_TABLE[152] = std____2____stdoutbuf_char______stdoutbuf_28_29;
 FUNCTION_TABLE[153] = std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[154] = std____2____stdoutbuf_char___sync_28_29;
 FUNCTION_TABLE[155] = std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29;
 FUNCTION_TABLE[156] = std____2____stdoutbuf_char___overflow_28int_29;
 FUNCTION_TABLE[157] = std____2____stdoutbuf_wchar_t______stdoutbuf_28_29;
 FUNCTION_TABLE[158] = std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[159] = std____2____stdoutbuf_wchar_t___sync_28_29;
 FUNCTION_TABLE[160] = std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29;
 FUNCTION_TABLE[161] = std____2____stdoutbuf_wchar_t___overflow_28unsigned_20int_29;
 FUNCTION_TABLE[162] = do_read;
 FUNCTION_TABLE[163] = fmt_fp;
 FUNCTION_TABLE[164] = pop_arg_long_double;
 FUNCTION_TABLE[165] = sn_write;
 FUNCTION_TABLE[166] = dlfree;
 FUNCTION_TABLE[167] = std____2____do_nothing_28void__29;
 FUNCTION_TABLE[168] = std____2__locale__id____init_28_29;
 FUNCTION_TABLE[169] = void_20std____2____call_once_proxy_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20__28void__29;
 FUNCTION_TABLE[170] = __cxx_global_array_dtor_55;
 FUNCTION_TABLE[171] = __cxx_global_array_dtor_70;
 FUNCTION_TABLE[172] = __cxx_global_array_dtor_85;
 FUNCTION_TABLE[173] = __cxx_global_array_dtor_109;
 FUNCTION_TABLE[174] = __cxx_global_array_dtor_133;
 FUNCTION_TABLE[175] = __cxx_global_array_dtor_136;
 FUNCTION_TABLE[176] = __cxx_global_array_dtor_3;
 FUNCTION_TABLE[177] = __cxx_global_array_dtor_32;
 FUNCTION_TABLE[178] = __cxx_global_array_dtor_34;
 FUNCTION_TABLE[179] = __cxx_global_array_dtor_36;
 FUNCTION_TABLE[180] = __cxx_global_array_dtor_38;
 FUNCTION_TABLE[181] = __cxx_global_array_dtor_40;
 FUNCTION_TABLE[182] = __cxx_global_array_dtor_42;
 FUNCTION_TABLE[183] = __cxx_global_array_dtor_44;
 FUNCTION_TABLE[184] = std____2__locale____imp_____imp_28_29;
 FUNCTION_TABLE[185] = std____2__locale____imp_____imp_28_29_1;
 FUNCTION_TABLE[186] = std____2__locale__facet____on_zero_shared_28_29;
 FUNCTION_TABLE[187] = std____2__ctype_char____ctype_28_29;
 FUNCTION_TABLE[188] = std____2__ctype_char____ctype_28_29_1;
 FUNCTION_TABLE[189] = std____2__ctype_char___do_toupper_28char_29_20const;
 FUNCTION_TABLE[190] = std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const;
 FUNCTION_TABLE[191] = std____2__ctype_char___do_tolower_28char_29_20const;
 FUNCTION_TABLE[192] = std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const;
 FUNCTION_TABLE[193] = std____2__ctype_char___do_widen_28char_29_20const;
 FUNCTION_TABLE[194] = std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const;
 FUNCTION_TABLE[195] = std____2__ctype_char___do_narrow_28char_2c_20char_29_20const;
 FUNCTION_TABLE[196] = std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const;
 FUNCTION_TABLE[197] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29;
 FUNCTION_TABLE[198] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_1;
 FUNCTION_TABLE[199] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[200] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const;
 FUNCTION_TABLE[201] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[202] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const;
 FUNCTION_TABLE[203] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const;
 FUNCTION_TABLE[204] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[205] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const;
 FUNCTION_TABLE[206] = std____2__numpunct_char____numpunct_28_29;
 FUNCTION_TABLE[207] = std____2__numpunct_char____numpunct_28_29_1;
 FUNCTION_TABLE[208] = std____2__numpunct_char___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[209] = std____2__numpunct_char___do_thousands_sep_28_29_20const;
 FUNCTION_TABLE[210] = std____2__numpunct_char___do_grouping_28_29_20const;
 FUNCTION_TABLE[211] = std____2__numpunct_char___do_truename_28_29_20const;
 FUNCTION_TABLE[212] = std____2__numpunct_char___do_falsename_28_29_20const;
 FUNCTION_TABLE[213] = std____2__numpunct_wchar_t____numpunct_28_29;
 FUNCTION_TABLE[214] = std____2__numpunct_wchar_t____numpunct_28_29_1;
 FUNCTION_TABLE[215] = std____2__numpunct_wchar_t___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[216] = std____2__numpunct_wchar_t___do_thousands_sep_28_29_20const;
 FUNCTION_TABLE[217] = std____2__numpunct_wchar_t___do_grouping_28_29_20const;
 FUNCTION_TABLE[218] = std____2__numpunct_wchar_t___do_truename_28_29_20const;
 FUNCTION_TABLE[219] = std____2__numpunct_wchar_t___do_falsename_28_29_20const;
 FUNCTION_TABLE[220] = std____2__locale__facet___facet_28_29;
 FUNCTION_TABLE[221] = std____2__locale__facet___facet_28_29_1;
 FUNCTION_TABLE[222] = std____2__ctype_wchar_t____ctype_28_29;
 FUNCTION_TABLE[223] = std____2__ctype_wchar_t___do_is_28unsigned_20short_2c_20wchar_t_29_20const;
 FUNCTION_TABLE[224] = std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20short__29_20const;
 FUNCTION_TABLE[225] = std____2__ctype_wchar_t___do_scan_is_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[226] = std____2__ctype_wchar_t___do_scan_not_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[227] = std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const;
 FUNCTION_TABLE[228] = std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[229] = std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const;
 FUNCTION_TABLE[230] = std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[231] = std____2__ctype_wchar_t___do_widen_28char_29_20const;
 FUNCTION_TABLE[232] = std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const;
 FUNCTION_TABLE[233] = std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const;
 FUNCTION_TABLE[234] = std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const;
 FUNCTION_TABLE[235] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t____codecvt_28_29;
 FUNCTION_TABLE[236] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[237] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[238] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[239] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const;
 FUNCTION_TABLE[240] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const;
 FUNCTION_TABLE[241] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[242] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const;
 FUNCTION_TABLE[243] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t____codecvt_28_29;
 FUNCTION_TABLE[244] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[245] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const;
 FUNCTION_TABLE[246] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[247] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const;
 FUNCTION_TABLE[248] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const;
 FUNCTION_TABLE[249] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[250] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const;
 FUNCTION_TABLE[251] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t____codecvt_28_29;
 FUNCTION_TABLE[252] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[253] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const;
 FUNCTION_TABLE[254] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[255] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const;
 FUNCTION_TABLE[256] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_always_noconv_28_29_20const;
 FUNCTION_TABLE[257] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[258] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const;
 FUNCTION_TABLE[259] = std____2____narrow_to_utf8_32ul______narrow_to_utf8_28_29;
 FUNCTION_TABLE[260] = std____2____widen_from_utf8_32ul______widen_from_utf8_28_29;
 FUNCTION_TABLE[261] = std____2__collate_char____collate_28_29;
 FUNCTION_TABLE[262] = std____2__collate_char____collate_28_29_1;
 FUNCTION_TABLE[263] = std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[264] = std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[265] = std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[266] = std____2__collate_wchar_t____collate_28_29;
 FUNCTION_TABLE[267] = std____2__collate_wchar_t____collate_28_29_1;
 FUNCTION_TABLE[268] = std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[269] = std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[270] = std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[271] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____num_get_28_29;
 FUNCTION_TABLE[272] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const;
 FUNCTION_TABLE[273] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const;
 FUNCTION_TABLE[274] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const;
 FUNCTION_TABLE[275] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const;
 FUNCTION_TABLE[276] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const;
 FUNCTION_TABLE[277] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const;
 FUNCTION_TABLE[278] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const;
 FUNCTION_TABLE[279] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const;
 FUNCTION_TABLE[280] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const;
 FUNCTION_TABLE[281] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[282] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const;
 FUNCTION_TABLE[283] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____num_get_28_29;
 FUNCTION_TABLE[284] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const;
 FUNCTION_TABLE[285] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const;
 FUNCTION_TABLE[286] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const;
 FUNCTION_TABLE[287] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const;
 FUNCTION_TABLE[288] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const;
 FUNCTION_TABLE[289] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const;
 FUNCTION_TABLE[290] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const;
 FUNCTION_TABLE[291] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const;
 FUNCTION_TABLE[292] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const;
 FUNCTION_TABLE[293] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[294] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const;
 FUNCTION_TABLE[295] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____num_put_28_29;
 FUNCTION_TABLE[296] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const;
 FUNCTION_TABLE[297] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const;
 FUNCTION_TABLE[298] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const;
 FUNCTION_TABLE[299] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[300] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const;
 FUNCTION_TABLE[301] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const;
 FUNCTION_TABLE[302] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const;
 FUNCTION_TABLE[303] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const;
 FUNCTION_TABLE[304] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____num_put_28_29;
 FUNCTION_TABLE[305] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const;
 FUNCTION_TABLE[306] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const;
 FUNCTION_TABLE[307] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const;
 FUNCTION_TABLE[308] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[309] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const;
 FUNCTION_TABLE[310] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const;
 FUNCTION_TABLE[311] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const;
 FUNCTION_TABLE[312] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const;
 FUNCTION_TABLE[313] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_get_28_29;
 FUNCTION_TABLE[314] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_get_28_29_1;
 FUNCTION_TABLE[315] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_date_order_28_29_20const;
 FUNCTION_TABLE[316] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[317] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[318] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[319] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[320] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[321] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[322] = std____2____time_get_c_storage_char_____weeks_28_29_20const;
 FUNCTION_TABLE[323] = std____2____time_get_c_storage_char_____months_28_29_20const;
 FUNCTION_TABLE[324] = std____2____time_get_c_storage_char_____am_pm_28_29_20const;
 FUNCTION_TABLE[325] = std____2____time_get_c_storage_char_____c_28_29_20const;
 FUNCTION_TABLE[326] = std____2____time_get_c_storage_char_____r_28_29_20const;
 FUNCTION_TABLE[327] = std____2____time_get_c_storage_char_____x_28_29_20const;
 FUNCTION_TABLE[328] = std____2____time_get_c_storage_char_____X_28_29_20const;
 FUNCTION_TABLE[329] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_get_28_29;
 FUNCTION_TABLE[330] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_get_28_29_1;
 FUNCTION_TABLE[331] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_date_order_28_29_20const;
 FUNCTION_TABLE[332] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[333] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[334] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[335] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[336] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[337] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[338] = std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const;
 FUNCTION_TABLE[339] = std____2____time_get_c_storage_wchar_t_____months_28_29_20const;
 FUNCTION_TABLE[340] = std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const;
 FUNCTION_TABLE[341] = std____2____time_get_c_storage_wchar_t_____c_28_29_20const;
 FUNCTION_TABLE[342] = std____2____time_get_c_storage_wchar_t_____r_28_29_20const;
 FUNCTION_TABLE[343] = std____2____time_get_c_storage_wchar_t_____x_28_29_20const;
 FUNCTION_TABLE[344] = std____2____time_get_c_storage_wchar_t_____X_28_29_20const;
 FUNCTION_TABLE[345] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1;
 FUNCTION_TABLE[346] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29;
 FUNCTION_TABLE[347] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[348] = std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_put_28_29_1;
 FUNCTION_TABLE[349] = std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____time_put_28_29;
 FUNCTION_TABLE[350] = std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[351] = std____2__moneypunct_char_2c_20false____moneypunct_28_29;
 FUNCTION_TABLE[352] = std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[353] = std____2__moneypunct_char_2c_20false___do_thousands_sep_28_29_20const;
 FUNCTION_TABLE[354] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[355] = std____2__moneypunct_char_2c_20false___do_curr_symbol_28_29_20const;
 FUNCTION_TABLE[356] = std____2__moneypunct_char_2c_20false___do_positive_sign_28_29_20const;
 FUNCTION_TABLE[357] = std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[358] = std____2__moneypunct_char_2c_20false___do_frac_digits_28_29_20const;
 FUNCTION_TABLE[359] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[360] = std____2__moneypunct_char_2c_20false___do_neg_format_28_29_20const;
 FUNCTION_TABLE[361] = std____2__moneypunct_char_2c_20true____moneypunct_28_29;
 FUNCTION_TABLE[362] = std____2__moneypunct_char_2c_20true___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[363] = std____2__moneypunct_char_2c_20true___do_thousands_sep_28_29_20const;
 FUNCTION_TABLE[364] = std____2__moneypunct_char_2c_20true___do_grouping_28_29_20const;
 FUNCTION_TABLE[365] = std____2__moneypunct_char_2c_20true___do_curr_symbol_28_29_20const;
 FUNCTION_TABLE[366] = std____2__moneypunct_char_2c_20true___do_positive_sign_28_29_20const;
 FUNCTION_TABLE[367] = std____2__moneypunct_char_2c_20true___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[368] = std____2__moneypunct_char_2c_20true___do_frac_digits_28_29_20const;
 FUNCTION_TABLE[369] = std____2__moneypunct_char_2c_20true___do_pos_format_28_29_20const;
 FUNCTION_TABLE[370] = std____2__moneypunct_char_2c_20true___do_neg_format_28_29_20const;
 FUNCTION_TABLE[371] = std____2__moneypunct_wchar_t_2c_20false____moneypunct_28_29;
 FUNCTION_TABLE[372] = std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[373] = std____2__moneypunct_wchar_t_2c_20false___do_thousands_sep_28_29_20const;
 FUNCTION_TABLE[374] = std____2__moneypunct_wchar_t_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[375] = std____2__moneypunct_wchar_t_2c_20false___do_curr_symbol_28_29_20const;
 FUNCTION_TABLE[376] = std____2__moneypunct_wchar_t_2c_20false___do_positive_sign_28_29_20const;
 FUNCTION_TABLE[377] = std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[378] = std____2__moneypunct_wchar_t_2c_20false___do_frac_digits_28_29_20const;
 FUNCTION_TABLE[379] = std____2__moneypunct_wchar_t_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[380] = std____2__moneypunct_wchar_t_2c_20false___do_neg_format_28_29_20const;
 FUNCTION_TABLE[381] = std____2__moneypunct_wchar_t_2c_20true____moneypunct_28_29;
 FUNCTION_TABLE[382] = std____2__moneypunct_wchar_t_2c_20true___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[383] = std____2__moneypunct_wchar_t_2c_20true___do_thousands_sep_28_29_20const;
 FUNCTION_TABLE[384] = std____2__moneypunct_wchar_t_2c_20true___do_grouping_28_29_20const;
 FUNCTION_TABLE[385] = std____2__moneypunct_wchar_t_2c_20true___do_curr_symbol_28_29_20const;
 FUNCTION_TABLE[386] = std____2__moneypunct_wchar_t_2c_20true___do_positive_sign_28_29_20const;
 FUNCTION_TABLE[387] = std____2__moneypunct_wchar_t_2c_20true___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[388] = std____2__moneypunct_wchar_t_2c_20true___do_frac_digits_28_29_20const;
 FUNCTION_TABLE[389] = std____2__moneypunct_wchar_t_2c_20true___do_pos_format_28_29_20const;
 FUNCTION_TABLE[390] = std____2__moneypunct_wchar_t_2c_20true___do_neg_format_28_29_20const;
 FUNCTION_TABLE[391] = std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____money_get_28_29;
 FUNCTION_TABLE[392] = std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[393] = std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29_20const;
 FUNCTION_TABLE[394] = std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____money_get_28_29;
 FUNCTION_TABLE[395] = std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[396] = std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29_20const;
 FUNCTION_TABLE[397] = std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____money_put_28_29;
 FUNCTION_TABLE[398] = std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const;
 FUNCTION_TABLE[399] = std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const;
 FUNCTION_TABLE[400] = std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20____money_put_28_29;
 FUNCTION_TABLE[401] = std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const;
 FUNCTION_TABLE[402] = std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const;
 FUNCTION_TABLE[403] = std____2__messages_char____messages_28_29;
 FUNCTION_TABLE[404] = std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const;
 FUNCTION_TABLE[405] = std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const;
 FUNCTION_TABLE[406] = std____2__messages_char___do_close_28long_29_20const;
 FUNCTION_TABLE[407] = std____2__messages_wchar_t____messages_28_29;
 FUNCTION_TABLE[408] = std____2__messages_wchar_t___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const;
 FUNCTION_TABLE[409] = std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const;
 FUNCTION_TABLE[410] = std____2__messages_wchar_t___do_close_28long_29_20const;
 FUNCTION_TABLE[411] = std____2____shared_count_____shared_count_28_29;
 FUNCTION_TABLE[412] = std____2____shared_count_____shared_count_28_29_1;
 FUNCTION_TABLE[413] = __cxa_pure_virtual;
 FUNCTION_TABLE[414] = std__exception___exception_28_29;
 FUNCTION_TABLE[415] = std__exception___exception_28_29_1;
 FUNCTION_TABLE[416] = std__exception__what_28_29_20const;
 FUNCTION_TABLE[417] = std__logic_error___logic_error_28_29_1;
 FUNCTION_TABLE[418] = std__logic_error__what_28_29_20const;
 FUNCTION_TABLE[419] = std__length_error___length_error_28_29;
 FUNCTION_TABLE[420] = __cxxabiv1____shim_type_info_____shim_type_info_28_29;
 FUNCTION_TABLE[421] = __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29;
 FUNCTION_TABLE[422] = __cxxabiv1____shim_type_info__noop1_28_29_20const;
 FUNCTION_TABLE[423] = __cxxabiv1____shim_type_info__noop2_28_29_20const;
 FUNCTION_TABLE[424] = __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const;
 FUNCTION_TABLE[425] = __cxxabiv1____class_type_info_____class_type_info_28_29;
 FUNCTION_TABLE[426] = __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const;
 FUNCTION_TABLE[427] = __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[428] = __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[429] = __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[430] = __cxxabiv1____si_class_type_info_____si_class_type_info_28_29;
 FUNCTION_TABLE[431] = __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[432] = __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[433] = __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[434] = __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29;
 FUNCTION_TABLE[435] = __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[436] = __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[437] = __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
}
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = newBuffer;
  }
  return oldPages;
}
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "mytest": mytest, 
  "myteststr": myteststr, 
  "malloc": dlmalloc, 
  "__getTypeName": __getTypeName, 
  "__embind_register_native_and_builtin_types": __embind_register_native_and_builtin_types, 
  "__errno_location": __errno_location, 
  "setThrew": setThrew, 
  "free": dlfree, 
  "__set_stack_limit": __set_stack_limit, 
  "stackSave": stackSave, 
  "stackAlloc": stackAlloc, 
  "stackRestore": stackRestore, 
  "__growWasmMemory": __growWasmMemory, 
  "dynCall_ii": dynCall_ii, 
  "dynCall_vi": dynCall_vi, 
  "dynCall_iii": dynCall_iii, 
  "dynCall_vii": dynCall_vii, 
  "dynCall_iiii": dynCall_iiii, 
  "dynCall_viijii": legalstub$dynCall_viijii, 
  "dynCall_viiii": dynCall_viiii, 
  "dynCall_iiiii": dynCall_iiiii, 
  "dynCall_viii": dynCall_viii, 
  "dynCall_ji": legalstub$dynCall_ji, 
  "dynCall_di": dynCall_di, 
  "dynCall_vij": legalstub$dynCall_vij, 
  "dynCall_jiji": legalstub$dynCall_jiji, 
  "dynCall_iidiiii": dynCall_iidiiii, 
  "dynCall_iiiiii": dynCall_iiiiii, 
  "dynCall_iiiiiiiii": dynCall_iiiiiiiii, 
  "dynCall_iiiiiii": dynCall_iiiiiii, 
  "dynCall_iiiiij": legalstub$dynCall_iiiiij, 
  "dynCall_iiiiid": dynCall_iiiiid, 
  "dynCall_iiiiijj": legalstub$dynCall_iiiiijj, 
  "dynCall_iiiiiiii": dynCall_iiiiiiii, 
  "dynCall_iiiiiijj": legalstub$dynCall_iiiiiijj, 
  "dynCall_viiiiii": dynCall_viiiiii, 
  "dynCall_v": dynCall_v, 
  "dynCall_viiiii": dynCall_viiiii
};
}

return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}// EMSCRIPTEN_END_ASM




)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary))
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];



if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}






// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 438,
  'maximum': 438 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}



/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5270848,
    STACKTOP = STACK_BASE,
    STACK_MAX = 27968,
    DYNAMIC_BASE = 5270848,
    DYNAMICTOP_PTR = 27808;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */




// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': 2147483648 / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
assert(65536 % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback(Module); // Pass the module as the first argument.
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = "neopt-lib.js.mem";


/**
 * @license
 * Copyright 2015 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */




// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}



var wasmBinaryFile = 'neopt-lib.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};




// STATICTOP = STATIC_BASE + 26944;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _atexit(func, arg) {
      warnOnce('atexit() called, but EXIT_RUNTIME is not set, so atexits() will not be called. set EXIT_RUNTIME to 1 (see the FAQ)');
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }

  
  var ___exception_infos={};
  
  var ___exception_last=0;
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return __ZSt18uncaught_exceptionv.uncaught_exceptions > 0;
    }function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___handle_stack_overflow() {
      abort('stack overflow')
    }

  
  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }function ___map_file(pathname, size) {
      setErrNo(63);
      return -1;
    }

  
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};function syscallMunmap(addr, len) {
      if ((addr | 0) === -1 || len === 0) {
        return -28;
      }
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        // Without FS support, only anonymous mappings are supported.
        assert(SYSCALLS.mappings[addr].flags & 32);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }function ___sys_munmap(addr, len) {
      return syscallMunmap(addr, len);
    }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }/** @param {Object=} options */
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }/** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var dc = Module['dynCall_' + signature];
      var fp = makeDynCaller(dc);
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if (stdStringIsUTF8) {
                  var decodeStartPtr = value + 4;
                  // Looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                      var currentBytePtr = value + 4 + i;
                      if (HEAPU8[currentBytePtr] == 0 || i == length) {
                          var maxRead = currentBytePtr - decodeStartPtr;
                          var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                          if (str === undefined) {
                              str = stringSegment;
                          } else {
                              str += String.fromCharCode(0);
                              str += stringSegment;
                          }
                          decodeStartPtr = currentBytePtr + 1;
                      }
                  }
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if (valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
  
              var decodeStartPtr = value + 4;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if (HEAP[currentBytePtr >> shift] == 0 || i == length) {
                      var maxReadBytes = currentBytePtr - decodeStartPtr;
                      var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                      if (str === undefined) {
                          str = stringSegment;
                      } else {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      abort();
    }

  function _bignum_add(ptr_str1, ptr_str2, ptr_str_out) {
      // 'Pointer_stringify' is deprecated... now use 'UTF8ToString'
      vstr1 = Module.UTF8ToString(ptr_str1);
      vstr2 = Module.UTF8ToString(ptr_str2);
      // TODO: AsciiToString ??
      // https://emscripten.org/docs/api_reference/preamble.js.html
  
      console.log("js bignum_add: " + vstr1 + " " + vstr2);
  
      //console.log("printing Module['BN']:");
      //console.log(Module['BN']);
      let BN = Module['BN'];
  
      // exporting some other function... testing..
      Module['mytestf'] = function () {
        console.log("oi");
      };
      //console.log(BN);
      var b1 = new BN(vstr1);
      var b2 = new BN(vstr2);
      var b3 = b1.add(b2);
      var rstr = b3.toString(10);
      console.log("b3=" + rstr);
  
      console.log("requires some bytes: " + lengthBytesUTF8(rstr));
      console.log("out space is '" + Module.UTF8ToString(ptr_str_out) + "'");
      //ptr_str_out = rstr;
      stringToUTF8(rstr, ptr_str_out, rstr.length + 1);
      //Module.writeStringToMemory(rstr, ptr_str_out); // DEPRECATED!! But stringToUTF8 is not working...
      console.log("out space is '" + Module.UTF8ToString(ptr_str_out) + "'");
      //stringToUTF8(rstr, ptr_str_out);
      //////return ptr; // string
      // NO RETURN... pass by parameter 'ptr_str_out'
      return lengthBytesUTF8(rstr);
    }

  function _csbiginteger_gt(ptr1, sz1, ptr2, sz2) {
      let csBN = csbiginteger.csBigInteger;
      // inputs are pre-allocated
      //console.log("csbiginteger_gt ptr1="+ptr1+ " sz1="+sz1+ " ptr2="+ptr2+ " sz2="+sz2);
      //
      //let csBN = Module['csBN'];
      var v1 = Module.HEAPU8.subarray(ptr1, ptr1 + sz1);
      var v2 = Module.HEAPU8.subarray(ptr2, ptr2 + sz2);
      //
      var lst1 = [];
      for (var i = 0; i < sz1; i++)
        lst1.push(v1[i]);
      var big1 = new csBN(lst1);
      var big1bn = big1.asBN();
      //
      var lst2 = [];
      for (var i = 0; i < sz2; i++)
        lst2.push(v2[i]);
      var big2 = new csBN(lst2);
      var big2bn = big2.asBN();
      //
      return big1bn.gt(big2bn);
    }

  function _csbiginteger_init_s(str_val, int_base, ptr_out, sz_out) {
      // inputs are pre-allocated
      var vstr1 = Module.UTF8ToString(str_val);
      //let csBN = Module['csBN'];
      console.log("WILL NEED TO USE csBN...");
      let csBN = csbiginteger.csBigInteger;
      console.log(csBN);
      var big1 = new csBN(vstr1, int_base);
      //console.log("csbiginteger_init_s str='"+vstr1+"' base="+int_base+ " ptr_out="+ptr_out+ " sz_out"+sz_out);
      //console.log(big1.toString());
      //
      var barray = big1.toByteArray();
      const myUint8Array = new Uint8Array(barray);
      //console.log(barray);
      //console.log(myUint8Array);
      //console.log("barray length = "+barray.length+ " myUint8Array length =" + myUint8Array.length);
      //console.log("will malloc");
      //const buffer = Module._malloc(myUint8Array.length);
      //console.log("will set");
      Module.HEAPU8.set(myUint8Array, ptr_out);
      //Module.HEAPU8.set(myUint8Array, buffer); // to test
      //console.log(Module.HEAPU8.subarray(ptr_out, ptr_out+myUint8Array.length));
      //console.log("will free");
      //Module._free(buffer);
  
      // returns 'real' size for out...
      return barray.length;
    }

  function _csbiginteger_lt(ptr1, sz1, ptr2, sz2) {
      let csBN = csbiginteger.csBigInteger;
      // inputs are pre-allocated
      //console.log("csbiginteger_gt ptr1="+ptr1+ " sz1="+sz1+ " ptr2="+ptr2+ " sz2="+sz2);
      //
      //let csBN = Module['csBN'];
      var v1 = Module.HEAPU8.subarray(ptr1, ptr1 + sz1);
      var v2 = Module.HEAPU8.subarray(ptr2, ptr2 + sz2);
      //
      var lst1 = [];
      for (var i = 0; i < sz1; i++)
        lst1.push(v1[i]);
      var big1 = new csBN(lst1);
      var big1bn = big1.asBN();
      //
      var lst2 = [];
      for (var i = 0; i < sz2; i++)
        lst2.push(v2[i]);
      var big2 = new csBN(lst2);
      var big2bn = big2.asBN();
      //
      return big1bn.lt(big2bn);
    }

  function _csbiginteger_mod(ptr1, sz1, ptr2, sz2, ptr_out, sz_out) {
      // inputs are pre-allocated
      //let csBN = Module['csBN'];
      let csBN = csbiginteger.csBigInteger;
      //
      var v1 = Module.HEAPU8.subarray(ptr1, ptr1 + sz1);
      var v2 = Module.HEAPU8.subarray(ptr2, ptr2 + sz2);
      //
      var lst1 = [];
      for (var i = 0; i < sz1; i++)
        lst1.push(v1[i]);
      var big1 = new csBN(lst1);
      var big1bn = big1.asBN();
      //
      var lst2 = [];
      for (var i = 0; i < sz2; i++)
        lst2.push(v2[i]);
      var big2 = new csBN(lst2);
      var big2bn = big2.asBN();
      //
      console.log("csbiginteger_mod big1='" + big1.toString(10) + "' big2='" + big1.toString(10) + "' -> ");
      // ====== perform operation ======
      var big3bn = big1bn.mod(big2bn);
      //
      var big3 = new csBN(big3bn);
      console.log("big3 ='" + big3.toString(10) + "'");
      var barray = big3.toByteArray();
      const myUint8Array = new Uint8Array(barray);
      Module.HEAPU8.set(myUint8Array, ptr_out);
  
      // returns 'real' size for out...
      return barray.length;
    }

  function _emscripten_get_sbrk_ptr() {
      return 27808;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  
  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        console.error('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
    }function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
  
      var PAGE_MULTIPLE = 65536;
  
      // Memory resize rules:
      // 1. When resizing, always produce a resized heap that is at least 16MB (to avoid tiny heap sizes receiving lots of repeated resizes at startup)
      // 2. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 3a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 3b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 4. Max size for the heap is capped at 2048MB-PAGE_MULTIPLE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 5. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit was set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      var maxHeapSize = 2147483648;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      var minHeapSize = 16777216;
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for(var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), PAGE_MULTIPLE));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
          err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  
  
  var ENV={};
  
  function __getExecutableName() {
      return thisProgram || './this.program';
    }function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          // Browser language detection #8751
          'LANG': ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8',
          '_': __getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }function _environ_get(__environ, environ_buf) {
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)]=ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)]=strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)]=bufSize;
      return 0;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _external_sha256(ptr1, sz1, ptr_out, sz_out) {
      let CryptoJS = Module['CryptoJS'];
      //
      var v1 = Module.HEAPU8.subarray(ptr1, ptr1 + sz1);
      //
      // helper function
      const toHexString = bytes =>
        bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');
      //
      //console.log("SHA256 v1 = "+v1);
      //
      var hexv1 = toHexString(v1);
      //
      //console.log("SHA256 hexv1 = "+hexv1);
      //
      var hexEnc1 = CryptoJS.enc.Hex.parse(hexv1);
      //
      //console.log("SHA256 hexEnc1 = "+hexEnc1);
      //
      var outEnc1 = CryptoJS.SHA256(hexEnc1);
      //
      //console.log("SHA256 outEnc1 = "+outEnc1);
      //
      // MAYBE THIS IS USEFUL ON WEB PLATFORMS (NON-NODE)
      const fromHexString = hexString =>
        new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));
      //
      var hex_out = CryptoJS.enc.Hex.stringify(outEnc1);
      //
      var vout = Uint8Array.from(Buffer.from(hex_out, 'hex'));
      //var vout = fromHexString(outEnc1);
      //
      //console.log("SHA256 vout = "+vout);
      Module.HEAPU8.set(vout, ptr_out); // TODO: test 'sz_out' for size checks
  
      //var v2 = Module.HEAPU8.subarray(ptr2, ptr2+sz2);
  
      //console.log("WARNING: EMPTY FUNCTION 'external_sha256' on licore_exports.js");
      return vout.length;
    }

  function _fd_close(fd) {
      abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM');
      return 0;
    }

  function _fd_read(fd, iov, iovcnt, pnum) {
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  abort('it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM')}

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      if (typeof _fflush !== 'undefined') _fflush(0);
      var buffers = SYSCALLS.buffers;
      if (buffers[1].length) SYSCALLS.printChar(1, 10);
      if (buffers[2].length) SYSCALLS.printChar(2, 10);
    }function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAP32[((pnum)>>2)]=num
      return 0;
    }

  function _mycrypto(vint) {
      //alert('mycrypto(value='+vint+')');
      console.log('mycrypto print: ' + vint);
      return vint + 1;
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
var ASSERTIONS = true;

/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


var asmGlobalArg = {};
var asmLibraryArg = { "__assert_fail": ___assert_fail, "__cxa_allocate_exception": ___cxa_allocate_exception, "__cxa_atexit": ___cxa_atexit, "__cxa_throw": ___cxa_throw, "__handle_stack_overflow": ___handle_stack_overflow, "__map_file": ___map_file, "__sys_munmap": ___sys_munmap, "_embind_register_bool": __embind_register_bool, "_embind_register_emval": __embind_register_emval, "_embind_register_float": __embind_register_float, "_embind_register_function": __embind_register_function, "_embind_register_integer": __embind_register_integer, "_embind_register_memory_view": __embind_register_memory_view, "_embind_register_std_string": __embind_register_std_string, "_embind_register_std_wstring": __embind_register_std_wstring, "_embind_register_void": __embind_register_void, "abort": _abort, "bignum_add": _bignum_add, "csbiginteger_gt": _csbiginteger_gt, "csbiginteger_init_s": _csbiginteger_init_s, "csbiginteger_lt": _csbiginteger_lt, "csbiginteger_mod": _csbiginteger_mod, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "environ_get": _environ_get, "environ_sizes_get": _environ_sizes_get, "exit": _exit, "external_sha256": _external_sha256, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "memory": wasmMemory, "mycrypto": _mycrypto, "setTempRet0": setTempRet0, "strftime_l": _strftime_l, "table": wasmTable };
var asm = createWasm();
Module["asm"] = asm;
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasm_call_ctors"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _mytest = Module["_mytest"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["mytest"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _myteststr = Module["_myteststr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["myteststr"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__getTypeName"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__embind_register_native_and_builtin_types"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__errno_location"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["free"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___set_stack_limit = Module["___set_stack_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__set_stack_limit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__growWasmMemory"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viijii = Module["dynCall_viijii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viijii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_ji = Module["dynCall_ji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_di = Module["dynCall_di"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_di"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vij = Module["dynCall_vij"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vij"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiij = Module["dynCall_iiiiij"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiij"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiijj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiijj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};



/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
Module["setValue"] = setValue;
Module["getValue"] = getValue;
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["UTF8ToString"] = UTF8ToString;
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["stringToUTF8"] = stringToUTF8;
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStringToMemory"] = writeStringToMemory;
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setjmpId")) Module["setjmpId"] = function() { abort("'setjmpId' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flush_NO_FILESYSTEM")) Module["flush_NO_FILESYSTEM"] = function() { abort("'flush_NO_FILESYSTEM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        var e = new Error('could not load memory initializer ' + memoryInitializer);
          throw e;
      });
    };
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush();
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



